Перем ДокументРозницы;
Перем ТекущийСтатусДокумента;
Перем ЗаказыПутевогоЛиста;
Перем МестаХраненияХолода;
Перем СвойствоСрокГодности;
Перем СвойствоПредупреждатьСрок;
Перем КонтрагентОЗОН;
Перем КонтрагентЯндекс;
Перем КонтрагентWB;
Перем СписокМестДляЗапроса;
Перем Зона;
Перем мФорма;
Перем ПользовательБазулин;
Перем ПросмотрПередПечатью;
Перем КаталогМестЗоныВторогоЭтажа;
Перем КаталогМестЗоныДорогогоТовара;
Перем мСтатусДокумента;
Перем СкладДокумента;
Перем СписокСкладовСборкиПоДлинномуШК;
Перем СкладГурьянова;
Перем СкладНоворязанка;
Перем СкладЧертаново;
Перем ГруппаСкладовМосква;
Перем СкладВозврата Экспорт;
Перем ТекущийСклад Экспорт;

#Область Общие_процедуры_и_функции

#Область Проверка_версии
Процедура ПроверкаВерсии()
	// Условия по наименованию версий:
	// 1. Наименование версии кроме прочего должно содержать дату в формате ДД.ММ.ГГГГ (лидирующие нули обязательны) и, через дефис без пробелов, числовой номер версии, начиная с 1
	// 2. Версия обработки записывается в комментарий обработки
	
	//ЧтениеВерсииВБазе 
	
	СтруктураВерсииВБазе = ПолучитьСтруктуруВерсииОбработкиВБазе();
	
	//СравнениеСТекущейВерсией  
	
	СтруктураТекущейВерсии = ПолучитьСтруктуруТекущейВерсииОбработки();
	
	//Если ВерсияВБазе Неопределено или меньше текущей Тогда
	//	Заменить версию в базе на текущую
	//ИначеЕсли ВерсияВБазе больше текущей Тогда
	//	Перезапустить 1С
	//Иначе продолжить запуск обработки, т.е. ничего не предпринимать. 
	
	Если СтруктураТекущейВерсии["Дата"] <> Неопределено Тогда 
		Если СтруктураВерсииВБазе = Неопределено 
			или	СтруктураВерсииВБазе["Дата"] < СтруктураТекущейВерсии["Дата"]   
			или (СтруктураВерсииВБазе["Дата"] = СтруктураТекущейВерсии["Дата"] и СтруктураВерсииВБазе["Номер"] < СтруктураТекущейВерсии["Номер"])
			Тогда
			БС_ИзмененияКонфигурацииСервер.СохранитьЗначениеВОбщихНастройках("ТСД", "Версия",, СтруктураТекущейВерсии);
		ИначеЕсли СтруктураВерсииВБазе["Дата"] > СтруктураТекущейВерсии["Дата"] 
			или (СтруктураВерсииВБазе["Дата"] = СтруктураТекущейВерсии["Дата"] и СтруктураВерсииВБазе["Номер"] > СтруктураТекущейВерсии["Номер"])
			Тогда
			ЗавершитьРаботуСистемы(Ложь, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

Функция ПолучитьСтруктуруВерсииОбработкиВБазе()
	Возврат БС_ИзмененияКонфигурацииСервер.ВосстановитьЗначениеИзОбщихНастроек("ТСД", "Версия",, Ложь);
КонецФункции

Функция ПолучитьСтруктуруТекущейВерсииОбработки() 
	Возврат ПреобразоватьСтрокуВСтруктуруВерсииОбработки(ЭтотОбъект.Метаданные().Комментарий);
КонецФункции   

Функция ПреобразоватьСтрокуВСтруктуруВерсииОбработки(СтрокаВерсии)
	СтруктураВерсии = Новый Структура("Дата, Номер");
	
	РВШаблон = "(\d{2}.){2,2}\d{4}-\d{1,}";
	РВ = СтрНайтиПоРегулярномуВыражению(СтрокаВерсии, РВШаблон);
	ДатаСтр = Лев(РВ.Значение, 10);
	ДатаСтр2 = Сред(ДатаСтр,7)+Сред(ДатаСтр,4,2)+Лев(ДатаСтр,2);
	НомерСтр = Сред(РВ.Значение, 12);
	Попытка
		ДатаВерсии = Дата(ДатаСтр2+"000000");
		НомерВерсии = Число(НомерСтр);
		СтруктураВерсии["Дата"] = ДатаВерсии;
		СтруктураВерсии["Номер"]  = НомерВерсии;
	Исключение
		БС_ТелеграмАпи.sendMessage(,СтрШаблон("ТСД. Ошибка преобразования структуры версии из строки ""%1"".", СтрокаВерсии));  
	КонецПопытки;
	
	Возврат СтруктураВерсии;
КонецФункции
#КонецОбласти

Процедура ИнициализацияНачальныхДанных() Экспорт
	ЧтениеТаблицыСоответствияМестХранения();
	
	МестаХраненияХолода = Новый СписокЗначений;
	МестаХраненияХолода.Добавить(Справочники.МестаХранения.НайтиПоКоду("000000034"));	
	МестаХраненияХолода.Добавить(Справочники.МестаХранения.НайтиПоКоду("000000035"));	
	МестаХраненияХолода.Добавить(Справочники.МестаХранения.НайтиПоКоду("000000036"));	
	МестаХраненияХолода.Добавить(Справочники.МестаХранения.НайтиПоКоду("000000121"));	
	
	СписокСкладовСборкиПоДлинномуШК = Новый СписокЗначений;
	СписокСкладовСборкиПоДлинномуШК.Добавить(СкладГурьянова);
КонецПроцедуры

Процедура ЧтениеТаблицыСоответствияМестХранения()
	Настройки = ЧтениеОбъектаИзСохраненныхНастроек("ТСД", "ТаблицыСоответствияМестХранения");
	Если Настройки = Неопределено Тогда Возврат КонецЕсли;
	Если Настройки.Колонки.Найти("Склад") = Неопределено Тогда
		Настройки.Колонки.Добавить("Склад");
	КонецЕсли;
	
	Для Каждого Строка Из Настройки Цикл
		Если не ЗначениеЗаполнено(Строка.Склад) Тогда
			Строка.Склад = СкладГурьянова;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСоответствияМестХранения.Загрузить(Настройки);
КонецПроцедуры

Процедура ЧтениеТаблицыРазрешенийНаПроверку()
	СохраненнаяТаблица = ЧтениеОбъектаИзСохраненныхНастроек("ТСД", "ТаблицаРазрешенийНаПроверку");
	Если СохраненнаяТаблица <> Неопределено Тогда
		ТаблицаРазрешенийНаПроверку.Загрузить(СохраненнаяТаблица);
	КонецЕсли;
КонецПроцедуры

Процедура ЧтениеТаблицыРазрешенийНаСборкуДТ()
	СохраненнаяТаблица = ЧтениеОбъектаИзСохраненныхНастроек("ТСД", "ТаблицаРазрешенийНаСборкуДТ");
	Если СохраненнаяТаблица <> Неопределено Тогда
		ТаблицаРазрешенийСборкиДТ.Загрузить(СохраненнаяТаблица);
	КонецЕсли;
КонецПроцедуры

Процедура СохранениеДанных() Экспорт
	СохранениеТаблицыСоответствияМестХранения();
КонецПроцедуры

Процедура СохранениеТаблицыСоответствияМестХранения()  
	СохраненнаяНастройка = Новый ХранилищеЗначения(ТаблицаСоответствияМестХранения.Выгрузить());
	ЗаписьОбъектаВСохраненныеНастройки("ТСД", "ТаблицыСоответствияМестХранения", СохраненнаяНастройка); 
КонецПроцедуры

Процедура ЗаписьОбъектаВСохраненныеНастройки(ИмяОбъекта, НаименованиеНастройки, СохраненнаяНастройка)
	РС = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	РС.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;
	РС.ИмяОбъекта = ИмяОбъекта;
	РС.НаименованиеНастройки = НаименованиеНастройки;
	РС.СохраненнаяНастройка = СохраненнаяНастройка;
	РС.Записать(Истина);
КонецПроцедуры

Функция ЧтениеОбъектаИзСохраненныхНастроек(ИмяОбъекта, НаименованиеНастройки)
	РС = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	РС.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;
	РС.ИмяОбъекта = ИмяОбъекта;
	РС.НаименованиеНастройки = НаименованиеНастройки;
	РС.Прочитать();
	Возврат РС.СохраненнаяНастройка.Получить();
КонецФункции

Процедура СохранениеТаблицыРазрешенийНаПроверку()
	РС = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	РС.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;
	РС.ИмяОбъекта = "ТСД";
	РС.НаименованиеНастройки = "ТаблицаРазрешенийНаПроверку";
	РС.СохраненнаяНастройка = Новый ХранилищеЗначения(ТаблицаРазрешенийНаПроверку.Выгрузить());
	РС.Записать(Истина);
КонецПроцедуры

Процедура СохранениеТаблицыРазрешенийНаСборкуДТ()
	РС = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	РС.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;
	РС.ИмяОбъекта = "ТСД";
	РС.НаименованиеНастройки = "ТаблицаРазрешенийНаСборкуДТ";
	РС.СохраненнаяНастройка = Новый ХранилищеЗначения(ТаблицаРазрешенийСборкиДТ.Выгрузить());
	РС.Записать(Истина);
КонецПроцедуры

Функция ПолучитьСтатусДокумента(Документ)
	Если Документ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СкладДокумента = СкладГурьянова Тогда
		Зона = "1";
	ИначеЕсли СкладДокумента = СкладНоворязанка Тогда
		Зона = "2";
	ИначеЕсли СкладДокумента = СкладЧертаново Тогда
		Зона = "3";
	Иначе
		Зона = Неопределено;
	КонецЕсли;
	
	ЭтоWB = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") и Документ.Контрагент = КонтрагентWB;
	
	Если ЗначениеЗаполнено(Зона) Тогда
		ЗапросСтатуса = Новый Запрос;
		ЗапросСтатуса.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БС_СтатусыДокументов.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
		|ГДЕ
		|	БС_СтатусыДокументов.Документ = &Документ
		|	И БС_СтатусыДокументов.Зона = &Зона
		|
		|УПОРЯДОЧИТЬ ПО
		|	БС_СтатусыДокументов.Период УБЫВ";
		ЗапросСтатуса.УстановитьПараметр("Документ", Документ);
		ЗапросСтатуса.УстановитьПараметр("Зона", Зона);
		Результат = ЗапросСтатуса.Выполнить();
		Если не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Статус;
		КонецЕсли;
	КонецЕсли;
	
	ЗапросСтатуса = Новый Запрос;
	ЗапросСтатуса.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БС_СтатусыДокументов.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
	|ГДЕ
	|	БС_СтатусыДокументов.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	БС_СтатусыДокументов.Период УБЫВ";
	ЗапросСтатуса.УстановитьПараметр("Документ", Документ);
	
	Результат = ЗапросСтатуса.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Статус;
	КонецЕсли;
КонецФункции

Функция ПолучитьДатуПоследнегоСтатуса(Документ)
	ЗапросСтатуса = Новый Запрос;
	ЗапросСтатуса.Текст =
	"ВЫБРАТЬ
	|	ДокументыСкладаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.БС_СтатусыДокументов.СрезПоследних(, Документ = &Документ) КАК ДокументыСкладаСрезПоследних";
	ЗапросСтатуса.УстановитьПараметр("Документ", Документ);
	Результат = ЗапросСтатуса.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Период;
КонецФункции

Процедура ИзменитьЗаписьСтатусаДокумента(Документ, Статус, НовыеРеквизиты) 
	ЗапросЗаписи = Новый Запрос;
	ЗапросЗаписи.Текст =
	"ВЫБРАТЬ
	|	ДокументыСклада.Период КАК Период,
	|	ДокументыСклада.Документ КАК Документ,
	|	ДокументыСклада.Статус КАК Статус,
	|	ДокументыСклада.Пользователь КАК Пользователь,
	|	ДокументыСклада.Комментарий КАК Комментарий,
	|	ДокументыСклада.ВсегоУпаковок КАК ВсегоУпаковок,
	|	ДокументыСклада.ЕстьХолод КАК ЕстьХолод
	|ИЗ
	|	РегистрСведений.БС_СтатусыДокументов КАК ДокументыСклада
	|ГДЕ
	|	ДокументыСклада.Документ = &Документ
	|	И ДокументыСклада.Статус = &Статус";
	ЗапросЗаписи.УстановитьПараметр("Документ", Документ);
	ЗапросЗаписи.УстановитьПараметр("Статус", Статус);
	РезультатЗапроса = ЗапросЗаписи.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		ВыборкаЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаЗаписи.Следующий();
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.БС_СтатусыДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ВыборкаЗаписи.Период;
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Значение = Неопределено;
		Если НовыеРеквизиты.Свойство("Пользователь", Значение) Тогда
			МенеджерЗаписи.Пользователь = Значение;
		Иначе
			МенеджерЗаписи.Пользователь = ВыборкаЗаписи.Пользователь;
		КонецЕсли;
		
		Значение = Неопределено;
		Если НовыеРеквизиты.Свойство("Комментарий", Значение) Тогда
			МенеджерЗаписи.Комментарий = Значение;
		Иначе
			МенеджерЗаписи.Комментарий = ВыборкаЗаписи.Комментарий;
		КонецЕсли;
		
		Значение = Неопределено;
		Если НовыеРеквизиты.Свойство("ВсегоУпаковок", Значение) Тогда
			МенеджерЗаписи.ВсегоУпаковок = Значение;
		Иначе
			МенеджерЗаписи.ВсегоУпаковок = ВыборкаЗаписи.ВсегоУпаковок;
		КонецЕсли;
		
		Значение = Неопределено;
		Если НовыеРеквизиты.Свойство("ЕстьХолод", Значение) Тогда
			МенеджерЗаписи.ЕстьХолод = Значение;
		Иначе
			МенеджерЗаписи.ЕстьХолод = ВыборкаЗаписи.ЕстьХолод;
		КонецЕсли;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьСтатусДокумента(Документ, Статус, Пользователь, Время, ПревьюКомментария = Неопределено, СоставУпаковок = Неопределено) Экспорт
	ТекущийСтатус = ПолучитьСтатусДокумента(Документ);
	Если ТекущийСтатус = Перечисления.БС_СтатусыДокументов.Отменен Тогда
		Текст = "Документ """+Документ+""" отменен покупателем.";
		РазбитьСтроку(Текст);
		мПредупреждение(Текст);
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.БС_СтатусыДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Зона = Зона;
	МенеджерЗаписи.Статус = Статус;
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Период = Время;
	Комментарий = ?(ПревьюКомментария = Неопределено, "", ПревьюКомментария + ". ") + "Терминал - " + ПолучитьИмяТерминальногоКомпьютера();
	Если Статус = Перечисления.БС_СтатусыДокументов.Упакован и ТипЗнч(СоставУпаковок) = Тип("Структура") Тогда
		МенеджерЗаписи.ВсегоУпаковок = СоставУпаковок["ВсегоУпаковок"];
		МенеджерЗаписи.ЕстьХолод = СоставУпаковок["ЕстьХолод"];
	Иначе
		МенеджерЗаписи.ВсегоУпаковок = Неопределено;
		МенеджерЗаписи.ЕстьХолод = Неопределено;
	КонецЕсли;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.Записать();
	
	//ИзмененияКонфигурации2.ИзменитьСтатусДокумента(Документ, Статус);
	
	//Если Статус = Перечисления.БС_СтатусыДокументов.Собран Тогда
	//	ПроверкаСобранныхЗаказов(Документ, Пользователь);
	//КонецЕсли;
КонецПроцедуры

Функция ПолучитьСтатусБезЗоны(Документ)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БС_СтатусыДокументов.Статус КАК Статус
	|ИЗ
	|	(ВЫБРАТЬ
	|		БС_СтатусыДокументов.Документ КАК Документ,
	|		МАКСИМУМ(БС_СтатусыДокументов.Период) КАК Период
	|	ИЗ
	|		РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
	|	ГДЕ
	|		БС_СтатусыДокументов.Документ = &Документ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		БС_СтатусыДокументов.Документ) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
	|		ПО ВложенныйЗапрос.Документ = БС_СтатусыДокументов.Документ
	|			И ВложенныйЗапрос.Период = БС_СтатусыДокументов.Период";
	Запрос.УстановитьПараметр("Документ", Документ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Статус;
	КонецЕсли;
КонецФункции

Функция ПолучитьСоставУпаковокПоЗаказу(Документ)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БС_СтатусыДокументовСрезПоследних.ВсегоУпаковок КАК ВсегоУпаковок,
	|	БС_СтатусыДокументовСрезПоследних.ЕстьХолод КАК ЕстьХолод
	|ИЗ
	|	РегистрСведений.БС_СтатусыДокументов.СрезПоследних(
	|			,
	|			Документ = &Документ
	|				И Статус = ЗНАЧЕНИЕ(Перечисление.БС_СтатусыДокументов.Упакован)) КАК БС_СтатусыДокументовСрезПоследних";
	Запрос.УстановитьПараметр("Документ", Документ);
	Результат = Запрос.Выполнить();
	СоставУпаковок = Новый Структура;
	Если Результат.Пустой() Тогда
		СоставУпаковок.Вставить("КоличествоУпаковок", 1);
		СоставУпаковок.Вставить("ЕстьХолод", Ложь);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СоставУпаковок.Вставить("КоличествоУпаковок", Выборка.ВсегоУпаковок);
		СоставУпаковок.Вставить("ЕстьХолод", Выборка.ЕстьХолод);
	КонецЕсли;
	Возврат СоставУпаковок;
КонецФункции

Процедура УдалитьПоследнийСтатус(Документ) Экспорт
	ЗапросСтатуса = Новый Запрос;
	ЗапросСтатуса.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыСклада.Статус КАК Статус,
	|	ДокументыСклада.Период КАК Период
	|ИЗ
	|	РегистрСведений.БС_СтатусыДокументов КАК ДокументыСклада
	|ГДЕ
	|	ДокументыСклада.Документ = &Документ
	|	И ДокументыСклада.Зона = &Зона
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыСклада.Период УБЫВ";
	ЗапросСтатуса.УстановитьПараметр("Документ", Документ);
	Если Зона = Неопределено Тогда
		ЗапросСтатуса.Текст = СтрЗаменить(ЗапросСтатуса.Текст, "ДокументыСклада.Зона = &Зона", "Истина");
	Иначе
		ЗапросСтатуса.УстановитьПараметр("Зона", Зона);
	КонецЕсли;
	Параметры = ЗапросСтатуса.Выполнить().Выгрузить()[0];
	
	МенеджерЗаписи = РегистрыСведений.БС_СтатусыДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Параметры.Период;
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Статус = Параметры.Статус;
	МенеджерЗаписи.Удалить();
	
	ПоследнийСтатус = ПолучитьСтатусДокумента(Документ);
	//ИзмененияКонфигурации2.ИзменитьСтатусДокумента(Документ, ПоследнийСтатус);
КонецПроцедуры

///*** НЕ ИСПОЛЬЗУЕТСЯ
Процедура ПроверкаСобранныхЗаказов(Заказ, Сборщик)
	ТекстСообщения = "";
	
	#Область Проверка_на_содержание_в_заказе_номенклатуры_без_ШК
	Товары = Заказ.Товары;
	МассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");
	ЗапросНоменклатурыБезШК = Новый Запрос;
	ЗапросНоменклатурыБезШК.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Штрихкоды.Владелец КАК Владелец
	|		ИЗ
	|			РегистрСведений.Штрихкоды КАК Штрихкоды) КАК ВложенныйЗапрос
	|		ПО Номенклатура.Ссылка = ВложенныйЗапрос.Владелец
	|ГДЕ
	|	Номенклатура.Ссылка В(&Товары)
	|	И ВложенныйЗапрос.Владелец ЕСТЬ NULL";
	ЗапросНоменклатурыБезШК.УстановитьПараметр("Товары", МассивНоменклатуры);
	Выборка = ЗапросНоменклатурыБезШК.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		ТекстСообщения = "В заказе есть позиции номенклатуры без штрих-кода:";
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + Выборка.Ссылка;
		КонецЦикла;
		ТекстСообщения = ТекстСообщения + Символы.ПС + "------------------------------";
	КонецЕсли;
	#КонецОбласти
	
	#Область Проверка_на_наличие_в_заказе_номенклатуры_не_отсканированной_на_терминале
	ЗапросСобраннойНоменклатуры = Новый Запрос;
	ЗапросСобраннойНоменклатуры.Текст =
	"ВЫБРАТЬ
	|	НоменклатураПоТСД.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.БС_НоменклатураПоТСД КАК НоменклатураПоТСД
	|ГДЕ
	|	НоменклатураПоТСД.Документ = &Документ
	|	И НоменклатураПоТСД.Операция = ""Сборка""";
	ЗапросСобраннойНоменклатуры.УстановитьПараметр("Документ", Заказ);
	ТаблицаСобраннойНоменклатуры = ЗапросСобраннойНоменклатуры.Выполнить().Выгрузить();
	ТаблицаСобраннойНоменклатуры.Индексы.Добавить("Номенклатура");
	
	СписокНеСканированнойНоменклатуры = Новый СписокЗначений;
	Для Каждого СтрокаДокумента Из Товары Цикл
		НайденаяСтрока = ТаблицаСобраннойНоменклатуры.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");
		Если НайденаяСтрока = Неопределено Тогда
			СписокНеСканированнойНоменклатуры.Добавить(СтрокаДокумента.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокНеСканированнойНоменклатуры.Количество() > 0 Тогда
		ТекстСообщения = ?(ТекстСообщения = "", "", ТекстСообщения + Символы.ПС + Символы.ПС) + "В заказе есть неотсканированные позиции:";
		Для Каждого ЭлементСписка Из СписокНеСканированнойНоменклатуры Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + ЭлементСписка.Значение + " ("+ТекстШтрихКодаДляОповещения(ЭлементСписка.Значение)+")";
		КонецЦикла;
		ТекстСообщения = ТекстСообщения + Символы.ПС + "------------------------------";
	КонецЕсли;
	#КонецОбласти
	
	#Область Задача
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		//Есть что сообщать руководству
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Сборщик: " + Сборщик;
		
		СписокПолучателейСообщения = Новый СписокЗначений;
		ВыборкаПользователей = Справочники.Пользователи.Выбрать(Справочники.Пользователи.ПустаяСсылка());
		Пока ВыборкаПользователей.Следующий() Цикл
			Если 
				СокрЛП(ВыборкаПользователей.Код) = "Фейгина Светлана" 
				или СокрЛП(ВыборкаПользователей.Код) = "Мышинский Дмитрий" 
				//или СокрЛП(ВыборкаПользователей.Код) = "Соловьёв Андрей" 
				Тогда
				СписокПолучателейСообщения.Добавить(ВыборкаПользователей.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементСписка Из СписокПолучателейСообщения Цикл
			НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
			НоваяЗадача.Наименование = "Заказ собран с предупреждениями";
			НоваяЗадача.Исполнитель = ЭлементСписка.Значение;
			НоваяЗадача.Описание = ТекстСообщения;
			НоваяЗадача.Оповещение = Истина;
			НоваяЗадача.Объект = Заказ;
			НоваяЗадача.Дата = ТекущаяДата();
			НоваяЗадача.СрокОповещения = ТекущаяДата();
			НоваяЗадача.СрокИсполнения = ТекущаяДата();
			НоваяЗадача.Записать();
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

Функция ТекстШтрихКодаДляОповещения(НоменклатураСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", НоменклатураСсылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат "нет штрих-кода";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат "штрих-код: "+Выборка.Штрихкод;
	КонецЕсли;
КонецФункции

Функция ПолучитьИмяТерминальногоКомпьютера() Экспорт 
	Перем Значение; // В эту переменную запишем значение из реестра
	Перем МассивИмёнРазделов;
	
	HKEY_CURRENT_USER = 2147483649;
	sSubKeyName = "Volatile Environment";
	sValueName = "CLIENTNAME";
	RegProv = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv");
	
	RegProv.EnumKey(HKEY_CURRENT_USER, sSubKeyName, МассивИмёнРазделов);
	ИмяПодраздела = МассивИмёнРазделов.GetValue(0);
	RegProv.GetStringValue(HKEY_CURRENT_USER, sSubKeyName+"\"+ИмяПодраздела, sValueName, Значение);
	
	Возврат Значение;
КонецФункции

Процедура ИзменитьШтрихКодНоменклатуры(ШтрихКод, Номенклатура, Единица) Экспорт
	
	Если не (СокрЛП(Пользователь.Наименование) = "Солдянов Сергей"
		или СокрЛП(Пользователь.Наименование) = "Антошкин Александр" 
		или СокрЛП(Пользователь.Наименование) = "Матвеев Александр" 
		или СокрЛП(Пользователь.Наименование) = "Борисов Юрий" 
		или СокрЛП(Пользователь.Наименование) = "Тряпицин Алексей") Тогда
		Возврат;
	КонецЕсли;
	
	// *** Проверка на существование ШК в базе
	// *** если уже есть, то не добавляем
	
	ЗапросШтрихКода = Новый Запрос;
	ЗапросШтрихКода.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Штрихкоды.Владелец КАК Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод";
	ЗапросШтрихКода.УстановитьПараметр("Штрихкод", ШтрихКод);
	Результат = ЗапросШтрихКода.Выполнить();
	Если не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ТекстПредупреждения = "Штрихкод """+ШтрихКод+""" используется для позиции """+Выборка.Владелец+""". Для его изменения обратитесь к Боровкову Анатолию.";
		РазбитьСтроку(ТекстПредупреждения);
		мПредупреждение(ТекстПредупреждения);
		
		ТекстЗадачи = "Попытка привязать штрихкод """+ШтрихКод+""", принадлежащий товару """+Выборка.Владелец+""", к товару """+Номенклатура+""". Сборщик: "+Пользователь+". Заказ: "+Документ+".";
		ПользовательБоровков = Справочники.Пользователи.НайтиПоКоду("Боровков Анатолий");
		//ИзмененияКонфигурации2.СоздатьЗадачу("Неверный штрихкод", ПользовательБоровков,, ТекстЗадачи);
		Возврат;
	КонецЕсли;
	
	// *** Если у позиции, в которую добавляется ШК уже есть другой ШК,
	// *** то в такую позицию добавление запрещено
	
	//ЗапросНоменклатуры = Новый Запрос;
	//ЗапросНоменклатуры.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Штрихкоды.Штрихкод КАК Штрихкод
	//|ИЗ
	//|	РегистрСведений.Штрихкоды КАК Штрихкоды
	//|ГДЕ
	//|	Штрихкоды.Владелец = &Владелец";
	//ЗапросНоменклатуры.УстановитьПараметр("Владелец", Номенклатура);
	//Результат = ЗапросНоменклатуры.Выполнить();
	//Если не Результат.Пустой() Тогда
	//	Выборка = Результат.Выбрать();
	//	Выборка.Следующий();
	//	ТекстПредупреждения = "Позиция """+Номенклатура+""" уже имеет штрихкод """+Выборка.Штрихкод+""". Для изменения обратитесь к Боровкову Анатолию.";
	//	РазбитьСтроку(ТекстПредупреждения);
	//	мПредупреждение(ТекстПредупреждения);
	//	
	//	ТекстЗадачи = "Попытка привязать новый штрихкод """+ШтрихКод+""" к товару """+Номенклатура+""" уже имеющему свой штрихкод. Сборщик: "+Пользователь+". Заказ: "+Документ+".";
	//	ПользовательБоровков = Справочники.Пользователи.НайтиПоКоду("Боровков Анатолий");
	//	//ИзмененияКонфигурации2.СоздатьЗадачу("Неверный штрихкод", ПользовательБоровков,, ТекстПредупреждения);		
	//	Возврат;
	//КонецЕсли;
	//
	//#Область Так_было
	//ЗапросШтрихКодовДляУдаления = Новый Запрос;
	//ЗапросШтрихКодовДляУдаления.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	Штрихкоды.Штрихкод КАК Штрихкод,
	//|	Штрихкоды.Владелец КАК Владелец,
	//|	Штрихкоды.ТипШтрихкода КАК ТипШтрихкода,
	//|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|	Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//|	Штрихкоды.СерияНоменклатуры КАК СерияНоменклатуры,
	//|	Штрихкоды.Качество КАК Качество
	//|ИЗ
	//|	РегистрСведений.Штрихкоды КАК Штрихкоды
	//|ГДЕ
	//|	Штрихкоды.Штрихкод = &Штрихкод";
	//ЗапросШтрихКодовДляУдаления.УстановитьПараметр("Штрихкод", ШтрихКод);
	////ЗапросШтрихКодовДляУдаления.УстановитьПараметр("Владелец", Номенклатура);
	////ЗапросШтрихКодовДляУдаления.УстановитьПараметр("ЕдиницаИзмерения", Единица);
	//
	//Выборка = ЗапросШтрихКодовДляУдаления.Выполнить().Выбрать();
	//ШКСтарый = Неопределено;
	//Пока Выборка.Следующий() Цикл
	//	МЗ = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	//	МЗ.Штрихкод = Выборка.Штрихкод;
	//	МЗ.Владелец = Выборка.Владелец;
	//	МЗ.ТипШтрихкода = Выборка.ТипШтрихкода;
	//	МЗ.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
	//	МЗ.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
	//	МЗ.СерияНоменклатуры = Выборка.СерияНоменклатуры;
	//	МЗ.Качество = Выборка.Качество;
	//	МЗ.Удалить();
	//	
	//	ШКСтарый = Выборка.Штрихкод;
	//КонецЦикла;
	
	//Добавляем Штрих-код по Номенклатуре с Единицей в базу
	МЗ = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
	МЗ.Штрихкод = ШтрихКод;
	МЗ.Владелец = Номенклатура;
	МЗ.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	МЗ.ЕдиницаИзмерения = Единица;
	МЗ.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	МЗ.Качество = Справочники.Качество.Новый;
	МЗ.Записать();
	
	ШКСтарый = Неопределено;
	ШКНовый = ШтрихКод;
	
	//ДобавитьЗаписьВРегНоменклатураПоТСД(Номенклатура, ИмяТСД, Пользователь, Документ, ТекущаяДата());
КонецПроцедуры

Функция ПолучитьКороткийНомерЗаказа(НомерДокумента, ДобиватьНулями = Ложь) Экспорт
	КороткийНомерВСтроке = "";
	Для н = 1 По СтрДлина(НомерДокумента) Цикл
		СимволНомера = Сред(НомерДокумента, н, 1);
		Если СимволНомера >= "0" и СимволНомера <= "9" Тогда
			КороткийНомерВСтроке = КороткийНомерВСтроке + СимволНомера;
		КонецЕсли;
	КонецЦикла;
	
	Если не ДобиватьНулями Тогда
		Для НомСимвола = 1 По СтрДлина(КороткийНомерВСтроке) Цикл
			ТекСимвол = Сред(КороткийНомерВСтроке, НомСимвола, 1);
			Если ТекСимвол <> "0" Тогда
				Возврат Сред(КороткийНомерВСтроке, НомСимвола);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КороткийНомерВСтроке;
КонецФункции

Функция ПолучитьИмяСтатусаПоТипуДокумента(Статус, ТипДокумента) Экспорт
	Если не ЗначениеЗаполнено(Статус) Тогда
		Возврат "Нет статуса";
	Иначе   
		Возврат Статус;
		//Если ТипДокумента = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		//	Возврат Статус.Наименование;
		//ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		//	Если Статус = Перечисления.БС_СтатусыДокументов.ГотовДляСборки Тогда
		//		Возврат "Готов к приёмке";
		//	ИначеЕсли Статус = Перечисления.БС_СтатусыДокументов.НаСборке Тогда
		//		Возврат "Готов приёмке";
		//	ИначеЕсли Статус = Перечисления.БС_СтатусыДокументов.Собран Тогда
		//		Возврат "Принят";
		//	ИначеЕсли Статус = Перечисления.БС_СтатусыДокументов.Упакован Тогда
		//		Возврат "Создано поступление";
		//	Иначе
		//		Возврат "Статус неопределён";
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;	
КонецФункции

Функция ПроверитьШтрихКод(ШтрихКод) Экспорт
	Ошибка = Ложь;
	Если СтрДлина(ШКТовара) < 9 или СтрДлина(ШКТовара) > 14 Тогда
		Ошибка = Истина;
	Иначе
		Для нСимвола = 1 По СтрДлина(ШКТовара) Цикл
			Если Сред(ШКТовара, нСимвола, 1) < "0" или Сред(ШКТовара, нСимвола, 1) > "9" Тогда
				Ошибка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ошибка;
КонецФункции

Процедура РазбитьСтроку(Текст, МаксимальнаяДлина = 50) Экспорт
	НомерСимвола = 0;
	ОставшаясяДлина = СтрДлина(Текст);
	Пока ОставшаясяДлина >= МаксимальнаяДлина Цикл
		КоличествоСимволовВСтроке = МаксимальнаяДлина;
		Пока КоличествоСимволовВСтроке > 0 Цикл
			ТекСимвол = Сред(Текст, НомерСимвола+КоличествоСимволовВСтроке, 1);
			Если ТекСимвол = " " Тогда
				Текст = Лев(Текст, НомерСимвола+КоличествоСимволовВСтроке-1)+Символы.ПС+Прав(Текст, СтрДлина(Текст)-НомерСимвола-КоличествоСимволовВСтроке);
				НомерСимвола = НомерСимвола+КоличествоСимволовВСтроке;
				Прервать;
			КонецЕсли;
			КоличествоСимволовВСтроке = КоличествоСимволовВСтроке - 1;
		КонецЦикла;
		Если КоличествоСимволовВСтроке = 0 Тогда
			Текст = Лев(Текст, НомерСимвола+МаксимальнаяДлина)+Символы.ПС+Прав(Текст, СтрДлина(Текст)-НомерСимвола-МаксимальнаяДлина);
			НомерСимвола = НомерСимвола + МаксимальнаяДлина;
		КонецЕсли;
		ОставшаясяДлина = ОставшаясяДлина - НомерСимвола;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьЗаказаПоставщику() Экспорт
	ДокументПроведён = Документ.Проведен;
	ДокументОбъект = Документ.ПолучитьОбъект();
	ТабличнаяЧасть = ДокументОбъект.Товары;
	
	ЗапросДанныхТСД = новый Запрос;
	ЗапросДанныхТСД.Текст =
	"ВЫБРАТЬ
	|	ПриёмкаТовара.Номенклатура КАК Номенклатура,
	|	ПриёмкаТовара.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПриёмкаТовара.Количество КАК Количество,
	|	ПриёмкаТовара.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ПриёмкаТовара.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.БС_ПриемкаТовара КАК ПриёмкаТовара
	|ГДЕ
	|	ПриёмкаТовара.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|АВТОУПОРЯДОЧИВАНИЕ";
	ЗапросДанныхТСД.УстановитьПараметр("Документ", Документ);
	ВыборкаДанныхТСД = ЗапросДанныхТСД.Выполнить().Выбрать();
	
	ТипЦенЗакупка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
	ДатаЦен = Документ.Дата;
	
	ТабличнаяЧасть.Очистить();
	Пока ВыборкаДанныхТСД.Следующий() Цикл
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаДанныхТСД.Номенклатура, ВыборкаДанныхТСД.ХарактеристикаНоменклатуры, ТипЦенЗакупка, ДатаЦен);
		Цена = ?(ЗначениеЗаполнено(Цена), Цена, ПолучитьПоследнююЦенуНоменклатуры(ВыборкаДанныхТСД.Номенклатура));
		Сумма = Цена * ВыборкаДанныхТСД.Количество;
		
		СтрокаТЧ = ТабличнаяЧасть.Добавить();
		СтрокаТЧ.ЕдиницаИзмерения = ВыборкаДанныхТСД.ЕдиницаИзмерения;
		СтрокаТЧ.Количество = ВыборкаДанныхТСД.Количество;
		СтрокаТЧ.КоличествоМест = 0;
		СтрокаТЧ.Коэффициент = 1;
		СтрокаТЧ.Номенклатура = ВыборкаДанныхТСД.Номенклатура;
		СтрокаТЧ.ПлановаяСебестоимость = Цена;
		СтрокаТЧ.СтавкаНДС = ВыборкаДанныхТСД.СтавкаНДС;
		СтрокаТЧ.Сумма = Сумма;
		СтрокаТЧ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(Сумма, Документ.УчитыватьНДС, Документ.СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(ВыборкаДанныхТСД.СтавкаНДС));
		СтрокаТЧ.ХарактеристикаНоменклатуры = ВыборкаДанныхТСД.ХарактеристикаНоменклатуры;
		СтрокаТЧ.Цена = Цена;
	КонецЦикла;
	
	ДокументОбъект.Записать(?(ДокументПроведён, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись), РежимПроведенияДокумента.Неоперативный);
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьВнутреннегоЗаказа()
	ДокументПроведён = Документ.Проведен;
	ДокументОбъект = Документ.ПолучитьОбъект();
	ТабличнаяЧасть = ДокументОбъект.Товары;
	
	ЗапросДанныхТСД = новый Запрос;
	ЗапросДанныхТСД.Текст =
	"ВЫБРАТЬ
	|	ПриёмкаТовара.Номенклатура КАК Номенклатура,
	|	ПриёмкаТовара.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПриёмкаТовара.Количество КАК Количество,
	|	ПриёмкаТовара.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ПриёмкаТовара.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.БС_ПриемкаТовара КАК ПриёмкаТовара
	|ГДЕ
	|	ПриёмкаТовара.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|АВТОУПОРЯДОЧИВАНИЕ";
	ЗапросДанныхТСД.УстановитьПараметр("Документ", Документ);
	ВыборкаДанныхТСД = ЗапросДанныхТСД.Выполнить().Выбрать();
	
	Размещение = ТабличнаяЧасть[0].Размещение;
	
	ТабличнаяЧасть.Очистить();
	Пока ВыборкаДанныхТСД.Следующий() Цикл
		СтрокаТЧ = ТабличнаяЧасть.Добавить();
		СтрокаТЧ.ЕдиницаИзмерения = ВыборкаДанныхТСД.ЕдиницаИзмерения;
		СтрокаТЧ.Количество = ВыборкаДанныхТСД.Количество;
		СтрокаТЧ.КоличествоМест = 0;
		СтрокаТЧ.Коэффициент = 1;
		СтрокаТЧ.Номенклатура = ВыборкаДанныхТСД.Номенклатура;
		СтрокаТЧ.Размещение = Размещение;
		СтрокаТЧ.ХарактеристикаНоменклатуры = ВыборкаДанныхТСД.ХарактеристикаНоменклатуры;
	КонецЦикла;
	
	Попытка
		ДокументОбъект.Записать(?(ДокументПроведён, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись), РежимПроведенияДокумента.Неоперативный);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("ТСД",УровеньЖурналаРегистрации.Ошибка, ДокументОбъект, ДокументОбъект.Ссылка, ТекстОшибки + " " + "Пользователь: " + Пользователь);
		мПредупреждение("Возникла ошибка. Создана запись в журнале. Обратитесь к программисту.");
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьПоследнююЦенуНоменклатуры(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.ТипЦен = &ТипЦенПродажи
	|	И ЦеныНоменклатуры.Номенклатура = &Номенклатура
	|	И ЦеныНоменклатуры.Период <= &НаДату
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНоменклатуры.Период УБЫВ";
	Запрос.УстановитьПараметр("НаДату", Документ.Дата);
	Запрос.УстановитьПараметр("ТипЦенПродажи", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000002"));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 1;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Цена;
КонецФункции

Функция ПреобразоватьСтрокуВДату(СтрокаКакДата) Экспорт
	Попытка
		ДатаСрока = Дата(Прав(СтрокаКакДата,4)+Сред(СтрокаКакДата,3,2)+Лев(СтрокаКакДата,2));
		Возврат ДатаСрока;
	Исключение
		Возврат Неопределено
	КонецПопытки;
КонецФункции	

Функция Преобразовать_ШК_в_короткий(ШК) Экспорт
	ПоложениеПробела = СтрНайти(ШК, " ");
	
	Если ПоложениеПробела = 0 Тогда
		Возврат ШК;
	КонецЕсли;
	
	Возврат Лев(ШК, ПоложениеПробела-1);
КонецФункции

Процедура НажатьТаб(Кол = 1)
	Если ИмяКомпьютера() = "NB-0001" Тогда Возврат КонецЕсли;
	
	Если Кол > 0 Тогда
		Попытка
			wsh = Новый COMОбъект("WSCript.Shell");
			Для ТекНажатие = 1 По Кол Цикл
				wsh.sendkeys("{TAB}");
			КонецЦикла;
		Исключение
		КонецПопытки;
	ИначеЕсли Кол < 0 Тогда
		Попытка
			wsh = Новый COMОбъект("WSCript.Shell");
			Для ТекНажатие = 1 По -Кол Цикл
				wsh.sendkeys("{+TAB}");
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРазмерШрифтаТаблицПоУмолчанию()
	Возврат ?(ТипЭкрана = 2, 22, ?(ТипЭкрана = 3, 48, 10));
КонецФункции

Процедура ЗагрузитьНастройкиПользователя()
	Значение = ПолучитьЗначениеИзРССохраненныеНастройки("РазмерШрифтаТаблиц"+ТипЭкрана);
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		РазмерШрифтаТаблиц = Значение;
	Иначе
		Значение = ПолучитьЗначениеИзРССохраненныеНастройки("РазмерШрифтаТаблиц"+ЭкранКлиента[0].Ширина);
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			РазмерШрифтаТаблиц = Значение;
		Иначе
			РазмерШрифтаТаблиц = ПолучитьРазмерШрифтаТаблицПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьИзмененияНастроекПользователя()
	СохранитьЗначениеВРССохраненныеНастройки("РазмерШрифтаТаблиц"+ТипЭкрана, РазмерШрифтаТаблиц);
КонецПроцедуры

Функция ПолучитьЗначениеИзРССохраненныеНастройки(НаименованиеНастройки)
	Настройки = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	Настройки.Пользователь = Пользователь;
	Настройки.ИмяОбъекта = "ТСД";
	Настройки.НаименованиеНастройки = НаименованиеНастройки;
	Настройки.Прочитать();
	Возврат Настройки.СохраненнаяНастройка.Получить();
КонецФункции

Процедура СохранитьЗначениеВРССохраненныеНастройки(НаименованиеНастройки, Настройка)
	Настройки = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
	Настройки.Пользователь = Пользователь;
	Настройки.ИмяОбъекта = "ТСД";
	Настройки.НаименованиеНастройки = НаименованиеНастройки;
	Настройки.СохраненнаяНастройка = Новый ХранилищеЗначения(Настройка);
	Настройки.Записать(Истина);
КонецПроцедуры

Функция НельзяСобиратьСКороткимСроком(спрСсылкаНоменклатура)
	Если СписокСкладовСборкиПоДлинномуШК.НайтиПоЗначению(СкладДокумента) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросКатегории = Новый Запрос;
	ЗапросКатегории.Текст =
	"ВЫБРАТЬ
	|	КатегорииОбъектов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
	|ГДЕ
	|	КатегорииОбъектов.Объект = &Объект
	|	И КатегорииОбъектов.Категория = &Категория";
	ЗапросКатегории.УстановитьПараметр("Объект", спрСсылкаНоменклатура);
	ЗапросКатегории.УстановитьПараметр("Категория", Справочники.КатегорииОбъектов.НайтиПоКоду("000000120"));
	Результат = ЗапросКатегории.Выполнить();
	
	Возврат не Результат.Пустой();
КонецФункции

Функция мВопрос(Заголовок, СписокКнопок, ВыделениеТекста = Ложь)
	ФормаВопроса_Название = ?(ТипЭкрана = 3, "ФормаВопроса_1280х768", "ФормаВопроса");
	ФормаВопроса = ПолучитьФорму(ФормаВопроса_Название);
	ФормаВопроса.СписокКнопок = СписокКнопок;
	ФормаВопроса.НадписьЗаголовок = Заголовок;
	ФормаВопроса.ВыделениеТекста = ВыделениеТекста;
	Возврат ФормаВопроса.ОткрытьМодально();
КонецФункции

Функция мПредупреждение(Заголовок, ВыделениеТекста = Ложь)
	ФормаПредупреждения_Название = ?(ТипЭкрана = 3, "ФормаПредупреждения_1280х768", "ФормаПредупреждения");
	ФормаПредупреждения = ПолучитьФорму(ФормаПредупреждения_Название);
	ФормаПредупреждения.НадписьЗаголовок = Заголовок;
	ФормаПредупреждения.ВыделениеТекста = ВыделениеТекста;
	Возврат ФормаПредупреждения.ОткрытьМодально();
КонецФункции

Функция ПолучитьТекстШтрихКодаЭтикеткиЗаказа(ДатаЗаказа, КороткийНомерЗаказа, НомерМеста, ЭтоХолод)
	Если ТипЗнч(КороткийНомерЗаказа) = Тип("Число") Тогда
		НомерЗаказа = Формат(КороткийНомерЗаказа, "ЧЦ=7; ЧВН=; ЧГ=");
	Иначе
		НомерЗаказа = КороткийНомерЗаказа;
	КонецЕсли;
	Возврат Формат(Год(ДатаЗаказа),"ЧГ=0")+НомерЗаказа+Формат(?(ЭтоХолод, 999, НомерМеста), "ЧЦ=3; ЧВН=")+?(Зона=Неопределено,"","/"+Зона);
КонецФункции


// Заполняет переданную таблицу местами хранения с сортировкой, заданной в ТаблицаСоответствияМестХранения
// Если по переданному сроку нет записи с местом хранения, то возвращается место с пустым сроком
//
// Параметры:
//  СписокНоменклатуры	 - ТаблицаЗначений	 - Должны быть колонки Номенклатура - СправочникСсылка.Номенклатура и ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры
// 
// Возвращаемое значение:
//  СписокНоменклатуры - ТаблицаЗначений - Добавляется графа МестоХранение - запись регистра сведений МестаХраненияНоменклатуры, НаименованиеМестаХранения - Строка с полным наименование места хранения
//
Процедура ПолучитьСписокМестХранения(СписокНоменклатуры, Склад = Неопределено)
	
	Если Склад = Неопределено Тогда
		Склад = СкладГурьянова;
	КонецЕсли;
	
	Если ТипЗнч(СписокНоменклатуры) <> Тип("ТаблицаЗначений") Тогда Возврат КонецЕсли;
	
	Если СписокНоменклатуры.Колонки.Найти("МестоХранения") = Неопределено Тогда
		СписокНоменклатуры.Колонки.Добавить("МестоХранения");
	КонецЕсли;
	
	Если СписокНоменклатуры.Колонки.Найти("НаименованиеМестаХранения") = Неопределено Тогда
		СписокНоменклатуры.Колонки.Добавить("НаименованиеМестаХранения");
	КонецЕсли;
	
	Если СписокНоменклатуры.Колонки.Найти("Склад") = Неопределено Тогда
		СписокНоменклатуры.Колонки.Добавить("Склад");
	КонецЕсли;
	
	Если СписокНоменклатуры.Колонки.Найти("Сортировка") = Неопределено Тогда
		СписокНоменклатуры.Колонки.Добавить("Сортировка");
	КонецЕсли;
	
	Для Каждого Строка Из СписокНоменклатуры Цикл
		МестоХранения = ПолучитьМестоХранения(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, Склад);
		Если МестоХранения = Неопределено Тогда
			МестоХранения = ПолучитьМестоХранения(Строка.Номенклатура,, Склад);
		КонецЕсли;
		
		Если МестоХранения <> Неопределено Тогда
			Строка.МестоХранения = МестоХранения;    
			Отбор = Новый Структура;
			Отбор.Вставить("МестоХранения", МестоХранения);
			НайденныеСтрока = ТаблицаСоответствияМестХранения.НайтиСтроки(Отбор);
			СтрокаОпределена = Ложь;
			Для Каждого НайденнаяСтрока Из НайденныеСтрока Цикл
				Если НайденнаяСтрока.Склад = Склад Тогда
					СтрокаОпределена = Истина;
					Сортировка = НайденнаяСтрока.Сортировка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаОпределена Тогда
				Строка.Сортировка = Сортировка;
			Иначе
				Строка.Сортировка = 999;
			КонецЕсли;
			Строка.НаименованиеМестаХранения = ПолучитьПолныйПутьМестаХранения(МестоХранения);
		КонецЕсли;
	КонецЦикла;
	
	СписокНоменклатуры.Сортировать("Сортировка");
	
	СписокНоменклатуры.Колонки.Удалить("Сортировка");
	
КонецПроцедуры

Функция ПолучитьМестоХранения(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Склад = Неопределено)
	
	Склад = ?(Склад = Неопределено, СкладГурьянова, Склад);
	
	Если ХарактеристикаНоменклатуры = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
		|ИЗ
		|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|ГДЕ
		|	МестаХраненияНоменклатуры.Номенклатура = &Номенклатура
		|	И МестаХраненияНоменклатуры.ХарактеристикиНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	И МестаХраненияНоменклатуры.Склад = &Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестаХраненияНоменклатуры.Приоритет";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Склад", Склад);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.МестоХранения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
		|ИЗ
		|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|ГДЕ
		|	МестаХраненияНоменклатуры.Номенклатура = &Номенклатура
		|	И МестаХраненияНоменклатуры.ХарактеристикиНоменклатуры = &ХарактеристикаНоменклатуры
		|	И МестаХраненияНоменклатуры.Склад = &Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестаХраненияНоменклатуры.Приоритет";
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		Запрос.УстановитьПараметр("Склад", Склад);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.МестоХранения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура ИзменитьМестоХраненияНоменклатуры(Номенклатура, МестоХранения, Срок = Неопределено, Склад = Неопределено)
	
	Склад = ?(Склад = Неопределено, СкладГурьянова, Склад);
	
	// *** Получение приоритета. Если нет по переданным параметрам, то получение самого последнего по номенклатуре на основном складе
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияНоменклатуры.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	|ГДЕ
	|	МестаХраненияНоменклатуры.Номенклатура = &Номенклатура
	|	И МестаХраненияНоменклатуры.Склад = &Склад
	|	И МестаХраненияНоменклатуры.ХарактеристикиНоменклатуры = &ХарактеристикиНоменклатуры";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	ХарактеристикиНоменклатуры = ?(Срок = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Срок);
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ХарактеристикиНоменклатуры);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(МестаХраненияНоменклатуры.Приоритет) КАК Приоритет
		|ИЗ
		|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|ГДЕ
		|	МестаХраненияНоменклатуры.Номенклатура = &Номенклатура
		|	И МестаХраненияНоменклатуры.Склад = &Склад";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Приоритет = 0;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Приоритет = Выборка.Приоритет + 1;
		КонецЕсли;
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Приоритет = Выборка.Приоритет;
	КонецЕсли;
	
	// *** Запись регистра с новыми значениями
	
	МЗ = РегистрыСведений.МестаХраненияНоменклатуры.СоздатьМенеджерЗаписи();
	МЗ.Номенклатура = Номенклатура;
	МЗ.Склад = Склад;
	МЗ.Приоритет = Приоритет;
	МЗ.МестоХранения = МестоХранения;
	МЗ.ХарактеристикиНоменклатуры = ХарактеристикиНоменклатуры;
	МЗ.Записать(Истина);
КонецПроцедуры

// Возвращает строку со списком сборщиков, учавствовавших в сборке заказа
//
// Параметры:
//  ЗаказСсылка  - ДокументСсылка.ЗаказПокупателя - Заказ, по которому нужно получить список сборщиков
//
// Возвращаемое значение:
//   Строка   - Список сборщиов через запятую
//
Функция ПолучитьСборщиковЗаказа(ЗаказСсылка)
	ЗапросСборщиков = Новый Запрос;
	ЗапросСборщиков.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураПоТСД.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.БС_НоменклатураПоТСД КАК НоменклатураПоТСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	|		ПО НоменклатураПоТСД.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
	|ГДЕ
	|	НоменклатураПоТСД.Документ = &Документ
	|	И НоменклатураПоТСД.Операция = ""Сборка""
	|	И МестаХраненияНоменклатуры.МестоХранения В(&СписокМест)";
	ЗапросСборщиков.УстановитьПараметр("Документ", ЗаказСсылка);
	ЗапросСборщиков.УстановитьПараметр("СписокМест", СписокМестДляЗапроса);
	ВыборкаСборщиков = ЗапросСборщиков.Выполнить().Выбрать();  
	СтрокаСборщиков = "";
	Пока ВыборкаСборщиков.Следующий() Цикл
		СтрокаСборщиков = СтрокаСборщиков + ?(ЗначениеЗаполнено(СтрокаСборщиков), ", ", "") + ВыборкаСборщиков.Пользователь;
	КонецЦикла;
	Возврат СтрокаСборщиков;
КонецФункции

Процедура ДобавитьЗаписьВРегНоменклатураПоТСД(Номенклатура, ИмяТСД, Пользователь, Документ, ПериодЗаписи, ХарактеристикаНоменклатуры, ВидОперации, Комментарий = Неопределено, Количество = 0)
	ХарактеристикаНоменклатуры = ?(ХарактеристикаНоменклатуры = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ХарактеристикаНоменклатуры);
	МЗ = РегистрыСведений.БС_НоменклатураПоТСД.СоздатьМенеджерЗаписи();
	МЗ.Документ = Документ;
	МЗ.Пользователь = Пользователь;
	МЗ.Номенклатура = Номенклатура;
	МЗ.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
	МЗ.Период = ПериодЗаписи;
	МЗ.Операция = ВидОперации;
	МЗ.Количество = Количество;
	Если Комментарий = Неопределено Тогда
		МЗ.Комментарий = ?(ЗначениеЗаполнено(ИмяТСД), "Запись внесена с компьютера "+ИмяТСД, "");
	Иначе
		МЗ.Комментарий = Комментарий;
	КонецЕсли;
	МЗ.Записать(ИСТИНА);
КонецПроцедуры

Функция ПодобратьХарактеристику(НоменклатураСсылка, СрокГодности)
	Если ТипЗнч(СрокГодности) = Тип("Строка") Тогда
		Попытка
			СрокГодности = Дата(СрокГодности + " 0:00:00");
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(СрокГодности) = Тип("Дата") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияСвойствОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Значение = &Значение
		|	И ЗначенияСвойствОбъектов.Объект.Владелец = &Владелец
		|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000000001")); //Срок годности
		Запрос.УстановитьПараметр("Владелец", НоменклатураСсылка);
		Запрос.УстановитьПараметр("Значение", СрокГодности);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда Возврат Неопределено КонецЕсли;
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Объект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#Область Запросы_к_сайту_Озон
// Создаёт HTML запрос к сайту Озон
//
// Параметры:
//  ШтрихКод - Строка	 - Штрихкод с этикети Озон. Возможно использование как верхнего, так и нижнего штрихкодов.
// 
// Возвращаемое значение:
//  Документ - ДокументСсылка.ЗаказПокупателя, Неопределено
//
Функция ЗапроситьЗаказОзонПоШтрихкоду(ШтрихКод)
	Документ = Неопределено;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type","application/json");
	Заголовки.Вставить("Client-Id", "198537");
	Заголовки.Вставить("Api-Key", "c0a20027-44bd-43e6-b9f7-5a8bc0360a18");
	
	HTTPConnect = Новый HTTPСоединение("api-seller.ozon.ru",,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	
	ТекстЗапроса = "/v2/posting/fbs/get-by-barcode";	
	HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);                                                          
	ТелоКакСтрока = "{""barcode"": """+ШтрихКод+"""}";
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоКакСтрока);
	
	Попытка
		HTTPОтвет = HTTPConnect.ОтправитьДляОбработки(HTTPЗапрос);	
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерОтправления = ПолучитьНомерОтправленияОзонИзОтвета(HTTPОтвет);
	Если НомерОтправления = Неопределено Тогда Возврат Документ КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БС_ОбменЗаказамиССайтом.Ссылка
	|ИЗ
	|	РегистрСведений.БС_ОбменЗаказамиССайтом КАК БС_ОбменЗаказамиССайтом
	|ГДЕ
	|	БС_ОбменЗаказамиССайтом.НомерОтправленияОзон = &НомерОтправленияОзон";
	Запрос.УстановитьПараметр("НомерОтправленияОзон", НомерОтправления);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда Возврат Документ КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Документ = Выборка.Ссылка;
	
	Возврат Документ;
КонецФункции    

Функция ПолучитьНомерОтправленияОзонИзОтвета(HTTPОтвет)
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства И Чтение.ТекущееЗначение = "posting_number" Тогда
			Чтение.Прочитать();
			Возврат Чтение.ТекущееЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

Функция СформироватьШтрихКод(Ширина = 450, Высота = 50, Штрихкод)
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	
	ПараметрыШтрихкода.Ширина = 450;
	ПараметрыШтрихкода.Высота = 50;
	ПараметрыШтрихкода.ТипКода = 4;
	//ПараметрыШтрихкода.УголПоворота = 0;
	ПараметрыШтрихкода.Штрихкод = Штрихкод;
	//ПараметрыШтрихкода.ПрозрачныйФон = Истина;
	//ПараметрыШтрихкода.УровеньКоррекцииQR = 1;
	//ПараметрыШтрихкода.ОтображатьТекст = Истина;
	//ПараметрыШтрихкода.Масштабировать = Ложь;
	//ПараметрыШтрихкода.СохранятьПропорции = Ложь;
	//ПараметрыШтрихкода.ВертикальноеВыравнивание = Истина; 
	//ПараметрыШтрихкода.GS1DatabarКоличествоСтрок = 1;
	//ПараметрыШтрихкода.ТипВходныхДанных = 0;  // Тип входных данных (0-Строка, 1-Base64).
	//ПараметрыШтрихкода.УбратьЛишнийФон = Ложь;
	//ПараметрыШтрихкода.ЛоготипКартинка = Неопределено;
	//ПараметрыШтрихкода.ЛоготипРазмерПроцентОтШК = 0;
	
	РезультатШтрихкод = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
	
	Возврат РезультатШтрихкод.Картинка;
КонецФункции

#Область Запросы_к_СДЭК 
Функция ПолучитьТокенСДЭК()
	СтруктураТокенаВБазе = БС_ИзмененияКонфигурацииСервер.ВосстановитьЗначениеИзОбщихНастроек("ЗапросыСДЭК", "СтруктураТокена",, Ложь);
	Если ТипЗнч(СтруктураТокенаВБазе) = Тип("Структура") Тогда 
		ВремяТокена = Дата(1,1,1);
		Если СтруктураТокенаВБазе.Свойство("ВремяТокена", ВремяТокена) Тогда 
			Если ТекущаяДата() - ВремяТокена < 3600 Тогда
				Возврат СтруктураТокенаВБазе["Токен"];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТелоЗапроса = "grant_type=client_credentials&client_id=2cxCCYH9mSiL01CQtb60uRKEZkHuiii8&client_secret=QGyxeBdEIefW8m20qIptb1I9mGcHnlZq";
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded");
	
	ТекстЗапроса = "/v2/oauth/token?parameters";
	ЗапросТокена = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);	
	ЗапросТокена.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	HTTPConnect = Новый HTTPСоединение("api.cdek.ru", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	HTTPОтвет = HTTPConnect.ОтправитьДляОбработки(ЗапросТокена);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
		СтруткураОтвета = ПрочитатьJSON(Чтение, Истина);
		Чтение.Закрыть();
		
		Токен = "Bearer "+СтруткураОтвета["access_token"];
		СтруктураТокенаВБазе = Новый Структура;
		СтруктураТокенаВБазе.Вставить("ВремяТокена", ТекущаяДата());
		СтруктураТокенаВБазе.Вставить("Токен", Токен);
		БС_ИзмененияКонфигурацииСервер.СохранитьЗначениеВОбщихНастройках("ЗапросыСДЭК", "СтруктураТокена",, СтруктураТокенаВБазе);
		Возврат Токен;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьЗаказВБазеПоНомеруСДЭК(НомерНакладной)
	Токен = ПолучитьТокенСДЭК();
	Если Токен = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type","application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", Токен);
	
	ТекстЗапроса = "/v2/orders?cdek_number="+НомерНакладной;
	ЗапросНакладной = Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
	HTTPConnect = Новый HTTPСоединение("api.cdek.ru", 443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	HTTPОтвет = HTTPConnect.Получить(ЗапросНакладной);
	Если HTTPОтвет.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(HTTPОтвет.ПолучитьТелоКакСтроку());
		СтруткураОтвета = ПрочитатьJSON(Чтение, Истина);
		Чтение.Закрыть();
		
		Вложение = СтруткураОтвета["entity"];
		number = Вложение["number"];
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БС_ОбменЗаказамиССайтом.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.БС_ОбменЗаказамиССайтом КАК БС_ОбменЗаказамиССайтом
		|ГДЕ
		|	БС_ОбменЗаказамиССайтом.Ref_Key = &НомерОтправленияОзон";
		Запрос.УстановитьПараметр("НомерОтправленияОзон", number);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда // Это не этикетка СДЭК от ОЗОН, проверить надо на нашу
			Запрос.Текст =
			"ВЫБРАТЬ
			|	БС_ОбменЗаказамиССайтом.Ссылка
			|ИЗ
			|	РегистрСведений.БС_ОбменЗаказамиССайтом КАК БС_ОбменЗаказамиССайтом
			|ГДЕ
			|	БС_ОбменЗаказамиССайтом.Ref_Key = &Ref_Key";
			Запрос.УстановитьПараметр("Ref_Key", number);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Возврат Неопределено;
			КонецЕсли;				
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено
КонецФункции
#КонецОбласти

Функция ПолучитьДатуИзХарактеристики(ХарактеристикаНоменклатуры)
	МЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	МЗ.Объект = ХарактеристикаНоменклатуры;
	МЗ.Свойство = СвойствоСрокГодности;
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		Возврат МЗ.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ИзменитьРазмерШрифта(НомерСтроки)
	Если НомерСтроки <= 2 Тогда
		РазмерШрифтаТаблиц = ?(РазмерШрифтаТаблиц < 10, 10, РазмерШрифтаТаблиц - 1);
	Иначе
		РазмерШрифтаТаблиц = ?(РазмерШрифтаТаблиц > 30, 30, РазмерШрифтаТаблиц + 1);
	КонецЕсли;
	
	СохранитьИзмененияНастроекПользователя();
КонецПроцедуры

Процедура УдалитьДвиженияДокументаВРСНоменклатураПоТСД(Документ, Операция)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БС_НоменклатураПоТСД.Период КАК Период,
	|	БС_НоменклатураПоТСД.Документ КАК Документ,
	|	БС_НоменклатураПоТСД.Номенклатура КАК Номенклатура,
	|	БС_НоменклатураПоТСД.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	БС_НоменклатураПоТСД.Пользователь КАК Пользователь,
	|	БС_НоменклатураПоТСД.Операция КАК Операция,
	|	БС_НоменклатураПоТСД.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.БС_НоменклатураПоТСД КАК БС_НоменклатураПоТСД
	|ГДЕ
	|	БС_НоменклатураПоТСД.Документ = &Документ
	|	И БС_НоменклатураПоТСД.Операция = &Операция";
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Операция", Операция);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		МЗ = РегистрыСведений.БС_НоменклатураПоТСД.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, Выборка);
		МЗ.Прочитать();
		Если МЗ.Выбран() Тогда
			МЗ.Удалить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьВладельцаШтрихкода(ШтрихКод)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец КАК Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод";
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Владелец;
	КонецЕсли;
КонецФункции

// Возвращает места документа по переданной зоне. При сборке необходимо получить места только для своей зоны. Исключение - интернет площадки.
// Внимание! Не проверяются места по срокам
//
// Параметры:
//  Зона - Строка,Неопределено - Зона, для которой нужно получить места позиций из текущего документа. Если надо вернуть все места документа, например, если этот документ интернет площадки, то Зона = Неопределено. 
// 
// Возвращаемое значение:
//  Массив из см. СправочникСсылка.МестаХранения 
//
Функция ПолучитьМестаДокументаПоЗоне(Зона = Неопределено)
	//Если Зона = Неопределено Тогда
	Запрос = Новый Запрос;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
		|ИЗ
		|	СписокНоменклатуры КАК СписокНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|		ПО СписокНоменклатуры.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
		|ГДЕ
		|	МестаХраненияНоменклатуры.Склад = &Склад";
	Иначе  
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВнутреннийЗаказТовары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ
		|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
		|ГДЕ
		|	ВнутреннийЗаказТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
		|ИЗ
		|	СписокНоменклатуры КАК СписокНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|		ПО СписокНоменклатуры.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
		|ГДЕ
		|	МестаХраненияНоменклатуры.Склад = &Склад";
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("Склад", СкладДокумента);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МестоХранения");
	//Иначе
	//	Если Зона = "3" Тогда
	//		Запрос = Новый Запрос;
	//		Запрос.Текст =
	//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура
	//		|ПОМЕСТИТЬ СписокНоменклатуры
	//		|ИЗ
	//		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	//		|ГДЕ
	//		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
	//		|ИЗ
	//		|	СписокНоменклатуры КАК СписокНоменклатуры
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	//		|		ПО СписокНоменклатуры.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
	//		|ГДЕ
	//		|	НЕ(МестаХраненияНоменклатуры.МестоХранения В ИЕРАРХИИ (&КаталогМестДорогогоТовара)
	//		|				ИЛИ МестаХраненияНоменклатуры.МестоХранения В ИЕРАРХИИ (&КаталогМестВторогоЭтажа))";
	//		Запрос.УстановитьПараметр("Ссылка", Документ);
	//		Запрос.УстановитьПараметр("КаталогМестДорогогоТовара", КаталогМестЗоныДорогогоТовара);
	//		Запрос.УстановитьПараметр("КаталогМестВторогоЭтажа", КаталогМестЗоныВторогоЭтажа);
	//		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МестоХранения");
	//	Иначе
	//		Запрос = Новый Запрос;
	//		Запрос.Текст =
	//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура
	//		|ПОМЕСТИТЬ СписокНоменклатуры
	//		|ИЗ
	//		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	//		|ГДЕ
	//		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
	//		|ИЗ
	//		|	СписокНоменклатуры КАК СписокНоменклатуры
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	//		|		ПО СписокНоменклатуры.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
	//		|ГДЕ
	//		|	МестаХраненияНоменклатуры.МестоХранения В ИЕРАРХИИ (&КаталогМест)";
	//		Запрос.УстановитьПараметр("Ссылка", Документ);
	//		Запрос.УстановитьПараметр("КаталогМест", ?(Зона = "D", КаталогМестЗоныДорогогоТовара, КаталогМестЗоныВторогоЭтажа));
	//		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("МестоХранения");
	//	КонецЕсли;
	//КонецЕсли;
КонецФункции 

// Проверяет есть ли среди мест номенклатуры текущего документа переданная зона
// Внимание! Не проверяются места по срокам
//
// Параметры:
//  Зона - Строка - Проверяемая зона. Возможные значения "D" или "3".
// 
// Возвращаемое значение:
//  Булево - Истина, если есть переданная зона, Ложь - в обратном случае
//
Функция ЕстьЗонаМестВДокументе(Зона)
	Если Зона = "D" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
		|ИЗ
		|	СписокНоменклатуры КАК СписокНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|		ПО СписокНоменклатуры.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
		|ГДЕ
		|	МестаХраненияНоменклатуры.МестоХранения В ИЕРАРХИИ(&КаталогМестДорогогоТовара)";
		Запрос.УстановитьПараметр("Ссылка", Документ);
		Запрос.УстановитьПараметр("КаталогМестДорогогоТовара", КаталогМестЗоныДорогогоТовара);
		Возврат Не Запрос.Выполнить().Пустой();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
		|ИЗ
		|	СписокНоменклатуры КАК СписокНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|		ПО СписокНоменклатуры.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
		|ГДЕ
		|	НЕ(МестаХраненияНоменклатуры.МестоХранения В ИЕРАРХИИ (&КаталогМестДорогогоТовара)
		|				ИЛИ МестаХраненияНоменклатуры.МестоХранения В ИЕРАРХИИ (&КаталогМестВторогоЭтажа))";
		Запрос.УстановитьПараметр("Ссылка", Документ);
		Запрос.УстановитьПараметр("КаталогМестДорогогоТовара", КаталогМестЗоныДорогогоТовара);
		Запрос.УстановитьПараметр("КаталогМестВторогоЭтажа", КаталогМестЗоныВторогоЭтажа);
		Возврат не Запрос.Выполнить().Пустой();
	КонецЕсли;
КонецФункции

Функция ПолучитьХарактеристикуНоменклатурыПоДате(Номенклатура, ДатаСрока)
	ВыборкаСроков = Справочники.ХарактеристикиНоменклатуры.Выбрать(,Номенклатура);
	Пока ВыборкаСроков.Следующий() Цикл 
		Если ДатаСрока = ПолучитьДатуСрока(ВыборкаСроков.Ссылка) Тогда
			Возврат ВыборкаСроков.Ссылка;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции 

Функция ПолучитьДатуСрока(Ссылка)
	МЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	МЗ.Объект = Ссылка;
	МЗ.Свойство = СвойствоСрокГодности;
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		Возврат МЗ.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ОпределитьСкладДокумента(Документ) 
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Товары = Документ.Товары;
		СкладДокумента = Товары[0].Размещение;
	Иначе
		// Склад документа определяется по работнику, на каком складе он находится и, соответственно, какой склад у него выбран в настройках
		СкладДокумента = ПолучитьСкладПользователя();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРеквизитРегистраОЗСПоНомеруЗаказаМаркет(ИмяРеквизита, НомерЗаказаМаркет)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БС_ОбменЗаказамиССайтом.Ref_Key КАК Ref_Key,
	|	БС_ОбменЗаказамиССайтом.НомерНаСайте КАК НомерНаСайте,
	|	БС_ОбменЗаказамиССайтом.СозданНаСайте КАК СозданНаСайте,
	|	БС_ОбменЗаказамиССайтом.EMail КАК EMail,
	|	БС_ОбменЗаказамиССайтом.КонтактноеЛицо КАК КонтактноеЛицо,
	|	БС_ОбменЗаказамиССайтом.Товары КАК Товары,
	|	БС_ОбменЗаказамиССайтом.СуммаЗаказа КАК СуммаЗаказа,
	|	БС_ОбменЗаказамиССайтом.СтоимостьДоставки КАК СтоимостьДоставки,
	|	БС_ОбменЗаказамиССайтом.НазваниеДоставки КАК НазваниеДоставки,
	|	БС_ОбменЗаказамиССайтом.ПубличнаяСсылка КАК ПубличнаяСсылка,
	|	БС_ОбменЗаказамиССайтом.СтатусНаСайте КАК СтатусНаСайте,
	|	БС_ОбменЗаказамиССайтом.Местоположение КАК Местоположение,
	|	БС_ОбменЗаказамиССайтом.Адрес КАК Адрес,
	|	БС_ОбменЗаказамиССайтом.Телефон КАК Телефон,
	|	БС_ОбменЗаказамиССайтом.Комментарий КАК Комментарий,
	|	БС_ОбменЗаказамиССайтом.НомерЗаказаМаркет КАК НомерЗаказаМаркет,
	|	БС_ОбменЗаказамиССайтом.ДатаОтгрузкиМаркет КАК ДатаОтгрузкиМаркет,
	|	БС_ОбменЗаказамиССайтом.Ссылка КАК Ссылка,
	|	БС_ОбменЗаказамиССайтом.НомерОтправленияОзон КАК НомерОтправленияОзон,
	|	БС_ОбменЗаказамиССайтом.НомерЗаказаОзон КАК НомерЗаказаОзон,
	|	БС_ОбменЗаказамиССайтом.СкладОтправленияОзон КАК СкладОтправленияОзон,
	|	БС_ОбменЗаказамиССайтом.СДЭК_uuid КАК СДЭК_uuid,
	|	БС_ОбменЗаказамиССайтом.СДЭК_Номер КАК СДЭК_Номер,
	|	БС_ОбменЗаказамиССайтом.СозданВСДЭК КАК СозданВСДЭК,
	|	БС_ОбменЗаказамиССайтом.ТрекНомерПереданВОЗОН КАК ТрекНомерПереданВОЗОН
	|ИЗ
	|	РегистрСведений.БС_ОбменЗаказамиССайтом КАК БС_ОбменЗаказамиССайтом
	|ГДЕ
	|	БС_ОбменЗаказамиССайтом.НомерЗаказаМаркет = &НомерЗаказаМаркет";
	Запрос.УстановитьПараметр("НомерЗаказаМаркет", НомерЗаказаМаркет);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтруктураВозврата = Новый Структура(ИмяРеквизита);
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		Возврат СтруктураВозврата[ИмяРеквизита];
	КонецЕсли;
КонецФункции

Функция ПолучитьСкладПользователя()
	СкладПользователя = ВосстановитьЗначение("Склад пользователя");
	Если не ЗначениеЗаполнено(СкладПользователя) Тогда
		СкладПользователя = СкладГурьянова;
		СохранитьЗначение("Склад пользователя", СкладПользователя);
	КонецЕсли;
	Возврат СкладПользователя;
КонецФункции

Функция ВыборСкладаПользователем() 
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(1, "Москва (Гурьянова)");
	СписокКнопок.Добавить(2, "Москва (Новорязанка)");
	СписокКнопок.Добавить(3, "Москва (Чертаново)");
	СписокКнопок.Добавить(4, "Калининград"); 
	
	Ответ = мВопрос("Выберите свой склад по умолчанию", СписокКнопок);
	Если Ответ = Неопределено Тогда
		Возврат Неопределено;
	Иначе 
		Если Ответ = 1 Тогда
			СкладПользователя = СкладГурьянова;
		ИначеЕсли Ответ = 2 Тогда
			СкладПользователя = СкладНоворязанка;
		ИначеЕсли Ответ = 3 Тогда
			СкладПользователя = СкладЧертаново;
		Иначе
			СкладПользователя = Справочники.Склады.НайтиПоКоду("000000028");
		КонецЕсли;
		СохранитьЗначение("Склад пользователя", СкладПользователя);
		Возврат СкладПользователя;
	КонецЕсли;
КонецФункции  

Функция СкладИмеетМестаХранения(Склад)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестаХранения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МестаХранения КАК МестаХранения
	|ГДЕ
	|	МестаХранения.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Склад);
	Результат = Запрос.Выполнить();
	Возврат не Результат.Пустой();
КонецФункции

// Возвращает Истина, если заказ e-commerce. Определяет по наличию заказа в РС обработка заказов с сайта 
// 
// Возвращаемое значение:
//  Булево - Истина, если заказ e-commerce
//
Функция ПолучитьПризнакЗаказаИнтернет()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БС_ОбменЗаказамиССайтом.Ref_Key КАК Ref_Key
	|ИЗ
	|	РегистрСведений.БС_ОбменЗаказамиССайтом КАК БС_ОбменЗаказамиССайтом
	|ГДЕ
	|	БС_ОбменЗаказамиССайтом.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Результат = Запрос.Выполнить();
	Возврат не Результат.Пустой();
КонецФункции

Функция ПолучитьСписокСкладовДокумента() 
	СписокСкладов = Новый СписокЗначений;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПокупателяТовары.Размещение КАК Размещение
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Документ);
		СписокСкладов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Размещение"));
	КонецЕсли;
	Возврат СписокСкладов;
КонецФункции
#КонецОбласти

#Область Форма_вопроса
Процедура ФормаВопроса_ПриОткрытии(Форма) Экспорт
	ЭлементыФормы = Форма.ЭлементыФормы;
	СписокКнопок = Форма.СписокКнопок;
	ЭлементыФормы.НадписьЗаголовок.ЦветТекста = ?(Форма.ВыделениеТекста, WebЦвета.Красный, ЦветаСтиля.ЦветТекстаФормы); 
	
	ВысотаКнопок = ?(ТипЭкрана = 2, 40, ?(ТипЭкрана = 3, 60, 20));
	ШиринаКнопок = ?(ТипЭкрана = 2, 440, ?(ТипЭкрана = 3, 660, 280));
	ШрифтКнопки = Новый Шрифт(Форма.Панель.Шрифт,,,,,,,?(ТипЭкрана = 2, 200, ?(ТипЭкрана = 3, 300, 100)));
	ЛевоКнопки = (Форма.Ширина - ШиринаКнопок) / 2;
	ЦентрЭкрана = Форма.Высота / 2;
	КоличествоКнопок = СписокКнопок.Количество();
	ВерхПервойКнопки = ЦентрЭкрана - (КоличествоКнопок * ВысотаКнопок + (КоличествоКнопок - 1) * ВысотаКнопок) / 2;
	
	ЭлементыФормы.НадписьЗаголовок.Заголовок = Форма.НадписьЗаголовок;
	Действие = Новый Действие("КнопкаВыполнитьНажатие");
	Счётчик = 0; 
	РасстояниеМеждуКнопками = ?(КоличествоКнопок > 8, 1.5, 2);
	Для Каждого ЭлементСписка Из СписокКнопок Цикл
		Кнопка = ЭлементыФормы.Добавить(Тип("Кнопка"), "Кнопка"+ЭлементСписка.Значение);
		Кнопка.Заголовок = ЭлементСписка.Представление;
		Кнопка.УстановитьДействие("Нажатие", Действие);
		
		Кнопка.Высота = ВысотаКнопок;
		Кнопка.Ширина = ШиринаКнопок;
		Кнопка.Лево = ЛевоКнопки;
		Кнопка.Верх = ВерхПервойКнопки + Счётчик * ВысотаКнопок * РасстояниеМеждуКнопками;
		Кнопка.Шрифт = ШрифтКнопки;
		
		Счётчик = Счётчик + 1;
	КонецЦикла;		
КонецПроцедуры

Процедура ФормаВопроса_КнопкаВыполнитьНажатие(Форма, Кнопка) Экспорт
	Для Каждого ЭлементСписка Из Форма.СписокКнопок Цикл
		Если ЭлементСписка.Представление = Кнопка.Заголовок Тогда
			Форма.Закрыть(ЭлементСписка.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.Открыта() Тогда
		Форма.Закрыть(Неопределено);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область Форма_предупреждения
Процедура ФормаПредупреждения_ПриОткрытии(Форма) Экспорт
	ЭлементыФормы = Форма.ЭлементыФормы;
	ЭлементыФормы.НадписьЗаголовок.ЦветТекста = ?(Форма.ВыделениеТекста, WebЦвета.Красный, ЦветаСтиля.ЦветТекстаФормы);	
	ЭлементыФормы.НадписьЗаголовок.Заголовок = Форма.НадписьЗаголовок;
КонецПроцедуры

Процедура ФормаПредупреждения_КнопкаВыполнитьНажатие(Форма, Кнопка) Экспорт
	Форма.Закрыть(0);
КонецПроцедуры
#КонецОбласти

#Область Инвентаризация

//*** Инвентаризация ***//

//Ищет документ "Инвентаризация" в диапазоне дат ... от текущей, 
//с соответствующим комментарием и Основным складом
//и устанавливает вид инвентаризации "Полная" или "Частичная"
Функция ПолучитьПризнакИнвентаризации() Экспорт 
	НачДата = НачалоДня(ТекущаяДата()-2*86400);
	КонДата = КонецДня(ТекущаяДата());
	ЗапросДокумента = Новый Запрос;
	ЗапросДокумента.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка КАК Ссылка,
	|	ИнвентаризацияТоваровНаСкладе.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(1) КАК Количество,
	|			ИнвентаризацияТоваровНаСкладеТовары.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ИнвентаризацияТоваровНаСкладеТовары.Ссылка) КАК ЗапросКоличестваТовара
	|		ПО ИнвентаризацияТоваровНаСкладе.Ссылка = ЗапросКоличестваТовара.Ссылка
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Дата МЕЖДУ &НачДата И &КонДата
	|	И ИнвентаризацияТоваровНаСкладе.Склад В(&Склады)
	|	И ИнвентаризацияТоваровНаСкладе.Комментарий ПОДОБНО ""%+%""
	|	И ЗапросКоличестваТовара.Количество > 0
	|	И ИнвентаризацияТоваровНаСкладе.Проведен = ИСТИНА";
	ЗапросДокумента.УстановитьПараметр("НачДата", НачДата);
	ЗапросДокумента.УстановитьПараметр("КонДата", КонДата);
	Склады = Новый СписокЗначений;
	Склады.Добавить(СкладГурьянова);
	Склады.Добавить(СкладНоворязанка);
	Склады.Добавить(СкладЧертаново);
	Склады.Добавить(Справочники.Склады.НайтиПоКоду("000000028"));
	ЗапросДокумента.УстановитьПараметр("Склады", Склады);
	Результат = ЗапросДокумента.Выполнить();
	Возврат не Результат.Пустой();
КонецФункции

Функция ПолучитьДокументыИнвентаризации()
	НачДата = НачалоДня(ТекущаяДата()-2*86400);
	КонДата = КонецДня(ТекущаяДата());
	ЗапросДокумента = Новый Запрос;
	ЗапросДокумента.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка КАК Ссылка,
	|	ИнвентаризацияТоваровНаСкладе.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(1) КАК Количество,
	|			ИнвентаризацияТоваровНаСкладеТовары.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ИнвентаризацияТоваровНаСкладеТовары.Ссылка) КАК ЗапросКоличестваТовара
	|		ПО ИнвентаризацияТоваровНаСкладе.Ссылка = ЗапросКоличестваТовара.Ссылка
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Дата МЕЖДУ &НачДата И &КонДата
	|	И ИнвентаризацияТоваровНаСкладе.Склад В(&Склады)
	|	И ИнвентаризацияТоваровНаСкладе.Комментарий ПОДОБНО ""%+%""
	|	И ЗапросКоличестваТовара.Количество > 0
	|	И ИнвентаризацияТоваровНаСкладе.Проведен = ИСТИНА";
	ЗапросДокумента.УстановитьПараметр("НачДата", НачДата);
	ЗапросДокумента.УстановитьПараметр("КонДата", КонДата);
	Склады = Новый СписокЗначений;
	Склады.Добавить(СкладГурьянова);
	Склады.Добавить(СкладНоворязанка);
	Склады.Добавить(СкладЧертаново);
	Склады.Добавить(Справочники.Склады.НайтиПоКоду("000000028"));
	ЗапросДокумента.УстановитьПараметр("Склады", Склады);
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.ЗагрузитьЗначения(ЗапросДокумента.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокДокументов;
КонецФункции

Процедура ИнициализироватьТипИнвентаризации()
	ЗапросВидаИнвентаризации = Новый Запрос;
	ЗапросВидаИнвентаризации.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыНаСкладахОстатки.Номенклатура) КАК КоличествоСостатками
	|ПОМЕСТИТЬ ИзБазы
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИнвентаризацияТоваровНаСкладеТовары.Номенклатура) КАК КоличествоИнвентаризации
	|ПОМЕСТИТЬ ИзДокумента
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИзБазы.КоличествоСостатками / ИзДокумента.КоличествоИнвентаризации > 0.95
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Полная
	|ИЗ
	|	ИзБазы КАК ИзБазы,
	|	ИзДокумента КАК ИзДокумента";
	ЗапросВидаИнвентаризации.УстановитьПараметр("Ссылка", ДокументИнвентаризации);
	ВыборкаВидаИнвентаризации = ЗапросВидаИнвентаризации.Выполнить().Выбрать();
	ВыборкаВидаИнвентаризации.Следующий();
	ЧастичнаяИнвентаризация = не ВыборкаВидаИнвентаризации.Полная;
КонецПроцедуры

Функция ПолучитьКоличествоНоменклатурыСОстатком() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Склад,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварыНаСкладахОстатки.Номенклатура) КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Склад";
	Запрос.УстановитьПараметр("Склад", ДокументИнвентаризации.Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
КонецФункции

Функция ПолучитьКоличествоИнвентаризованнойНоменклатуры() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИнвентаризацияТоваровНаСкладе.Ссылка
	|ПОМЕСТИТЬ Документ
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Дата МЕЖДУ &НачДата И &КонДата
	|	И ИнвентаризацияТоваровНаСкладе.Склад = &Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Инвентаризация.Документ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Инвентаризация.Номенклатура) КАК Количество
	|ИЗ
	|	РегистрСведений.Инвентаризация КАК Инвентаризация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ КАК ДокументИнвентаризации
	|		ПО (ДокументИнвентаризации.Ссылка = Инвентаризация.Документ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Инвентаризация.Документ";
	НачДата = НачалоДня(ТекущаяДата()+86400*-7);
	КонДата = КонецДня(ТекущаяДата()+86400*7);
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Запрос.УстановитьПараметр("Склад", ДокументИнвентаризации.Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;	
КонецФункции

Функция ПолучитьОстаткиПоХарактеристикам(ТекНоменклатура) Экспорт
	ЗапросПоИнвентаризации = Новый Запрос;
	ЗапросПоИнвентаризации.Текст =
	"ВЫБРАТЬ
	|	Инвентаризация.ХарактеристикаНоменклатуры,
	|	Инвентаризация.Количество КАК КоличествоОстаток
	|ИЗ
	|	РегистрСведений.Инвентаризация КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Номенклатура = &Номенклатура
	|	И Инвентаризация.Документ = &ДокументИнвентаризации";
	ЗапросПоИнвентаризации.УстановитьПараметр("Номенклатура", ТекНоменклатура);
	ЗапросПоИнвентаризации.УстановитьПараметр("ДокументИнвентаризации", ДокументИнвентаризации);
	РезультатЗапроса = ЗапросПоИнвентаризации.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда	
		ЗапросПоОстаткам = Новый Запрос;
		ЗапросПоОстаткам.Текст = 
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки";
		ЗапросПоОстаткам.УстановитьПараметр("Номенклатура", ТекНоменклатура);
		ЗапросПоОстаткам.УстановитьПараметр("Склад", ДокументИнвентаризации.Склад);
		Возврат ЗапросПоОстаткам.Выполнить().Выгрузить();
	Иначе
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
КонецФункции

Функция ПолучитьПараметрыЗаписиИнвентаризацииПоШтрихКоду(ШтрихКод) Экспорт 
	ЗапросШтрихКода = Новый Запрос;
	ЗапросШтрихКода.Текст = 
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод";
	ЗапросШтрихКода.УстановитьПараметр("Штрихкод", ШтрихКод);
	ВыборкаШтрихКода = ЗапросШтрихКода.Выполнить().Выбрать();
	Если Не ВыборкаШтрихКода.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = Новый Структура("Владелец", ВыборкаШтрихКода.Владелец);
	
	Если ТипЗнч(ВыборкаШтрихКода.Владелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Параметры;
	КонецЕсли;
	
	ЗапросИнформацииИнвентаризации = Новый Запрос;
	ЗапросИнформацииИнвентаризации.Текст =
	"ВЫБРАТЬ
	|	Инвентаризация.Количество
	|ИЗ
	|	РегистрСведений.Инвентаризация КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Документ = &Документ
	|	И Инвентаризация.Номенклатура = &Номенклатура";
	ЗапросИнформацииИнвентаризации.УстановитьПараметр("Документ", ДокументИнвентаризации);
	ЗапросИнформацииИнвентаризации.УстановитьПараметр("Номенклатура", ВыборкаШтрихКода.Владелец);
	ВыборкаИнвентаризации = ЗапросИнформацииИнвентаризации.Выполнить().Выбрать();
	Если ВыборкаИнвентаризации.Следующий() Тогда
		Параметры.Вставить("ЕстьЗапись", Истина);
		Параметры.Вставить("Количество", ВыборкаИнвентаризации.Количество);
	Иначе
		Параметры.Вставить("ЕстьЗапись", Ложь);
		ЗапросКоличества = Новый Запрос;
		ЗапросКоличества.Текст =
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Номенклатура = &Номенклатура
		|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки";
		ЗапросКоличества.УстановитьПараметр("Номенклатура", ВыборкаШтрихКода.Владелец);
		ЗапросКоличества.УстановитьПараметр("Склад", ДокументИнвентаризации.Склад);
		ВыборкаКоличества = ЗапросКоличества.Выполнить().Выбрать();
		Если ВыборкаКоличества.Следующий() Тогда
			Параметры.Вставить("Количество", ВыборкаКоличества.КоличествоОстаток);
		Иначе
			Параметры.Вставить("Количество", 0);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
КонецФункции

Процедура СоздатьЗаписьИнвентаризации(ТекНоменклатура, ОстаткиПоХарактеристикам) Экспорт 
	Для Каждого СтрокаОстатков Из ОстаткиПоХарактеристикам Цикл
		МЗ = РегистрыСведений.Инвентаризация.СоздатьМенеджерЗаписи();
		МЗ.Документ = ДокументИнвентаризации;
		МЗ.Номенклатура = ТекНоменклатура;
		МЗ.ХарактеристикаНоменклатуры = СтрокаОстатков.ХарактеристикаНоменклатуры;
		МЗ.Прочитать();
		
		МЗ.Документ = ДокументИнвентаризации;
		МЗ.Номенклатура = ТекНоменклатура;
		МЗ.ХарактеристикаНоменклатуры = СтрокаОстатков.ХарактеристикаНоменклатуры;
		МЗ.Количество = СтрокаОстатков.Количество;
		МЗ.Пользователь = Пользователь;
		МЗ.Комментарий = "Изменения внесены с компьютера """ + ПолучитьИмяТерминальногоКомпьютера() + """";
		МЗ.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Форма_ввода_ШК_пользователья
Процедура ФормаВводаШКПользователяДействияПриОткрытии(Форма, Разрешение = "1280х768") Экспорт
	Форма.ЭлементыФормы.НадписьВерсия.Заголовок = ЭтотОбъект.Метаданные().Комментарий+" ("+Разрешение+")";
	
	//ИмяТСД = ПолучитьИмяТерминальногоКомпьютера();  
	СкладПользователя = ПолучитьСкладПользователя();
	ИмяТСД = ПараметрыСеанса.ТекущийПользователь;
	Форма.ЭлементыФормы.КнопкаСклад.Заголовок = СкладПользователя;
	ПросмотрПередПечатью = Ложь;
	
	Форма.ЭлементыФормы.КнопкаНастройки.Видимость = Истина;
	
	Форма.ЭлементыФормы.КнопкаНачатьРаботу.Доступность = Ложь;
	ВидКнопкиФормаВводаШКПользователя(Форма.ЭлементыФормы.КнопкаНачатьРаботу);
	
	Форма.ЭлементыФормы.КнопкаПаллет.Видимость = Ложь;
	
	Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаПользователя;
	
	Форма.ФлажокЗапускатьПриСтарте = ВосстановитьЗначение("Запускать обработку ТСД при старте");
КонецПроцедуры

Процедура ВидКнопкиФормаВводаШКПользователя(Кнопка)
	Кнопка.ЦветТекстаКнопки = ?(Кнопка.Доступность, WebЦвета.Зеленый, WebЦвета.Серый);
	Кнопка.Шрифт = Новый Шрифт(Кнопка.Шрифт,,,Кнопка.Доступность);
КонецПроцедуры

Процедура ФормаВводаШКПользователяПолеВводаПользователяПриИзменении(Форма) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Штрихкоды.Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод";
	Запрос.УстановитьПараметр("Штрихкод", ШКПользователя);
	Результат = Запрос.Выполнить();
	Если Результат <> Неопределено Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Владелец = Выборка.Владелец;
			Если ТипЗнч(Владелец) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
				Пользователь = Владелец.ВладелецКарты;
				Если ПроверитьРазрешенияНаРаботуСТСД(Пользователь) Тогда					
					Форма.ЭлементыФормы.КнопкаНачатьРаботу.Доступность = Истина;
					ВидКнопкиФормаВводаШКПользователя(Форма.ЭлементыФормы.КнопкаНачатьРаботу);
					Форма.ИнформационнаяНадпись = Пользователь.Наименование;
					ШКПользователя = "";
					Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаПользователя;
					ЗагрузитьНастройкиПользователя();
					
					Форма.ЭлементыФормы.КнопкаПаллет.Видимость = Истина; 
					
					ПризнакИнвентаризации = ПолучитьПризнакИнвентаризации();
					Форма.ЭлементыФормы.КнопкаИнвентаризация.Доступность = ПризнакИнвентаризации;
					Форма.ЭлементыФормы.КнопкаИнвентаризация.Видимость = ПризнакИнвентаризации;
					
					Форма.РасширенныеНастройки = 
					Пользователь.Наименование = "Базулин Дмитрий" 
					или Пользователь.Наименование = "Соловьёв Андрей"
					или Пользователь.Наименование = "Тряпицин Алексей"
					или Пользователь.Наименование = "Антошкин Александр"
					или Пользователь.Наименование = "Сидоров Юрий"
					или Пользователь.Наименование = "Матвеев Александр"
					или Пользователь.Наименование = "Волков Денис"
					или Пользователь.Наименование = "Борисов Юрий";
					
					//НажатьТаб(1);
					
					Возврат;
				Иначе
					мПредупреждение("Этому пользователю запрещена работа на терминале");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИнформационнаяНадпись = "Пользователь неопределён";
	ШКПользователя = "";
	//НажатьТаб(1);
	
	Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаПользователя;
КонецПроцедуры

Процедура ФормаВводаШКПользователяКнопкаНачатьРаботуНажатие(Форма) Экспорт
	
	///*** Проверить, нет ли у этого пользователя оставленных документов
	
	ШтрихКодДокумента = НайтиОтложенныйДокумент();
	
	ФормаВыбораДокумента_Название = ?(ТипЭкрана = 2, "ФормаВыбораДокумента_480х800", ?(ТипЭкрана = 3, "ФормаВыбораДокумента_1280х768", "ФормаВыбораДокумента"));
	ФормаВыбораДокумента = ПолучитьФорму(ФормаВыбораДокумента_Название);
	Если ЗначениеЗаполнено(ШтрихКодДокумента) Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Да");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Нет");
		ТекстВопроса = "Есть отложенный документ." + Символы.ПС + "Продолжить его сборку?";
		Если мВопрос(ТекстВопроса, СписокКнопок) = КодВозвратаДиалога.Да Тогда
			ФормаВыбораДокумента.ШтрихКодОтложенногоДокумента = ШтрихКодДокумента;
		КонецЕсли;
	КонецЕсли;
	ФормаВыбораДокумента.ОткрытьМодально();
	Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаПользователя;
КонецПроцедуры

Функция ПроверитьРазрешенияНаРаботуСТСД(Пользователь)
	Возврат Истина;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазрешенияНаРаботуСклада.РазрешенаСборкаНаТСД
	|ИЗ
	|	РегистрСведений.РазрешенияНаРаботуСклада КАК РазрешенияНаРаботуСклада
	|ГДЕ
	|	РазрешенияНаРаботуСклада.Пользователь = &Пользователь
	|	И РазрешенияНаРаботуСклада.Период МЕЖДУ &НачПериода И &КонПериода";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ТекущаяДата()));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РазрешенаСборкаНаТСД;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура ФормаВводаШКПользователяКнопкаИнвентаризацияНажатие() Экспорт 
	Если не ЗначениеЗаполнено(Пользователь) Тогда
		мПредупреждение("Отсканируйте свой штрихкод");
		Возврат;
	КонецЕсли;
	
	ДокументыИнвентаризации = ПолучитьДокументыИнвентаризации();
	Если ДокументыИнвентаризации.Количество() = 1 Тогда
		ДокументИнвентаризации = ДокументыИнвентаризации[0].Значение;
	Иначе    
		СписокКнопок = Новый СписокЗначений;
		Для Каждого Элемент Из ДокументыИнвентаризации Цикл
			СписокКнопок.Добавить(ДокументыИнвентаризации.Индекс(Элемент), СтрШаблон("Инв №%1 %2", Элемент.Значение.Номер, Элемент.Значение.Склад));
		КонецЦикла;
		Ответ = мВопрос("Выберите документ инвентаризации", СписокКнопок);
		Если Ответ = Неопределено Тогда
			Возврат;
		Иначе
			ДокументИнвентаризации = ДокументыИнвентаризации[Ответ].Значение;
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьТипИнвентаризации();
	
	ФормаЧастичнойИнвентаризации_Название = ?(ТипЭкрана = 2, "ФормаЧастичнойИнвентаризации_480х800", ?(ТипЭкрана = 3, "ФормаЧастичнойИнвентаризации_1280х768", "ФормаЧастичнойИнвентаризации"));
	ФормаИнвентаризации = ПолучитьФорму(ФормаЧастичнойИнвентаризации_Название);
	ФормаИнвентаризации.ОткрытьМодально();
	
	//ПолучитьПризнакИнвентаризации();
КонецПроцедуры

Функция НайтиОтложенныйДокумент()
	ЗапросОтложенногоДокумента = Новый Запрос;
	ЗапросОтложенногоДокумента.Текст = 	
	"ВЫБРАТЬ
	|	МАКСИМУМ(БС_СтатусыДокументов.Период) КАК Период,
	|	БС_СтатусыДокументов.Документ КАК Документ
	|ПОМЕСТИТЬ ПоследниеСтатусы
	|ИЗ
	|	РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
	|ГДЕ
	|	БС_СтатусыДокументов.Пользователь = &Пользователь
	|	И БС_СтатусыДокументов.Период > &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	БС_СтатусыДокументов.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БС_СтатусыДокументов.Документ КАК Документ,
	|	БС_СтатусыДокументов.Статус КАК Статус,
	|	БС_СтатусыДокументов.Зона КАК Зона
	|ИЗ
	|	ПоследниеСтатусы КАК ПоследниеСтатусы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
	|		ПО (БС_СтатусыДокументов.Документ = ПоследниеСтатусы.Документ)
	|			И (БС_СтатусыДокументов.Период = ПоследниеСтатусы.Период)
	|ГДЕ
	|	БС_СтатусыДокументов.Пользователь = &Пользователь
	|	И (БС_СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.БС_СтатусыДокументов.НаСборке)
	|			ИЛИ БС_СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.БС_СтатусыДокументов.НаПроверке))";
	ЗапросОтложенногоДокумента.УстановитьПараметр("Пользователь", Пользователь);
	ЗапросОтложенногоДокумента.УстановитьПараметр("Период", НачалоДня(ТекущаяДата()));
	Результат = ЗапросОтложенногоДокумента.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ДокументСсылка = Выборка.Документ;
	//Зона = Выборка.Зона;
	
	ЗапросШтрихКодаДокумента = Новый Запрос;
	ЗапросШтрихКодаДокумента.Текст = 
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &Владелец";
	ЗапросШтрихКодаДокумента.УстановитьПараметр("Владелец", ДокументСсылка);
	Выборка = ЗапросШтрихКодаДокумента.Выполнить().Выбрать();
	Выборка.Следующий();
	Штрихкод = Выборка.Штрихкод;
	
	Возврат Штрихкод;
КонецФункции        

Процедура ФормаВводаШКПользователяПередЗакрытием(Форма, Отказ) Экспорт 
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(1, "Да");
	СписокКнопок.Добавить(2, "Нет");	
	Если мВопрос("Закрыть обработку?", СписокКнопок) = 2 Тогда
		Отказ = Истина;
		ШКПользователя = "";
		Форма.ИнформационнаяНадпись = "";
		Форма.ЭлементыФормы.КнопкаНачатьРаботу.Доступность = Ложь;
		Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаПользователя;
	КонецЕсли;
КонецПроцедуры

Процедура ФормаВводаШКПользователяКнопкаНастройкиНажатие(Форма) Экспорт
	СписокКнопок = Новый СписокЗначений;
	Если Форма.РасширенныеНастройки Тогда
		СписокКнопок.Добавить(2, "Привязка места к номенклатуре");
		СписокКнопок.Добавить(3, "Привязка множества номенклатуры");	
		СписокКнопок.Добавить(8, "Печать длинного штрихкода");
	КонецЕсли;
	Если Пользователь.Наименование = "Базулин Дмитрий" Тогда
		СписокКнопок.Добавить(1, "Сортировка");
		СписокКнопок.Добавить(5, "Разрешения на проверку");
		СписокКнопок.Добавить(7, "Разрешения на сборку ДТ");
	КонецЕсли;                                                  
	СписокКнопок.Добавить(6, ?(ПросмотрПередПечатью,"√ ","") + "Просмотр перед печатью");
	СписокКнопок.Добавить(9, "Склад возврата");
	СписокКнопок.Добавить(4, "Выход");
	
	СписокСкладовВозврата = Новый СписокЗначений;
	СписокСкладовВозврата.Добавить(Справочники.Склады.НайтиПоКоду("000000001"),"Гурьянова");
	СписокСкладовВозврата.Добавить(Справочники.Склады.НайтиПоКоду("000000029"),"Новорязанка");
	СписокСкладовВозврата.Добавить(Справочники.Склады.НайтиПоКоду("000000030"),"Чертаново");
	СписокСкладовВозврата.Добавить(Справочники.Склады.НайтиПоКоду("000000028"),"Калининград");
	
	Выбор = Неопределено;
	Пока Выбор <> 4 Цикл
		Выбор = мВопрос("Выберите действие", СписокКнопок);
		Если Выбор = 1 Тогда	
			ФормаСоответствияМестХранения_Название = ?(ТипЭкрана = 3, "ФормаСоответствияМестХранения_1280х768", "ФормаСоответствияМестХранения");
			ФормаСоответствияМестХранения = ПолучитьФорму(ФормаСоответствияМестХранения_Название);
			ФормаСоответствияМестХранения.ОткрытьМодально();
		ИначеЕсли Выбор = 2 Тогда
			//ФормаПривязкиМестХранения_Название = ?(ТипЭкрана = 3, "ФормаПривязкиМестХранения_1280х768", "ФормаПривязкиМестХранения");
			//ФормаПривязкиМестХранения = ПолучитьФорму(ФормаПривязкиМестХранения_Название);
			//ФормаПривязкиМестХранения.ОткрытьМодально();
			ФормаПривязкиМестХранения = ПолучитьФорму("ФормаПривязкиМестХранения_Новая");
			ФормаПривязкиМестХранения.ОткрытьМодально();
		ИначеЕсли Выбор = 3 Тогда
			ФормаПривязкиНоменклатурыКМестуХранения_Название = ?(ТипЭкрана = 3, "ФормаПривязкиНоменклатурыКМестуХранения_1280х768", "ФормаПривязкиНоменклатурыКМестуХранения");
			ФормаПривязкиНоменклатурыКМестуХранения = ПолучитьФорму(ФормаПривязкиНоменклатурыКМестуХранения_Название);
			ФормаПривязкиНоменклатурыКМестуХранения.ОткрытьМодально();
		ИначеЕсли Выбор = 5 Тогда
			ФормаУстановкиРазрешенийНаПриемку_Название = ?(ТипЭкрана = 3, "ФормаУстановкиРазрешенийНаПриемку_1280х768", "ФормаУстановкиРазрешенийНаПриемку");
			ФормаУстановкиРазрешенийНаПриемку = ПолучитьФорму(ФормаУстановкиРазрешенийНаПриемку_Название);
			ФормаУстановкиРазрешенийНаПриемку.ОткрыватьКакРазрешениеНаПроверку = Истина;
			ФормаУстановкиРазрешенийНаПриемку.ОткрытьМодально();
		ИначеЕсли Выбор = 7 Тогда
			ФормаУстановкиРазрешенийНаПриемку_Название = ?(ТипЭкрана = 3, "ФормаУстановкиРазрешенийНаПриемку_1280х768", "ФормаУстановкиРазрешенийНаПриемку");
			ФормаУстановкиРазрешенийНаПриемку = ПолучитьФорму(ФормаУстановкиРазрешенийНаПриемку_Название);
			ФормаУстановкиРазрешенийНаПриемку.ОткрыватьКакРазрешениеНаПроверку = Ложь;
			ФормаУстановкиРазрешенийНаПриемку.ОткрытьМодально();
		ИначеЕсли Выбор = 6 Тогда
			ПросмотрПередПечатью = Не ПросмотрПередПечатью;
			Элемент = СписокКнопок.НайтиПоЗначению(6);
			Элемент.Представление = ?(ПросмотрПередПечатью,"√ ","") + "Просмотр перед печатью";
		ИначеЕсли Выбор = 8 Тогда
			ФормаПечатиДлинногоШтрихкода = ПолучитьФорму("ФормаПечатиДлинногоШтрихкода_1280х768");
			ФормаПечатиДлинногоШтрихкода.ОткрытьМодально();
		ИначеЕсли Выбор = 9 Тогда
			ФормаВозврата = ПолучитьФорму("ФормаВыбораСкладаВозврата");
			ФормаВозврата.ОткрытьМодально();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ФормаВводаШКПользователяКнопкаСкладНажатие(Форма) Экспорт
	СписокКнопокВопроса = Новый СписокЗначений;
	СписокКнопокВопроса.Добавить(1, "Москва (Гурьянова)");
	СписокКнопокВопроса.Добавить(2, "Москва (Новорязанка)");
	СписокКнопокВопроса.Добавить(3, "Москва (Чертаново)");
	СписокКнопокВопроса.Добавить(4, "Калининград"); 
	
	Ответ = мВопрос("Выберите склад", СписокКнопокВопроса);
	Если Ответ = Неопределено Тогда
		Возврат;
	Иначе  
		Если Ответ = 1 Тогда
			СкладПользователя = СкладГурьянова;
		ИначеЕсли Ответ = 2 Тогда
			СкладПользователя = СкладНоворязанка;
		ИначеЕсли Ответ = 3 Тогда
			СкладПользователя = СкладЧертаново;
		Иначе
			СкладПользователя = Справочники.Склады.НайтиПоКоду("000000028");
		КонецЕсли;
	КонецЕсли;
	СохранитьЗначение("Склад пользователя", СкладПользователя);
	Форма.ЭлементыФормы.КнопкаСклад.Заголовок = СкладПользователя;
КонецПроцедуры

Процедура ФормаВводаШКПользователяПаллетНажатие(Форма) Экспорт
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(1, "Печать штрих-кода");
	СписокКнопок.Добавить(2, "Упаковка для маркета");
	СписокКнопок.Добавить(3, "Поиск заказа маркета");
	СписокКнопок.Добавить(4, "Заказы на дату отгрузки");
	СписокКнопок.Добавить(5, "Отмена");
	Ответ = мВопрос("", СписокКнопок);
	Если Ответ = 1 Тогда
		ШКПаллетаНажатие();
	ИначеЕсли Ответ = 2 Тогда
		УпаковкаДляМаркетаНажатие();
	ИначеЕсли Ответ = 3 Тогда
		ПоискЗаказаМаркетаНажатие();
	ИначеЕсли Ответ = 4 Тогда
		ФормаПроверкиЗаказовПлощадки_Наименование = ?(ТипЭкрана = 3, "ФормаПроверкиЗаказовПлощадки_1280х768", Неопределено);
		ФормаПроверкиЗаказовПлощадки = ПолучитьФорму(ФормаПроверкиЗаказовПлощадки_Наименование);
		ФормаПроверкиЗаказовПлощадки.ОткрытьМодально();
	КонецЕсли;
КонецПроцедуры

Процедура ШКПаллетаНажатие()
	//Если ПараметрыСеанса.ТекущийПользователь.Наименование <> "Соловьёв Андрей" Тогда
	//	мПредупреждение("В разработке...");
	//	Возврат;
	//КонецЕсли;
	
	ФормаВыбораПутевогоЛиста_Наименование = ?(ТипЭкрана = 3, "ФормаВыбораПутевогоЛиста_1280х768", "ФормаВыбораПутевогоЛиста");
	ФормаВыбораПутевогоЛиста = ПолучитьФорму(ФормаВыбораПутевогоЛиста_Наименование);
	Если ФормаВыбораПутевогоЛиста.ОткрытьМодально() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйПутевойЛист = ФормаВыбораПутевогоЛиста.ЭлементыФормы.ПолеСпискаПутевыхЛистов.ТекущаяСтрока.Значение;
	ЗапросШКПаллета = Новый Запрос;
	ЗапросШКПаллета.Текст = 
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Владелец = &Владелец";
	ЗапросШКПаллета.УстановитьПараметр("Владелец", ВыбранныйПутевойЛист);
	ВыборкаШК = ЗапросШКПаллета.Выполнить().Выбрать();
	ВыборкаШК.Следующий();
	ШтрихКодПаллета = ВыборкаШК.Штрихкод;
	ПечатьЭтикеткиПаллета(ВыбранныйПутевойЛист.РегионДоставки, ПолучитьНомерДляПечати(ВыбранныйПутевойЛист.Код), ШтрихКодПаллета);	
КонецПроцедуры

Процедура ПечатьЭтикеткиПаллета(Направление, НомерПаллета, ТекстШК)
	Параметры = Новый Структура;
	Параметры.Вставить("Направление", Направление);
	Параметры.Вставить("НомерПаллета", НомерПаллета);
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("МакетШтрихКодаПаллета");
	Область = Макет.ПолучитьОбласть("Этикетка");
	Область.Параметры.Заполнить(Параметры);
	//Область.Рисунки.ШтрихКод.Объект.ТипКода = 4;
	//Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
	//Область.Рисунки.ШтрихКод.Линия = Линия;
	//Область.Рисунки.ШтрихКод.Объект.Сообщение = ТекстШК;
	//Область.Рисунки.ШтрихКод.Объект.ТекстКода = ТекстШК; 
	
	КартинкаШК = СформироватьШтрихКод(,,ТекстШК);
	РисунокШК = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	РисунокШК.Расположить(Область.Область("R3C1:R4C2"));
	РисунокШК.Картинка = КартинкаШК;
	РисунокШК.ГраницаСверху = Ложь;
	РисунокШК.ГраницаСнизу = Ложь;
	РисунокШК.ГраницаСправа = Ложь;
	РисунокШК.ГраницаСлева = Ложь;
	ТабДок.Вывести(Область);
	
	ТабДок.ИмяПринтера = "Brother QL-720NW";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ЧерноБелаяПечать = Истина;
	ТабДок.ПолеСверху = 1;
	ТабДок.ПолеСлева = 3;
	ТабДок.ПолеСнизу = 1;
	ТабДок.ПолеСправа = 1;
	//ТабДок.Показать();
	//ТабДок.Напечатать(РежимИспользованияДиалогаПечати.Использовать);		
	ТабДок.Напечатать();		
КонецПроцедуры

Процедура УпаковкаДляМаркетаНажатие()
	ФормаУпаковкиПаллетаМаркета_Название = ?(ТипЭкрана = 3, "ФормаУпаковкиПаллетаМаркета_1280х768", "ФормаУпаковкиПаллетаМаркета");
	ФормаУпаковкиПаллетаМаркета = ПолучитьФорму(ФормаУпаковкиПаллетаМаркета_Название);
	ФормаУпаковкиПаллетаМаркета.ОткрытьМодально();
КонецПроцедуры

Процедура ПоискЗаказаМаркетаНажатие()
	ФормаПоискаЗаказаМаркета_Название = ?(ТипЭкрана = 3, "ФормаПоискаЗаказаМаркета_1280х768", "ФормаПоискаЗаказаМаркета");
	ФормаПоискаЗаказаМаркета = ПолучитьФорму(ФормаПоискаЗаказаМаркета_Название);
	ФормаПоискаЗаказаМаркета.ОткрытьМодально();
КонецПроцедуры

Процедура ФормаВводаШКПользователяФлажокЗапускатьПриСтартеПриИзменении(Форма) Экспорт
	СохранитьЗначение("Запускать обработку ТСД при старте", Форма.ФлажокЗапускатьПриСтарте);
КонецПроцедуры
#КонецОбласти

#Область Форма_выбора_документа
Процедура ФормаВыбораДокумента_ПриОткрытии(ШтрихКодОтложенногоДокумента, Форма) Экспорт
	ЭлементыФормы = Форма.ЭлементыФормы;
	Если ЗначениеЗаполнено(ШтрихКодОтложенногоДокумента) Тогда
		ШКДокумента = ШтрихКодОтложенногоДокумента;
		ШтрихКодОтложенногоДокумента = "";
		ФормаВыбораДокумента_ПолеВводаШКДокументаПриИзменении(Форма);
	Иначе
		ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Ложь;
		ЭлементыФормы.КнопкаЭтикетки.Доступность = Ложь;
	КонецЕсли;
	Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;	
КонецПроцедуры

Процедура ФормаВыбораДокумента_ПолеВводаШКДокументаПриИзменении(Форма) Экспорт
	АнализВведённогоШтрихкода(Форма);
	
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	Если Форма.ТипОперации = "" Тогда
		//НажатьТаб(1);
		Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
		Возврат;
	КонецЕсли;
	
	Если Документ = Неопределено Тогда
		мПредупреждение("Документ не найден");
		Возврат;
	КонецЕсли;
	
	Если Форма.ТипОперации = "Сборка" ИЛИ Форма.ТипОперации = "Проверка" Тогда
		
		#Область Сборка_и_проверка
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Если ВЗаказеЕстьДробныеКоличества(Документ) Тогда
				ТекстПредупреждения = "В заказе есть дробные количества, такой заказ собирать нельзя.";
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(1, "ОК");
				мВопрос(ТекстПредупреждения, СписокКнопок);
				Возврат;
			КонецЕсли;
			
			ЗапросСвойствДокумента = Новый Запрос;
			ЗапросСвойствДокумента.Текст =
			"ВЫБРАТЬ
			|	ЗаказПокупателяТовары.Ссылка.Контрагент КАК Контрагент,
			|	рсСтатусыДокументов.Статус КАК Статус,
			|	рсСтатусыДокументов.Сборщик КАК Сборщик,
			|	спрРегионы.Направление КАК Направление,
			|	СУММА(1) КАК ВсегоПозиций
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Регионы.Ссылка КАК Ссылка,
			|			Регионы.ЖДСтанцияНазначения КАК Направление
			|		ИЗ
			|			Справочник.Регионы КАК Регионы) КАК спрРегионы
			|		ПО ЗаказПокупателяТовары.Ссылка.Контрагент.Регион = спрРегионы.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			БС_СтатусыДокументов.Документ КАК Документ,
			|			БС_СтатусыДокументов.Статус КАК Статус,
			|			БС_СтатусыДокументов.Пользователь КАК Сборщик
			|		ИЗ
			|			(ВЫБРАТЬ
			|				БС_СтатусыДокументов.Документ КАК Документ,
			|				МАКСИМУМ(БС_СтатусыДокументов.Период) КАК Период
			|			ИЗ
			|				РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
			|			ГДЕ
			|				БС_СтатусыДокументов.Документ = &Ссылка
			|				И БС_СтатусыДокументов.Зона = &Зона
			|			
			|			СГРУППИРОВАТЬ ПО
			|				БС_СтатусыДокументов.Документ) КАК ЗапросВремениСтатуса
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
			|				ПО ЗапросВремениСтатуса.Документ = БС_СтатусыДокументов.Документ
			|					И ЗапросВремениСтатуса.Период = БС_СтатусыДокументов.Период) КАК рсСтатусыДокументов
			|		ПО ЗаказПокупателяТовары.Ссылка = рсСтатусыДокументов.Документ
			|ГДЕ
			|	ЗаказПокупателяТовары.Ссылка = &Ссылка
			|	И ЗаказПокупателяТовары.Размещение = &Склад
			|
			|СГРУППИРОВАТЬ ПО
			|	спрРегионы.Направление,
			|	рсСтатусыДокументов.Статус,
			|	рсСтатусыДокументов.Сборщик,
			|	ЗаказПокупателяТовары.Ссылка.Контрагент";
			ЗапросСвойствДокумента.УстановитьПараметр("Ссылка", Документ);
			ЗапросСвойствДокумента.УстановитьПараметр("Зона", Зона);
			ЗапросСвойствДокумента.УстановитьПараметр("Склад", СкладДокумента);
			
		Иначе // Внутренний заказ
			ЗапросСвойствДокумента = Новый Запрос;
			ЗапросСвойствДокумента.Текст =
			"ВЫБРАТЬ
			|	ВнутреннийЗаказТовары.Размещение КАК Контрагент,
			|	ЗапросСтатуса.Статус КАК Статус,
			|	ЗапросСтатуса.Сборщик КАК Сборщик,
			|	ВнутреннийЗаказТовары.Ссылка.Заказчик КАК Направление,
			|	СУММА(1) КАК ВсегоПозиций
			|ИЗ
			|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ЗапросПериодаСтатуса.Документ КАК Документ,
			|			БС_СтатусыДокументов.Статус КАК Статус,
			|			БС_СтатусыДокументов.Пользователь КАК Сборщик
			|		ИЗ
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(БС_СтатусыДокументов.Период) КАК Период,
			|				БС_СтатусыДокументов.Документ КАК Документ
			|			ИЗ
			|				РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
			|			
			|			СГРУППИРОВАТЬ ПО
			|				БС_СтатусыДокументов.Документ) КАК ЗапросПериодаСтатуса
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
			|				ПО ЗапросПериодаСтатуса.Документ = БС_СтатусыДокументов.Документ
			|					И ЗапросПериодаСтатуса.Период = БС_СтатусыДокументов.Период) КАК ЗапросСтатуса
			|		ПО ВнутреннийЗаказТовары.Ссылка = ЗапросСтатуса.Документ
			|ГДЕ
			|	ВнутреннийЗаказТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВнутреннийЗаказТовары.Размещение,
			|	ВнутреннийЗаказТовары.Ссылка.Заказчик,
			|	ЗапросСтатуса.Сборщик,
			|	ЗапросСтатуса.Статус";
			ЗапросСвойствДокумента.УстановитьПараметр("Ссылка", Документ);
		КонецЕсли; 
		
		Результат = ЗапросСвойствДокумента.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ТекущийСтатусДокумента = ?(ЗначениеЗаполнено(мСтатусДокумента), мСтатусДокумента, ?(ЗначениеЗаполнено(Выборка.Статус), Выборка.Статус, "Нет статуса"));
		
		Отбор = Новый Структура;
		Отбор.Вставить("Размещение", СкладДокумента);
		СписокНоменклатуры = Документ.Товары.Выгрузить(Отбор, "Номенклатура, ХарактеристикаНоменклатуры");
		СписокНоменклатуры.Свернуть("Номенклатура, ХарактеристикаНоменклатуры");
		ПолучитьСписокМестХранения(СписокНоменклатуры, СкладДокумента); // предполагается, что внутренние заказы собираются по терминалу только на московском складе
		СписокМест = Новый СписокЗначений;
		СписокМест.ЗагрузитьЗначения(СписокНоменклатуры.ВыгрузитьКолонку("НаименованиеМестаХранения"));
		СтрокаСписокМест = Лев(Строка(СписокМест),120);
		
		НесколькоСборщиков = Ложь;
		Сборщики = ПолучитьСборщиковЗаказа(Документ);
		Если ЗначениеЗаполнено(Сборщики) Тогда
			Если СтрНайти(Сборщики, ",") > 0 Тогда
				НесколькоСборщиков = Истина;
			КонецЕсли;
		Иначе
			Сборщики = Выборка.Сборщик;
		КонецЕсли;
		
		Форма.ИнформационнаяНадпись = "Статус: """ + ТекущийСтатусДокумента + """";
		Если ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаСборке Тогда
			Форма.ИнформационнаяНадпись = Форма.ИнформационнаяНадпись + ?(НесколькоСборщиков, " (собирают ", " (собирает ")+Сборщики+")";
		ИначеЕсли ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.Собран Тогда
			Форма.ИнформационнаяНадпись = Форма.ИнформационнаяНадпись + ?(НесколькоСборщиков, " (собирали ", " (собирал ")+Сборщики+")";
		КонецЕсли;
		ДатаОтгрузки = Документ.ДатаОтгрузки;
		Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			ТекстОтгрузки = " (отгр.:"+Формат(ДатаОтгрузки,"ДФ=dd.MM.yyyy")+")";
		Иначе
			ТекстОтгрузки = " (нет даты отгрузки)";
		КонецЕсли;
		
		Форма.ИнформационнаяНадпись = Форма.ИнформационнаяНадпись 
		+ Символы.ПС + Документ + ТекстОтгрузки + Символы.ПС
		+ "Всего позиций:" + Выборка.ВсегоПозиций + Символы.ПС
		+ "Места: "+СтрокаСписокМест;
		ЭтоИнтернет = ПолучитьПризнакЗаказаИнтернет();
		СписокСкладовДокумента = ПолучитьСписокСкладовДокумента();
		Если ЭтоИнтернет Тогда
			Форма.ИнформационнаяНадпись = Форма.ИнформационнаяНадпись + Символы.ПС + "Склады:"
			+ ?(СписокСкладовДокумента.НайтиПоЗначению(СкладГурьянова) = Неопределено, "", " Гур")
			+ ?(СписокСкладовДокумента.НайтиПоЗначению(СкладНоворязанка) = Неопределено, "", " Нов")
			+ ?(СписокСкладовДокумента.НайтиПоЗначению(СкладЧертаново) = Неопределено, "", " Чер");
		КонецЕсли;
		
		Форма.НадписьРегион = "Направление: " + Выборка.Направление;
		Форма.НадписьКлиент = "Клиент: " + Выборка.Контрагент;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ТекСборщикЕстьСредиСобиравших = СтрНайти(Сборщики, СокрЛП(Пользователь.Наименование)) > 0;
		Иначе
			ТекСборщикЕстьСредиСобиравших = Ложь;
		КонецЕсли;			
		
		Если СписокНоменклатуры.Количество() = 0 Тогда
			МожноВзять = Ложь;
		Иначе
			Если ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляСборки или ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаСборке Тогда
				Если Зона = "D" Тогда
					МожноВзять = ЕстьРазрешениеСборкиДТ();
				Иначе 
					Если СписокСкладовДокумента.Количество() > 1 Тогда
						СписокКнопок = Новый СписокЗначений;
						СписокКнопок.Добавить(1, "Да");
						СписокКнопок.Добавить(2, "Нет");
						мОтвет = мВопрос("Несколько складов. Продолжить сборку?", СписокКнопок);
						МожноВзять = мОтвет = 1;
					Иначе
						МожноВзять = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				МожноВзять = не ТекСборщикЕстьСредиСобиравших и ЕстьРазрешениеНаПроверку();
			КонецЕсли;
		КонецЕсли;
		
		ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = ?(МожноВзять, WebЦвета.СветлоЗеленый, WebЦвета.СветлоРозовый);
		ЭлементыФормы.НадписьКлиент.ЦветФона = ?(МожноВзять, WebЦвета.СветлоЗеленый, WebЦвета.СветлоРозовый);
		ЭлементыФормы.НадписьРегион.ЦветФона = ?(МожноВзять, WebЦвета.СветлоЗеленый, WebЦвета.СветлоРозовый);
		ЭлементыФормы.КнопкаВзятьДокумент.Доступность = МожноВзять; 
		ЭлементыФормы.КнопкаЭтикетки.Доступность = Истина;
		
		//НажатьТаб(1);
		Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
		
		Возврат;
		
		#КонецОбласти
		
	ИначеЕсли Форма.ТипОперации = "Приемка" Тогда
		
		#Область Приемка
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(1) КАК ВсегоПозиций,
			|	СУММА(ВЫБОР
			|			КОГДА рсШтрихКоды.Владелец ЕСТЬ NULL
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК СоШтрихКодом,
			|	ЗаказПоставщикуТовары.Ссылка.Контрагент.Наименование КАК Контрагент,
			|	рсСтатусыДокументов.Статус КАК Статус,
			|	рсСтатусыДокументов.Сборщик КАК Сборщик
			|ИЗ
			|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Штрихкоды.Владелец КАК Владелец,
			|			Штрихкоды.Штрихкод КАК Штрихкод
			|		ИЗ
			|			РегистрСведений.Штрихкоды КАК Штрихкоды) КАК рсШтрихКоды
			|		ПО ЗаказПоставщикуТовары.Номенклатура = рсШтрихКоды.Владелец
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ДокументыСкладаСрезПоследних.Документ КАК Документ,
			|			ДокументыСкладаСрезПоследних.Статус КАК Статус,
			|			ДокументыСкладаСрезПоследних.Пользователь КАК Сборщик
			|		ИЗ
			|			РегистрСведений.БС_СтатусыДокументов.СрезПоследних КАК ДокументыСкладаСрезПоследних) КАК рсСтатусыДокументов
			|		ПО ЗаказПоставщикуТовары.Ссылка = рсСтатусыДокументов.Документ
			|ГДЕ
			|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказПоставщикуТовары.Ссылка.Контрагент.Наименование,
			|	рсСтатусыДокументов.Статус,
			|	рсСтатусыДокументов.Сборщик"; 
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(1) КАК ВсегоПозиций,
			|	СУММА(ВЫБОР
			|			КОГДА ЗапросШК.Владелец ЕСТЬ NULL
			|				ТОГДА 0
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК СоШтрихКодом,
			|	ЗапросРазмещения.Размещение КАК Контрагент,
			|	ЗапросСтатуса.Статус КАК Статус,
			|	ЗапросСтатуса.Сборщик КАК Сборщик
			|ИЗ
			|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Штрихкоды.Владелец КАК Владелец
			|		ИЗ
			|			РегистрСведений.Штрихкоды КАК Штрихкоды
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Штрихкоды.Владелец) КАК ЗапросШК
			|		ПО ВнутреннийЗаказТовары.Номенклатура = ЗапросШК.Владелец
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			БС_СтатусыДокументов.Статус КАК Статус,
			|			ЗапросПериодаСтатуса.Документ КАК Документ,
			|			БС_СтатусыДокументов.Пользователь КАК Сборщик
			|		ИЗ
			|			(ВЫБРАТЬ
			|				МАКСИМУМ(БС_СтатусыДокументов.Период) КАК Период,
			|				БС_СтатусыДокументов.Документ КАК Документ
			|			ИЗ
			|				РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
			|			
			|			СГРУППИРОВАТЬ ПО
			|				БС_СтатусыДокументов.Документ) КАК ЗапросПериодаСтатуса
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БС_СтатусыДокументов КАК БС_СтатусыДокументов
			|				ПО ЗапросПериодаСтатуса.Документ = БС_СтатусыДокументов.Документ
			|					И ЗапросПериодаСтатуса.Период = БС_СтатусыДокументов.Период) КАК ЗапросСтатуса
			|		ПО ВнутреннийЗаказТовары.Ссылка = ЗапросСтатуса.Документ,
			|	(ВЫБРАТЬ ПЕРВЫЕ 1
			|		ВнутреннийЗаказТовары.Размещение КАК Размещение
			|	ИЗ
			|		Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
			|	ГДЕ
			|		ВнутреннийЗаказТовары.Ссылка = &Ссылка) КАК ЗапросРазмещения
			|ГДЕ
			|	ВнутреннийЗаказТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗапросСтатуса.Статус,
			|	ЗапросСтатуса.Сборщик,
			|	ЗапросРазмещения.Размещение";
		КонецЕсли;
		Запрос.УстановитьПараметр("Ссылка", Документ);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ТекущийСтатусДокумента = Выборка.Статус;
		НазваниеСтатуса = ПолучитьИмяСтатусаПоТипуДокумента(Выборка.Статус, ТипЗнч(Документ));
		Форма.ИнформационнаяНадпись = 
		"Статус: """ + НазваниеСтатуса + """"
		+ ?(Выборка.Статус = Перечисления.БС_СтатусыДокументов.НаПриемке, " (принимал "+Выборка.Сборщик+")", "")
		+ Символы.ПС + Символы.ПС + Документ + Символы.ПС + Символы.ПС 
		+ "Всего позиций:" + Выборка.ВсегоПозиций;
		
		Форма.НадписьРегион = "";
		Форма.НадписьКлиент = "Поставщик: " + Выборка.Контрагент;
		
		ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = ?(ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляСборки, WebЦвета.СветлоЗеленый, WebЦвета.СветлоРозовый);
		ЭлементыФормы.НадписьКлиент.ЦветФона = ?(ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляСборки, WebЦвета.СветлоЗеленый, WebЦвета.СветлоРозовый);
		ЭлементыФормы.НадписьРегион.ЦветФона = ?(ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляСборки, WebЦвета.СветлоЗеленый, WebЦвета.СветлоРозовый);
		ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Истина;
		ЭлементыФормы.КнопкаЭтикетки.Доступность = Ложь;
		
		//НажатьТаб(1);
		Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
		
		Возврат;
		
		#КонецОбласти		
		
	ИначеЕсли Форма.ТипОперации = "Возврат" Тогда
		
		#Область _Возврат
		
		ЗапросКорректировки = Новый Запрос;
		ЗапросКорректировки.Текст =
		"ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.ДокументРеализации В
		|			(ВЫБРАТЬ
		|				РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|			ГДЕ
		|				РеализацияТоваровУслуг.Сделка = &Сделка)";
		ЗапросКорректировки.УстановитьПараметр("Сделка", Документ);
		Результат = ЗапросКорректировки.Выполнить();
		
		ЕстьКорректировка = не Результат.Пустой();
		
		Форма.ИнформационнаяНадпись = 
		"Статус: Документ на возврат"
		+ Символы.ПС + Символы.ПС + Документ + Символы.ПС + Символы.ПС 
		+ "Всего позиций для сканирования:" + Документ.Товары.Количество();
		
		Форма.НадписьРегион = "";
		Форма.НадписьКлиент = "Покупатель: Яндекс.Маркетплейс";
		
		ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = ?(ЕстьКорректировка, WebЦвета.СветлоРозовый, WebЦвета.СветлоЗеленый);
		ЭлементыФормы.НадписьКлиент.ЦветФона = ?(ЕстьКорректировка, WebЦвета.СветлоРозовый, WebЦвета.СветлоЗеленый);
		ЭлементыФормы.НадписьРегион.ЦветФона = ?(ЕстьКорректировка, WebЦвета.СветлоРозовый, WebЦвета.СветлоЗеленый);
		ЭлементыФормы.КнопкаВзятьДокумент.Доступность = не ЕстьКорректировка;
		ЭлементыФормы.КнопкаЭтикетки.Доступность = Ложь;
		
		//НажатьТаб(1);
		Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
		
		Возврат;
		
		#КонецОбласти
		
	ИначеЕсли Форма.ТипОперации = "Упаковка" Тогда
		
		#Область Упаковка  
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ЗапросПараметровУпаковки = Новый Запрос;
			ЗапросПараметровУпаковки.Текст =
			"ВЫБРАТЬ
			|	СУММА(1) КАК ВсегоСтрок,
			|	СУММА(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент) КАК ВсегоЕдиниц,
			|	ЗаказПокупателяТовары.Ссылка.Контрагент КАК Контрагент,
			|	Регионы.ЖДСтанцияНазначения КАК Направление
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Регионы КАК Регионы
			|		ПО ЗаказПокупателяТовары.Ссылка.Контрагент.Регион = Регионы.Ссылка
			|ГДЕ
			|	ЗаказПокупателяТовары.Ссылка = &Ссылка
			|	И ЗаказПокупателяТовары.Размещение = &Размещение
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказПокупателяТовары.Ссылка.Контрагент,
			|	Регионы.ЖДСтанцияНазначения";
			ЗапросПараметровУпаковки.УстановитьПараметр("Ссылка", Документ);
			ЗапросПараметровУпаковки.УстановитьПараметр("Размещение", СкладДокумента); 
		Иначе // Внутренний заказ 
			ЗапросПараметровУпаковки = Новый Запрос;
			ЗапросПараметровУпаковки.Текст = 
			"ВЫБРАТЬ
			|	СУММА(1) КАК ВсегоСтрок,
			|	СУММА(ВнутреннийЗаказТовары.Количество * ВнутреннийЗаказТовары.Коэффициент) КАК ВсегоЕдиниц,
			|	МАКСИМУМ(ВнутреннийЗаказТовары.Размещение) КАК Контрагент,
			|	ВнутреннийЗаказТовары.Ссылка.Заказчик КАК Направление
			|ИЗ
			|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
			|ГДЕ
			|	ВнутреннийЗаказТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ВнутреннийЗаказТовары.Ссылка.Заказчик";
			ЗапросПараметровУпаковки.УстановитьПараметр("Ссылка", Документ);			
		КонецЕсли;
		ВыборкаПараметровУпаковки = ЗапросПараметровУпаковки.Выполнить().Выбрать();
		ВыборкаПараметровУпаковки.Следующий();
		
		Форма.ВсегоСтрок = ВыборкаПараметровУпаковки.ВсегоСтрок;
		Форма.ВсегоЕдиниц = ВыборкаПараметровУпаковки.ВсегоЕдиниц;
		Форма.ИнформационнаяНадпись = 
		"Статус: Проверен"
		+ Символы.ПС + Символы.ПС + Документ + Символы.ПС + Символы.ПС 
		+ "Всего наименований позиций:" + ВыборкаПараметровУпаковки.ВсегоСтрок + Символы.ПС
		+ "Всего единиц продукции:" + ВыборкаПараметровУпаковки.ВсегоЕдиниц;
		
		Форма.НадписьРегион = "Направление: " + ВыборкаПараметровУпаковки.Направление;
		Форма.НадписьКлиент = "Клиент: " + ВыборкаПараметровУпаковки.Контрагент;
		
		ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = WebЦвета.СветлоЗеленый;
		ЭлементыФормы.НадписьКлиент.ЦветФона = WebЦвета.СветлоЗеленый;
		ЭлементыФормы.НадписьРегион.ЦветФона = WebЦвета.СветлоЗеленый;
		ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Истина;
		ЭлементыФормы.КнопкаЭтикетки.Доступность = Истина;
		
		//НажатьТаб(1);
		Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
		
		Возврат;
		#КонецОбласти
		
	ИначеЕсли Форма.ТипОперации = "Проверка паллета" Тогда
		
		#Область Проверка_паллета
		ЗаказыПутевогоЛиста = Новый ТаблицаЗначений;
		ЗаказыПутевогоЛиста.Колонки.Добавить("Ссылка");
		ЗаказыПутевогоЛиста.Колонки.Добавить("Заказ");
		ЗаказыПутевогоЛиста.Колонки.Добавить("Упаковок");
		ЗаказыПутевогоЛиста.Колонки.Добавить("Холод");
		ЗаказыПутевогоЛиста.Колонки.Добавить("ЧастьШК");
		ЗаказыПутевогоЛиста.Колонки.Добавить("Проверен");
		
		ВсегоЗаказовВПутевом = Документ.Документы.Количество();
		ЗапросПараметровПаллета = Новый Запрос;
		ЗапросПараметровПаллета.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыСклада.Документ КАК Заказ,
		|	ДокументыСклада.ВсегоУпаковок КАК ВсегоУпаковок,
		|	ДокументыСклада.ЕстьХолод КАК ЕстьХолод
		|ИЗ
		|	РегистрСведений.БС_СтатусыДокументов КАК ДокументыСклада
		|ГДЕ
		|	ДокументыСклада.Документ В
		|			(ВЫБРАТЬ
		|				ПутевыеЛистыДокументы.Документ КАК Документ
		|			ИЗ
		|				Справочник.БС_ПутевыеЛисты.Документы КАК ПутевыеЛистыДокументы
		|			ГДЕ
		|				ПутевыеЛистыДокументы.Ссылка = &Ссылка)
		|	И ДокументыСклада.Статус = ЗНАЧЕНИЕ(Перечисление.БС_СтатусыДокументов.Упакован)";
		ЗапросПараметровПаллета.УстановитьПараметр("Ссылка", Документ);
		ВыборкаПараметровПаллета = ЗапросПараметровПаллета.Выполнить().Выбрать();
		ВсегоЗаказовУпаковано = 0;
		ВсегоУпаковок = 0;
		ВсегоХолода = 0;
		Пока ВыборкаПараметровПаллета.Следующий() Цикл
			СтрокаЗаказа = ЗаказыПутевогоЛиста.Добавить();
			СтрокаЗаказа.Ссылка = ВыборкаПараметровПаллета.Заказ;
			СтрокаЗаказа.Заказ = "Заказ №"+ПолучитьКороткийНомерЗаказа(ВыборкаПараметровПаллета.Заказ.Номер);
			СтрокаЗаказа.Упаковок = ВыборкаПараметровПаллета.ВсегоУпаковок;
			СтрокаЗаказа.Холод = ВыборкаПараметровПаллета.ЕстьХолод;
			СтрокаЗаказа.ЧастьШК = Формат(Год(ВыборкаПараметровПаллета.Заказ.Дата),"ЧГ=0")+ПолучитьКороткийНомерЗаказа(ВыборкаПараметровПаллета.Заказ.Номер, Истина);
			СтрокаЗаказа.Проверен = Ложь;
			
			ВсегоЗаказовУпаковано = ВсегоЗаказовУпаковано + 1;
			ВсегоУпаковок = ВсегоУпаковок + ВыборкаПараметровПаллета.ВсегоУпаковок;
			ВсегоХолода = ВсегоХолода + ?(ВыборкаПараметровПаллета.ЕстьХолод, 1, 0);
		КонецЦикла;
		
		Форма.ИнформационнаяНадпись = 
		"Проверка паллета №"+ПолучитьКороткийНомерЗаказа(Документ.Код)+" от "+Формат(Документ.Дата,"ДФ=dd.MM.yyyy") + Символы.ПС
		+ Символы.ПС
		+ "Состоит из "+СтрокаСЧислом("нет заказов;%1 заказа;%1 заказов;%1 заказов;%1 заказов;%1 заказов", ВсегоЗаказовВПутевом, ВидЧисловогоЗначения.Количественное, "ЧН=") + "," + Символы.ПС
		+ СтрокаСЧислом("нет упакованных заказов;%1 заказ упакован;%1 заказа упаковано;%1 заказов упаковано;%1 заказов упаковано;%1 заказов упаковано", ВсегоЗаказовУпаковано, ВидЧисловогоЗначения.Количественное, "ЧН=")	+ Символы.ПС
		+ "Включает "+СтрокаСЧислом("%1 упаковок;%1 упаковку;%1 упаковки;%1 упаковок;%1 упаковок;%1 упаковок", ВсегоУпаковок, ВидЧисловогоЗначения.Количественное, "ЧН=") + " и "+ВсегоХолода+" холода";   
		
		Форма.НадписьРегион = "Направление: " + Документ.РегионДоставки;
		Форма.НадписьКлиент = "";
		
		ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = WebЦвета.СветлоЗеленый;
		ЭлементыФормы.НадписьКлиент.ЦветФона = WebЦвета.СветлоЗеленый;
		ЭлементыФормы.НадписьРегион.ЦветФона = WebЦвета.СветлоЗеленый;
		ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Истина;
		ЭлементыФормы.КнопкаЭтикетки.Доступность = Ложь;
		
		//НажатьТаб(1);
		Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
		
		Возврат;
		#КонецОбласти
		
	ИначеЕсли Форма.ТипОперации = "Упакован" Тогда	
		#Область Упакован
		ЗапросПараметровУпаковки = Новый Запрос;
		ЗапросПараметровУпаковки.Текст =
		"ВЫБРАТЬ
		|	СУММА(1) КАК ВсегоСтрок,
		|	СУММА(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент) КАК ВсегоЕдиниц,
		|	ЗаказПокупателяТовары.Ссылка.Контрагент КАК Контрагент,
		|	Регионы.ЖДСтанцияНазначения КАК Направление
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Регионы КАК Регионы
		|		ПО ЗаказПокупателяТовары.Ссылка.Контрагент.Регион = Регионы.Ссылка
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|	И ЗаказПокупателяТовары.Размещение = &Размещение
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяТовары.Ссылка.Контрагент,
		|	Регионы.ЖДСтанцияНазначения";
		ЗапросПараметровУпаковки.УстановитьПараметр("Ссылка", Документ);
		ЗапросПараметровУпаковки.УстановитьПараметр("Размещение", СкладДокумента);
		ВыборкаПараметровУпаковки = ЗапросПараметровУпаковки.Выполнить().Выбрать();
		ВыборкаПараметровУпаковки.Следующий();
		
		Форма.ВсегоСтрок = ВыборкаПараметровУпаковки.ВсегоСтрок;
		Форма.ВсегоЕдиниц = ВыборкаПараметровУпаковки.ВсегоЕдиниц;
		
		ДатаОтгрузки = Документ.ДатаОтгрузки;
		Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			ТекстОтгрузки = " (отгр.:"+Формат(ДатаОтгрузки,"ДФ=dd.MM.yyyy")+")";
		Иначе
			ТекстОтгрузки = " (нет даты отгрузки)";
		КонецЕсли;
		
		Форма.ИнформационнаяНадпись = 
		"Статус: УПАКОВАН"
		+ Символы.ПС + Символы.ПС + Документ + ТекстОтгрузки + Символы.ПС + Символы.ПС 
		+ "Всего наименований позиций:" + ВыборкаПараметровУпаковки.ВсегоСтрок + Символы.ПС
		+ "Всего единиц продукции:" + ВыборкаПараметровУпаковки.ВсегоЕдиниц;
		
		Форма.НадписьРегион = "Направление: " + ВыборкаПараметровУпаковки.Направление;
		Форма.НадписьКлиент = "Клиент: " + ВыборкаПараметровУпаковки.Контрагент;
		
		ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ЭлементыФормы.НадписьКлиент.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ЭлементыФормы.НадписьРегион.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Ложь;
		ЭлементыФормы.КнопкаЭтикетки.Доступность = Истина;
		
		//НажатьТаб(1);
		Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
		
		Возврат;
		#КонецОбласти
	КонецЕсли;	
КонецПроцедуры

Функция ЕстьРазрешениеНаПроверку()
	ЧтениеТаблицыРазрешенийНаПроверку();
	СтрокаСборщика = ТаблицаРазрешенийНаПроверку.Найти(Пользователь);
	Если СтрокаСборщика = Неопределено Тогда Возврат ИСТИНА КонецЕсли;
	ЗапретНаПроверку = СтрокаСборщика.ЗапретНаПроверку;
	Возврат не ЗапретНаПроверку;
КонецФункции

Функция ЕстьРазрешениеСборкиДТ()
	ЧтениеТаблицыРазрешенийНаСборкуДТ();
	СтрокаСборщика = ТаблицаРазрешенийСборкиДТ.Найти(Пользователь);
	Если СтрокаСборщика = Неопределено Тогда 
		Возврат ИСТИНА;
	Иначе
		Возврат СтрокаСборщика.Разрешено;
	КонецЕсли;
КонецФункции

Процедура АнализВведённогоШтрихкода(Форма) 
	
	#Область Описание
	// Поиск документа по штрихкоду
	// - Поиск по регистру штрихкодов
	// - Поиск по полю НомерЗаказаМаркет в регистре обмена заказами с сайтом
	// - Поиск по комментарию регистра обмена заказами с сайтом
	// - Поиск на сайте Озон
	// - Поиск на сайте СДЭК
	#КонецОбласти
	
	ШтрихКод = ШКДокумента;
	ШКДокумента = "";
	
	///*** Поиск документа в РС Штрихкоды	
	Владелец = ПолучитьВладельцаШтрихкода(ШтрихКод);
	Если Владелец = Неопределено Тогда
		
		///*** Поиск документа в РС Обмен заказами с сайтом
		Владелец = ПолучитьРеквизитРегистраОЗСПоНомеруЗаказаМаркет("Ссылка", ШтрихКод);
		Если Владелец = Неопределено Тогда
			
			// Ищем по шаблону: "barcode": "*2mH194H"
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	БС_ОбменЗаказамиССайтом.Ссылка КАК Ссылка
			|ИЗ
			|	РегистрСведений.БС_ОбменЗаказамиССайтом КАК БС_ОбменЗаказамиССайтом
			|ГДЕ
			|	БС_ОбменЗаказамиССайтом.WB_barcode = &WB_barcode";
			Запрос.УстановитьПараметр("WB_barcode", ШтрихКод);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда 
				
				// Проверить на сайте озона этот штрихкод. 
				// У них два штрихкода - верхний и нижний. Проверять в запросе можно любой. Должен вернуться заказ.				
				Документ = ЗапроситьЗаказОзонПоШтрихкоду(ШтрихКод);				
				Если Документ = Неопределено Тогда 
					
					// Надо проверить, может это заказ Озон через Сдэк
					// На этикетке нет штрихкодов, но можно преобразовать нижний в номер отправления Озон, убрав первые два символа					
					ВозможныйНомерОтправления = Прав(ШтрихКод, СтрДлина(ШтрихКод)-2);
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	БС_ОбменЗаказамиССайтом.Ссылка
					|ИЗ
					|	РегистрСведений.БС_ОбменЗаказамиССайтом КАК БС_ОбменЗаказамиССайтом
					|ГДЕ
					|	БС_ОбменЗаказамиССайтом.НомерОтправленияОзон = &НомерОтправленияОзон";
					Запрос.УстановитьПараметр("НомерОтправленияОзон", ВозможныйНомерОтправления);
					Результат = Запрос.Выполнить();
					Если Результат.Пустой() Тогда
						
						// Надо проверить на сайте СДЭК этот штрихкод, если пропикан верхний штрихкод с этикетки СДЭК
						// предварительно нужно удалить пять лидирующих символа, т.к. шрихкод в этом случает такой: [CDK]1360043968						
						ВозможныйШтрихКодСДЭК = Прав(ШтрихКод, СтрДлина(ШтрихКод)-5);					
						Документ = ПолучитьЗаказВБазеПоНомеруСДЭК(ВозможныйШтрихКодСДЭК);
						
						Если Документ = Неопределено Тогда
							
							// Проверить ШК на возвраты по API Яндекса по запросу https://api.partner.market.yandex.ru/campaigns/{campaignId}/returns
							
							Документ = ПолучитьЗаказПоЗапросуВозвратовЯндекс(ШтрихКод);
							
							//УДАЛИТЬ
							//Иначе
							//	Выборка = Результат.Выбрать();
							//	Выборка.Следующий();
							//	Документ = Выборка.Ссылка;
						КонецЕсли;				
					КонецЕсли;				
				КонецЕсли;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Документ = Выборка.Ссылка;		
			КонецЕсли;
		Иначе
			Документ = Владелец;
		КонецЕсли;
		
		Если Документ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОпределитьСкладДокумента(Документ);
		РаздельнаяСборка = СкладДокумента = СкладГурьянова;
		
		мСтатусДокумента = ПолучитьСтатусДокумента(Документ);
		Если мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Проверен или мСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаУпаковке Тогда
			Форма.ТипОперации = "Упаковка";
		ИначеЕсли мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Упакован Тогда
			Форма.ТипОперации = "Упакован";				
		ИначеЕсли мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Отменен или мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Выполнен Тогда
			ДатаСтатуса = ПолучитьДатуПоследнегоСтатуса(Документ);
			Если ДатаСтатуса < НачалоДня(ТекущаяДата()) Тогда
				Форма.ТипОперации = "Возврат";
			Иначе						
				мПредупреждение("Этот документ отменён.");
				Возврат;
			КонецЕсли;
		Иначе 
			Форма.ТипОперации = "Сборка";
		КонецЕсли;
		
		//СписокМестДляЗапроса = Новый СписокЗначений;
		//СписокМестДляЗапроса.ЗагрузитьЗначения(ПолучитьМестаДокументаПоЗоне());
	Иначе 
		Если ТипЗнч(Владелец) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			ОпределитьСкладДокумента(Владелец);
			РаздельнаяСборка = СкладДокумента = СкладГурьянова;
			
			мСтатусДокумента = ПолучитьСтатусДокумента(Владелец);
			Если мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Проверен или мСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаУпаковке Тогда
				Форма.ТипОперации = "Упаковка";
			ИначеЕсли мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Упакован Тогда
				Форма.ТипОперации = "Упакован";				
			ИначеЕсли мСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляСборки или мСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаСборке Тогда
				Форма.ТипОперации = "Сборка";
			ИначеЕсли мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Собран Тогда
				Форма.ТипОперации = "Проверка";
			Иначе
				Форма.ТипОперации = "Упаковка";
			КонецЕсли;
			Документ = Владелец;
		ИначеЕсли ТипЗнч(Владелец) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Форма.ТипОперации = "Приемка";
			Документ = Владелец;
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.БС_ПутевыеЛисты") Тогда
			Форма.ТипОперации = "Проверка паллета";
			Документ = Владелец;
		ИначеЕсли ТипЗнч(Владелец) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			мСтатусДокумента = ПолучитьСтатусДокумента(Владелец);
			Если мСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляСборки 
				или мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Собран 
				или мСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаПроверке Тогда
				ОпределитьСкладДокумента(Владелец);
			Иначе
				СкладДокумента = Владелец.Заказчик;
				Если мСтатусДокумента <> Перечисления.БС_СтатусыДокументов.Упакован Тогда
					мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Упакован;
					ИзменитьСтатусДокумента(Владелец, мСтатусДокумента, Неопределено, ТекущаяДата(), "Автоматически добавлен");
				КонецЕсли;
			КонецЕсли;
			
			РаздельнаяСборка = СкладДокумента = СкладГурьянова;
			
			Если мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Упакован Тогда
				Форма.ТипОперации = "Приемка";
			ИначеЕсли мСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляСборки или мСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаСборке Тогда
				Форма.ТипОперации = "Сборка";
			ИначеЕсли мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Собран или мСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаПроверке Тогда
				Форма.ТипОперации = "Проверка";
			ИначеЕсли мСтатусДокумента = Перечисления.БС_СтатусыДокументов.Проверен Тогда
				Форма.ТипОперации = "Упаковка";
			Иначе
				мПредупреждение("Не верный статус документа - "+мСтатусДокумента);
			КонецЕсли;
			Если ЗначениеЗаполнено(Форма.ТипОперации) Тогда
				Документ = Владелец;
			КонецЕсли;
		КонецЕсли;
		
		//СписокМестДляЗапроса = Новый СписокЗначений;
		//СписокМестДляЗапроса.ЗагрузитьЗначения(ПолучитьМестаДокументаПоЗоне(Зона));
	КонецЕсли;
	
	Если Зона = Неопределено Тогда
		Если СкладДокумента = СкладГурьянова Тогда
			Зона = "1";
		ИначеЕсли СкладДокумента = СкладНоворязанка Тогда
			Зона = "2";
		Иначе
			Зона = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЗаказПоЗапросуВозвратовЯндекс(ШтрихКод)
	Возврат Неопределено;
КонецФункции

Функция ВЗаказеЕстьДробныеКоличества(ЗаказПокупателя)
	ЗапросДробныхЧисел = Новый Запрос;
	ЗапросДробныхЧисел.Текст =
	"ВЫБРАТЬ
	|	СУММА((ВЫРАЗИТЬ(ЗаказПокупателяТовары.Количество КАК ЧИСЛО(15, 0))) - ЗаказПокупателяТовары.Количество) КАК ДробноеКоличество
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка";
	ЗапросДробныхЧисел.УстановитьПараметр("Ссылка", ЗаказПокупателя);
	Выборка = ЗапросДробныхЧисел.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ДробноеКоличество <> 0;
КонецФункции

Процедура ФормаВыбораДокумента_КнопкаВзятьДокументНажатие(Форма) Экспорт
	ТипОперации = Форма.ТипОперации;
	
	Если ТипОперации = "Сборка" ИЛИ ТипОперации = "Проверка" Тогда
		Если ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляСборки
			или ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаСборке
			или ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.ФинансовыеПроблемыОтгрузкаРазрешена
			или ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.ФинансовыхПроблемНет Тогда 
			
			ДокументНаСборку(Форма);
			
		ИначеЕсли ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.Собран 
			или ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаПроверке Тогда
			
			ДокументНаПроверку(Форма);
			
		КонецЕсли;
	ИначеЕсли ТипОперации = "Приемка" Тогда
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Если ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляПриемки 
				или ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляСборки
				или ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаПриемке Тогда
				ДокументНаПриёмку(Форма);
			КонецЕсли; 
			Если Форма.ВводДоступен() Тогда
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(1,"Да");
				СписокКнопок.Добавить(2,"Нет");
				ТекстВопроса = "Назначить места сейчас?";
				Если мВопрос(ТекстВопроса, СписокКнопок) = 1 Тогда
					НазначениеМест(Форма);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.Упакован Тогда
				ДокументНаПриёмку(Форма);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипОперации = "Возврат" Тогда
		ДокументНаВозврат(Форма);
	ИначеЕсли ТипОперации = "Упаковка" Тогда
		ДокументНаУпаковку(Форма);
	ИначеЕсли ТипОперации = "Проверка паллета" Тогда
		ПроверкаПаллета(Форма);
	КонецЕсли;
КонецПроцедуры

Процедура ФормаВыбораДокумента_КнопкаЭтикеткиНажатие(Форма) Экспорт
	ФормаПечатиЭтикеток_Наименование = ?(ТипЭкрана = 2, "ФормаПечатиЭтикеток_480х800", ?(ТипЭкрана = 3, "ФормаПечатиЭтикеток_1280х768", "ФормаПечатиЭтикеток"));
	ФормаПечатиЭтикеток = ПолучитьФорму(ФормаПечатиЭтикеток_Наименование);
	ФормаПечатиЭтикеток.ДокументЗаказ = Документ;
	ФормаПечатиЭтикеток.ОткрытьМодально();
	Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШКДокумента;
КонецПроцедуры

Процедура ФормаВыбораДокумента_КнопкаВернутьсяНажатие(Форма) Экспорт
	Форма.Закрыть();
КонецПроцедуры

Процедура ДокументНаПроверку(Форма)
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	//Изменение статуса документа
	Если ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.Собран Тогда
		ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаПроверке;
		ИзменитьСтатусДокумента(Документ, ТекущийСтатусДокумента, Пользователь, ТекущаяДата());
	КонецЕсли;
	
	ФормаПроверкиТовара_Название = ?(ТипЭкрана = 2, "ФормаПроверкиТовара_480х800", ?(ТипЭкрана = 3, "ФормаПроверкиТовара_1280х768", "ФормаПроверкиТовара"));
	ФормаПроверкиТовара = ПолучитьФорму(ФормаПроверкиТовара_Название);
	Результат = ФормаПроверкиТовара.ОткрытьМодально();
	
	Если Результат = 0 Тогда 
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СкладСоСтолами = СкладДокумента = СкладГурьянова;
		Иначе
			СкладСоСтолами = Ложь;
		КонецЕсли;
		Если СкладСоСтолами Тогда
			ФормаСканированияСтола_Название = ?(ТипЭкрана = 3, "ФормаСканированияСтола_1280х768", "ФормаСканированияСтола");
			ФормаСканированияСтола = ПолучитьФорму(ФормаСканированияСтола_Название);
			ФормаСканированияСтола.ШтрихКод = "";
			ВозвратФормыСканированияСтола = ФормаСканированияСтола.ОткрытьМодально();
			Если ВозвратФормыСканированияСтола <> Неопределено Тогда
				ПревьюКомментария = "Стол "+ВозвратФормыСканированияСтола.Наименование;
			Иначе
				ПревьюКомментария = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// Проверить не отменён ли заказ во время сборки
		СтатусВБазе = ПолучитьСтатусДокумента(Документ);
		Если СтатусВБазе = Перечисления.БС_СтатусыДокументов.НаПроверке Тогда
			ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.Проверен;
			ДатаУстановкиСтатуса = ТекущаяДата();
			ИзменитьСтатусДокумента(Документ, ТекущийСтатусДокумента, Пользователь, ДатаУстановкиСтатуса, ПревьюКомментария);
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				// Если это Яндекс, то установить статус Упакован  
				Если Документ.Контрагент = КонтрагентЯндекс или Документ.Контрагент = КонтрагентОзон или Документ.Контрагент = КонтрагентWB Тогда 
					ИзменитьСтатусДокумента(Документ, Перечисления.БС_СтатусыДокументов.Упакован, Неопределено, ДатаУстановкиСтатуса+1, ПревьюКомментария);
				КонецЕсли; 
			КонецЕсли;
		Иначе 
			мПредупреждение("Внимание! Документ отменён. Необходимо вернуть товар. Проверка будет учтена в з/п.");
		КонецЕсли;
	ИначеЕсли Результат = 1 Тогда
		// Проверить не отменён ли заказ во время проверки
		СтатусВБазе = ПолучитьСтатусДокумента(Документ);
		Если СтатусВБазе = Перечисления.БС_СтатусыДокументов.НаПроверке Тогда
			УдалитьПоследнийСтатус(Документ);
		КонецЕсли;
	Иначе
		Форма.Закрыть();
	КонецЕсли;
	
	Форма.ИнформационнаяНадпись = "Статус:""" + ТекущийСтатусДокумента + """" + Символы.ПС + Символы.ПС + Документ + Символы.ПС + Символы.ПС + ?(Результат = 0, "Документ проверен", "Проверка отменена"); 
	
	ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьКлиент.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьРегион.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Ложь;
	ЭлементыФормы.КнопкаЭтикетки.Доступность = Ложь;
	
	Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
КонецПроцедуры

Процедура ДокументНаСборку(Форма)
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗапросДокументаРозницы = Новый Запрос;
		ЗапросДокументаРозницы.Текст =
		"ВЫБРАТЬ
		|	КатегорииОбъектов.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.Категория = &КатегорияРозница
		|	И КатегорииОбъектов.Объект = &Объект";
		ЗапросДокументаРозницы.УстановитьПараметр("Объект", Документ.Контрагент);
		ЗапросДокументаРозницы.УстановитьПараметр("КатегорияРозница", Справочники.КатегорииОбъектов.НайтиПоКоду("000000118")); // Категория "Розничный. Для отчётов."
		Выборка = ЗапросДокументаРозницы.Выполнить().Выбрать();
		ДокументРозницы = Выборка.Следующий();
	Иначе
		ДокументРозницы = Ложь;
	КонецЕсли;
	
	ЧтениеТаблицыСоответствияМестХранения();	
	СоответствиеМестХранения = Новый Соответствие;
	Для Каждого СтрокаСоответствия Из ТаблицаСоответствияМестХранения Цикл
		Если СтрокаСоответствия.Склад = СкладДокумента Тогда
			СоответствиеМестХранения.Вставить(СтрокаСоответствия.МестоХранения, СтрокаСоответствия.Сортировка);
		КонецЕсли;
	КонецЦикла;
	
	//Создание или очистка таблицы Товары
	Товар.Колонки.Очистить();
	Товар.Колонки.Добавить("Номенклатура");
	Товар.Колонки.Добавить("ХарактеристикаНоменклатуры");
	Товар.Колонки.Добавить("СрокГодности");
	Товар.Колонки.Добавить("Наименование");
	Товар.Колонки.Добавить("Артикул");
	Товар.Колонки.Добавить("МестоХранения");
	Товар.Колонки.Добавить("Сортировка");
	Товар.Колонки.Добавить("Отсканирован");
	Товар.Колонки.Добавить("ЕстьШК");
	Товар.Колонки.Добавить("Количество");
	Товар.Колонки.Добавить("Единица");
	Товар.Колонки.Добавить("СрокПлохой");
	
	//Заполнение таблицы товары
	ЗапросНоменклатуры = Новый Запрос;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗапросНоменклатуры.Текст =
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяТовары.Номенклатура.Наименование КАК Наименование,
		|	рсШтрихКоды.Штрихкод КАК ЕстьШтрихКод,
		|	СУММА(ЗаказПокупателяТовары.Количество * ЗаказПокупателяТовары.Коэффициент) КАК Количество,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяТовары.Номенклатура.Артикул КАК Артикул,
		|	ЕСТЬNULL(рсМестаХранения.МестоХранения, ""без места"") КАК МестоХранения,
		|	спрХарактеристики.Наименование КАК Характеристика,
		|	ВЫБОР
		|		КОГДА рсНоменклатураПоТСД.Номенклатура ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отсканирован,
		|	ЗапросСрокаГодности.Значение КАК СрокГодности,
		|	спрХарактеристики.Ссылка КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод,
		|			Штрихкоды.Владелец КАК Владелец,
		|			Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|		ИЗ
		|			РегистрСведений.Штрихкоды КАК Штрихкоды
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Штрихкоды.Владелец,
		|			Штрихкоды.ЕдиницаИзмерения) КАК рсШтрихКоды
		|		ПО ЗаказПокупателяТовары.Номенклатура = рсШтрихКоды.Владелец
		|			И ЗаказПокупателяТовары.Номенклатура.ЕдиницаХраненияОстатков = рсШтрихКоды.ЕдиницаИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МестаХраненияНоменклатуры.Номенклатура КАК Номенклатура,
		|			МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
		|		ИЗ
		|			РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|		ГДЕ
		|			МестаХраненияНоменклатуры.Склад = &Склад
		|			И МестаХраненияНоменклатуры.Приоритет = 0) КАК рсМестаХранения
		|		ПО ЗаказПокупателяТовары.Номенклатура = рсМестаХранения.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ХарактеристикиНоменклатуры.Наименование КАК Наименование,
		|			ХарактеристикиНоменклатуры.Ссылка КАК Ссылка
		|		ИЗ
		|			Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры) КАК спрХарактеристики
		|		ПО ЗаказПокупателяТовары.ХарактеристикаНоменклатуры = спрХарактеристики.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НоменклатураПоТСД.Номенклатура КАК Номенклатура,
		|			НоменклатураПоТСД.Документ КАК Документ
		|		ИЗ
		|			РегистрСведений.БС_НоменклатураПоТСД КАК НоменклатураПоТСД
		|		ГДЕ
		|			НоменклатураПоТСД.Операция = ""Сборка""
		|			И НоменклатураПоТСД.Документ = &Ссылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			НоменклатураПоТСД.Документ,
		|			НоменклатураПоТСД.Номенклатура) КАК рсНоменклатураПоТСД
		|		ПО ЗаказПокупателяТовары.Номенклатура = рсНоменклатураПоТСД.Номенклатура
		|			И ЗаказПокупателяТовары.Ссылка = рсНоменклатураПоТСД.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект КАК Объект,
		|			ЗначенияСвойствОбъектов.Значение КАК Значение
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство = &СвойствоСрокГодности) КАК ЗапросСрокаГодности
		|		ПО ЗаказПокупателяТовары.ХарактеристикаНоменклатуры = ЗапросСрокаГодности.Объект
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Ссылка
		|	И рсМестаХранения.МестоХранения В(&МестаХранения)
		|	И ЗаказПокупателяТовары.Размещение = &Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.ЕдиницаИзмерения,
		|	ЗаказПокупателяТовары.Номенклатура.Наименование,
		|	ЗаказПокупателяТовары.Номенклатура.Артикул,
		|	спрХарактеристики.Наименование,
		|	ВЫБОР
		|		КОГДА рсНоменклатураПоТСД.Номенклатура ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ЗапросСрокаГодности.Значение,
		|	спрХарактеристики.Ссылка,
		|	рсШтрихКоды.Штрихкод,
		|	ЕСТЬNULL(рсМестаХранения.МестоХранения, ""без места"")"; 
		ЗапросНоменклатуры.УстановитьПараметр("Склад", СкладДокумента);
		ЗапросНоменклатуры.УстановитьПараметр("Ссылка", Документ);
		ЗапросНоменклатуры.УстановитьПараметр("СвойствоСрокГодности", СвойствоСрокГодности);
		//Если РаздельнаяСборка Тогда
		//	ЗапросНоменклатуры.УстановитьПараметр("МестаХранения", СписокМестДляЗапроса);
		//Иначе
		ЗапросНоменклатуры.Текст = СтрЗаменить(ЗапросНоменклатуры.Текст, "рсМестаХранения.МестоХранения В(&МестаХранения)", "ИСТИНА");
		//КонецЕсли;
	Иначе // Внутренний заказ
		ЗапросНоменклатуры.Текст =
		"ВЫБРАТЬ
		|	ВнутреннийЗаказТовары.Номенклатура КАК Номенклатура,
		|	ВнутреннийЗаказТовары.Номенклатура.Наименование КАК Наименование,
		|	ЗапросШК.Штрихкод КАК ЕстьШтрихкод,
		|	ВнутреннийЗаказТовары.Количество * ВнутреннийЗаказТовары.Коэффициент КАК Количество,
		|	ВнутреннийЗаказТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВнутреннийЗаказТовары.Номенклатура.Артикул КАК Артикул,
		|	ЗапросМестаХранения.МестоХранения КАК МестоХранения,
		|	ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры.Наименование КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ЗапросУжеСканировалась.Номенклатура ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отсканирован,
		|	ЗапросДатыСрока.Значение КАК СрокГодности,
		|	ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ИЗ
		|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Штрихкоды.Владелец КАК Владелец,
		|			Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|			МАКСИМУМ(Штрихкоды.Штрихкод) КАК Штрихкод
		|		ИЗ
		|			РегистрСведений.Штрихкоды КАК Штрихкоды
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Штрихкоды.Владелец,
		|			Штрихкоды.ЕдиницаИзмерения) КАК ЗапросШК
		|		ПО ВнутреннийЗаказТовары.Номенклатура = ЗапросШК.Владелец
		|			И ВнутреннийЗаказТовары.ЕдиницаИзмерения = ЗапросШК.ЕдиницаИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МестаХраненияНоменклатуры.Номенклатура КАК Номенклатура,
		|			МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения,
		|			МИНИМУМ(МестаХраненияНоменклатуры.Приоритет) КАК Приоритет
		|		ИЗ
		|			РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|		ГДЕ
		|			МестаХраненияНоменклатуры.Склад = &Склад
		|		
		|		СГРУППИРОВАТЬ ПО
		|			МестаХраненияНоменклатуры.Номенклатура,
		|			МестаХраненияНоменклатуры.МестоХранения) КАК ЗапросМестаХранения
		|		ПО ВнутреннийЗаказТовары.Номенклатура = ЗапросМестаХранения.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Объект КАК Объект,
		|			ЗначенияСвойствОбъектов.Значение КАК Значение
		|		ИЗ
		|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ГДЕ
		|			ЗначенияСвойствОбъектов.Свойство = &СвойствоСрокГодности) КАК ЗапросДатыСрока
		|		ПО ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры = ЗапросДатыСрока.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			БС_НоменклатураПоТСД.Номенклатура КАК Номенклатура
		|		ИЗ
		|			РегистрСведений.БС_НоменклатураПоТСД КАК БС_НоменклатураПоТСД
		|		ГДЕ
		|			БС_НоменклатураПоТСД.Документ = &Ссылка
		|			И БС_НоменклатураПоТСД.Операция = &Операция) КАК ЗапросУжеСканировалась
		|		ПО ВнутреннийЗаказТовары.Номенклатура = ЗапросУжеСканировалась.Номенклатура
		|ГДЕ
		|	ВнутреннийЗаказТовары.Ссылка = &Ссылка";
		ЗапросНоменклатуры.УстановитьПараметр("Ссылка", Документ);
		ЗапросНоменклатуры.УстановитьПараметр("Операция", "Сборка");
		ЗапросНоменклатуры.УстановитьПараметр("СвойствоСрокГодности", СвойствоСрокГодности);
		ЗапросНоменклатуры.УстановитьПараметр("Склад", СкладДокумента);
	КонецЕсли;
	
	Выборка = ЗапросНоменклатуры.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товар.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.СрокГодности = Выборка.СрокГодности;
		НоваяСтрока.Наименование = Выборка.Наименование + ?(ЗначениеЗаполнено(Выборка.Характеристика), " ("+Выборка.Характеристика+")", "");
		НоваяСтрока.Артикул = Выборка.Артикул;
		НоваяСтрока.Отсканирован = Выборка.Отсканирован;
		НоваяСтрока.ЕстьШК = ЗначениеЗаполнено(Выборка.ЕстьШтрихКод);
		НоваяСтрока.Количество = Выборка.Количество;
		НоваяСтрока.Единица = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.МестоХранения = ПолучитьПолныйПутьМестаХранения(Выборка.МестоХранения);
		Сортировка = СоответствиеМестХранения.Получить(Выборка.МестоХранения);
		НоваяСтрока.Сортировка = ?(ЗначениеЗаполнено(Сортировка), Сортировка, 999);
		НоваяСтрока.СрокПлохой = Ложь;
		Если Выборка.СрокГодности <> NULL Тогда
			// Проверка на хороший (чёрный) или плохой (красный) срок годности
			Если ТипЗнч(Выборка.СрокГодности) = Тип("Дата") Тогда
				ДатаДокумента = НачалоДня(Документ.Дата);
				МЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
				МЗ.Объект = Выборка.Номенклатура;
				МЗ.Свойство = СвойствоПредупреждатьСрок;
				МЗ.Прочитать();
				Если МЗ.Выбран() Тогда
					ПредупреждатьЗа = МЗ.Значение;
				Иначе
					ПредупреждатьЗа = 6;
				КонецЕсли;
				ПредельныйСрок = ДобавитьМесяц(ДатаДокумента, ПредупреждатьЗа/2);
				Если ПредельныйСрок > Выборка.СрокГодности Тогда
					НоваяСтрока.СрокПлохой = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Товар.Сортировать("Сортировка, Наименование");
	
	//Изменение статуса документа
	ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаСборке;
	ИзменитьСтатусДокумента(Документ, ТекущийСтатусДокумента, Пользователь, ТекущаяДата());
	
	//Открытие формы сканирования товара
	ФормаСканированияТовара_Наименование = ?(ТипЭкрана = 2, "ФормаСканированияТовара_480х800", ?(ТипЭкрана = 3, "ФормаСканированияТовара_1280х768", "ФормаСканированияТовара"));
	ФормаСканированияТовара = ПолучитьФорму(ФормаСканированияТовара_Наименование);
	Результат = ФормаСканированияТовара.ОткрытьМодально();	
	
	Если Результат = 0 Тогда
		ДокументСобран = Истина;
		Если РаздельнаяСборка Тогда
			// Проверить: есть ли в заказе позиции, которых нет в регистре
			ЗапросОтсутствующихПозиций = Новый Запрос;
			ЗапросОтсутствующихПозиций.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|			НоменклатураПоТСД.Номенклатура КАК Номенклатура
			|		ИЗ
			|			РегистрСведений.БС_НоменклатураПоТСД КАК НоменклатураПоТСД
			|		ГДЕ
			|			НоменклатураПоТСД.Документ = &Ссылка
			|			И НоменклатураПоТСД.Операция = ""Сборка"") КАК рсНоменклатураПоТСД
			|		ПО ЗаказПокупателяТовары.Номенклатура = рсНоменклатураПоТСД.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
			|		ПО ЗаказПокупателяТовары.Ссылка = МестаХраненияНоменклатуры.Номенклатура
			|ГДЕ
			|	ЗаказПокупателяТовары.Ссылка = &Ссылка
			|	И рсНоменклатураПоТСД.Номенклатура ЕСТЬ NULL
			|	И МестаХраненияНоменклатуры.МестоХранения В(&МестаХранения)";
			ЗапросОтсутствующихПозиций.УстановитьПараметр("Ссылка", Документ); 
			Если СкладИмеетМестаХранения(СкладДокумента) Тогда
				ЗапросОтсутствующихПозиций.УстановитьПараметр("МестаХранения", СписокМестДляЗапроса); 
			Иначе
				ЗапросОтсутствующихПозиций.Текст = СтрЗаменить(ЗапросОтсутствующихПозиций.Текст, "МестаХраненияНоменклатуры.МестоХранения В(&МестаХранения)", "ИСТИНА");
			КонецЕсли;
			Результат = ЗапросОтсутствующихПозиций.Выполнить();
			ДокументСобран = Результат.Пустой();
		КонецЕсли;
		Если ДокументСобран Тогда
			// Проверить не отменён ли заказ во время сборки
			СтатусВБазе = ПолучитьСтатусДокумента(Документ);
			Если СтатусВБазе = Перечисления.БС_СтатусыДокументов.НаСборке Тогда
				ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.Собран;
				ИзменитьСтатусДокумента(Документ, ТекущийСтатусДокумента, Пользователь, ТекущаяДата()); //Добавить статус Собран 
			Иначе 
				мПредупреждение("Внимание! Документ отменён. Необходимо вернуть товар. Сборка будет учтена в з/п.");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Результат = 1 Тогда
		// Проверить не отменён ли заказ во время сборки
		СтатусВБазе = ПолучитьСтатусДокумента(Документ);
		Если СтатусВБазе = Перечисления.БС_СтатусыДокументов.НаСборке Тогда
			ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.ГотовДляСборки;
			УдалитьДвиженияДокументаВРСНоменклатураПоТСД(Документ, "Сборка");
			ИзменитьСтатусДокумента(Документ, ТекущийСтатусДокумента, Пользователь, ТекущаяДата()); //Вернуть статус Готов для сборки 
		Иначе 
			мПредупреждение("Внимание! Документ отменён. Необходимо вернуть товар. Сборка будет учтена в з/п.");
		КонецЕсли;
	Иначе
		Форма.Закрыть();
	КонецЕсли;
	
	Форма.ИнформационнаяНадпись = "Статус:""" + ТекущийСтатусДокумента + """" + Символы.ПС + Символы.ПС + Документ + Символы.ПС + Символы.ПС + ?(Результат = 0, "Документ полностью собран", "Сборка документа отменена"); 
	
	ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьКлиент.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьРегион.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Ложь;
	ЭлементыФормы.КнопкаЭтикетки.Доступность = Ложь;
	
	Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента; 
	
	ПроверкаВерсии();
КонецПроцедуры

Процедура ДокументНаПриёмку(Форма)
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	//Создание или очистка таблицы Товары
	Товар.Колонки.Очистить();
	Товар.Колонки.Добавить("Номенклатура");
	Товар.Колонки.Добавить("Наименование");
	Товар.Колонки.Добавить("Артикул");
	Товар.Колонки.Добавить("Место");
	Товар.Колонки.Добавить("Отсканирован");
	Товар.Колонки.Добавить("ЕстьРасхождения");
	Товар.Колонки.Добавить("ЕстьШК");
	Товар.Колонки.Добавить("Количество",,"Кол-во");
	Товар.Колонки.Добавить("Единица");
	Товар.Колонки.Добавить("Сортировка");
	
	//Заполнение таблицы товары
	ЗапросНоменклатуры = Новый Запрос;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗапросНоменклатуры.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварЗаказа
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщикуТовары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриёмкаТовара.Номенклатура КАК Номенклатура,
		|	СУММА(ПриёмкаТовара.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварРегистраПриемки
		|ИЗ
		|	РегистрСведений.БС_ПриемкаТовара КАК ПриёмкаТовара
		|ГДЕ
		|	ПриёмкаТовара.Документ = &Документ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриёмкаТовара.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварЗаказа.Номенклатура КАК Номенклатура,
		|	ТоварЗаказа.Количество КАК Количество,
		|	ЕСТЬNULL(ТоварРегистраПриемки.Количество <> ТоварЗаказа.Количество, ЛОЖЬ) КАК ЕстьРасхождения,
		|	ВЫБОР
		|		КОГДА ТоварРегистраПриемки.Номенклатура ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отсканирован,
		|	спрНоменклатура.Артикул КАК Артикул,
		|	спрНоменклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	спрНоменклатура.Наименование КАК Наименование
		|ИЗ
		|	ТоварЗаказа КАК ТоварЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварРегистраПриемки КАК ТоварРегистраПриемки
		|		ПО ТоварЗаказа.Номенклатура = ТоварРегистраПриемки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО ТоварЗаказа.Номенклатура = спрНоменклатура.Ссылка";
	Иначе 
		ЗапросНоменклатуры.Текст =  
		"ВЫБРАТЬ
		|	ВнутреннийЗаказТовары.Номенклатура КАК Номенклатура,
		|	ВнутреннийЗаказТовары.Количество КАК Количество,
		|	ЕСТЬNULL(ВнутреннийЗаказТовары.Количество <> ЗапросРегистраПриемки.Количество, ЛОЖЬ) КАК ЕстьРасхождения,
		|	ВЫБОР
		|		КОГДА ЗапросРегистраПриемки.Номенклатура ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отсканирован,
		|	ВнутреннийЗаказТовары.Номенклатура.Артикул КАК Артикул,
		|	ВнутреннийЗаказТовары.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ВнутреннийЗаказТовары.Номенклатура.Наименование КАК Наименование
		|ИЗ
		|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			БС_ПриемкаТовара.Документ КАК Документ,
		|			БС_ПриемкаТовара.Номенклатура КАК Номенклатура,
		|			СУММА(БС_ПриемкаТовара.Количество) КАК Количество
		|		ИЗ
		|			РегистрСведений.БС_ПриемкаТовара КАК БС_ПриемкаТовара
		|		
		|		СГРУППИРОВАТЬ ПО
		|			БС_ПриемкаТовара.Документ,
		|			БС_ПриемкаТовара.Номенклатура) КАК ЗапросРегистраПриемки
		|		ПО ВнутреннийЗаказТовары.Ссылка = ЗапросРегистраПриемки.Документ
		|			И ВнутреннийЗаказТовары.Номенклатура = ЗапросРегистраПриемки.Номенклатура
		|ГДЕ
		|	ВнутреннийЗаказТовары.Ссылка = &Документ";
	КонецЕсли;
	
	ЗапросНоменклатуры.УстановитьПараметр("Документ", Документ);
	Выборка = ЗапросНоменклатуры.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товар.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Наименование = Выборка.Наименование;
		НоваяСтрока.Артикул = Выборка.Артикул;
		НоваяСтрока.Отсканирован = Выборка.Отсканирован;
		НоваяСтрока.ЕстьРасхождения = ?(Выборка.Отсканирован, Выборка.ЕстьРасхождения, Ложь);
		НоваяСтрока.Количество = Выборка.Количество;
		НоваяСтрока.Единица = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.Сортировка = ?(Выборка.Отсканирован,?(Выборка.ЕстьРасхождения,1,2),0);
	КонецЦикла;
	
	//Изменение статуса документа
	ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.НаПриемке;
	ИзменитьСтатусДокумента(Документ, ТекущийСтатусДокумента, Пользователь, ТекущаяДата());
	
	//Открытие формы сканирования товара
	ФормаПриёмки_Название = ?(ТипЭкрана = 2, "ФормаПриёмки_480х800", ?(ТипЭкрана = 3, "ФормаПриёмки_1280х768", "ФормаПриёмки"));
	ФормаПриёмки = ПолучитьФорму(ФормаПриёмки_Название);
	Результат = ФормаПриёмки.ОткрытьМодально();	
	
	Если Результат = 0 или Результат = 3 Тогда
		//Документ полностью собран
		ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.Принят;
		ИзменитьСтатусДокумента(Документ, ТекущийСтатусДокумента, Пользователь, ТекущаяДата()); //Добавить статус Собран
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			//Составить отчёт по разногласиям заказа поставщика и приёмки
			СоставитьОтчетРазногласийЗаказаПоставщикаИПриемки();
			
			//Изменить исходный документ Заказ поставщику по данным от терминала
			ЗаполнитьТабличнуюЧастьЗаказаПоставщику();
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			СоставитьОтчетРазногласийЗаказаПоставщикаИПриемки();			
			ЗаполнитьТабличнуюЧастьВнутреннегоЗаказа();
		КонецЕсли;
		
	ИначеЕсли Результат = 1 Тогда
		ТекущийСтатусДокумента = ?(ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику"), Перечисления.БС_СтатусыДокументов.ГотовДляПриемки,  Перечисления.БС_СтатусыДокументов.Упакован);
		ИзменитьСтатусДокумента(Документ, ТекущийСтатусДокумента, Пользователь, ТекущаяДата()); //Вернуть статус Готов для сборки
	Иначе
		Форма.Закрыть();
	КонецЕсли;
	
	Форма.ИнформационнаяНадпись = "Статус:""" + ТекущийСтатусДокумента + """" + Символы.ПС + Символы.ПС + Документ + Символы.ПС + Символы.ПС + ?(Результат = 0, "Документ полностью собран", "Сборка документа отменена"); 
	
	ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьКлиент.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьРегион.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Ложь;
	ЭлементыФормы.КнопкаЭтикетки.Доступность = Ложь;
	
	Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
	
	ПроверкаВерсии();
КонецПроцедуры

Процедура НазначениеМест(Форма)
	ТаблицаМест = Новый ТаблицаЗначений;
	ТаблицаМест.Колонки.Добавить("Номенклатура");
	ТаблицаМест.Колонки.Добавить("Место");
	ТаблицаМест.Колонки.Добавить("ПредставлениеМеста",,"Место");
	Для Каждого СтрокаТовара Из Документ.Товары Цикл         
		СтрокаМеста = ТаблицаМест.Найти(СтрокаТовара.Номенклатура, "Номенклатура");
		НоваяСтрока = ТаблицаМест.Добавить();
		НоваяСтрока.Номенклатура = СтрокаТовара.Номенклатура;
		НоваяСтрока.Место = ПолучитьМестоХранения(СтрокаТовара.Номенклатура,,СкладДокумента);
		НоваяСтрока.ПредставлениеМеста = ПолучитьПолныйПутьМестаХранения(НоваяСтрока.Место);
	КонецЦикла;
	
	//Открытие формы подбора места хранения
	ФормаНазначенияМест_Название = ?(ТипЭкрана = 3, "ФормаНазначенияМест_1280х768", "ФормаНазначенияМест");
	ФормаНазначенияМест = ПолучитьФорму(ФормаНазначенияМест_Название);
	ФормаНазначенияМест.ТабличноеПолеМест = ТаблицаМест;
	Результат = ФормаНазначенияМест.ОткрытьМодально();
КонецПроцедуры                                                                              

Процедура ДокументНаВозврат(Форма)
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	//Создание или очистка таблицы Товары
	Товар.Колонки.Очистить();
	Товар.Колонки.Добавить("НомерСтроки");
	Товар.Колонки.Добавить("Номенклатура");
	Товар.Колонки.Добавить("ХарактеристикаНоменклатуры");
	Товар.Колонки.Добавить("Наименование");
	Товар.Колонки.Добавить("Артикул");
	Товар.Колонки.Добавить("Отсканирован");
	Товар.Колонки.Добавить("Количество",,"Кол-во");
	Товар.Колонки.Добавить("Единица");
	
	//Заполнение таблицы товары
	ЗапросНоменклатуры = Новый Запрос;
	ЗапросНоменклатуры.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателяТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Номенклатура.Наименование КАК Наименование,
	|	ЗаказПокупателяТовары.Количество КАК Количество,
	|	ЗаказПокупателяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяТовары.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|ГДЕ
	|	ЗаказПокупателяТовары.Ссылка = &Ссылка";
	ЗапросНоменклатуры.УстановитьПараметр("Ссылка", Документ);
	Выборка = ЗапросНоменклатуры.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товар.Добавить();
		НоваяСтрока.НомерСтроки = Выборка.НомерСтроки;
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.Наименование = Выборка.Наименование;
		НоваяСтрока.Артикул = Выборка.Артикул;
		НоваяСтрока.Отсканирован = Ложь;
		НоваяСтрока.Количество = Выборка.Количество;
		НоваяСтрока.Единица = Выборка.ЕдиницаИзмерения;
	КонецЦикла;
	
	//Открытие формы сканирования товара
	ФормаСканированияТовара_Название = ?(ТипЭкрана = 2, "ФормаВозвратаТовара_480х800", ?(ТипЭкрана = 3, "ФормаВозвратаТовара_1280х768", "ФормаВозвратаТовара"));
	ФормаСканированияТовара = ПолучитьФорму(ФормаСканированияТовара_Название);
	Результат = ФормаСканированияТовара.ОткрытьМодально();	
	
	ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = ?(Результат = 1, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьКлиент.ЦветФона = ?(Результат = 1, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьРегион.ЦветФона = ?(Результат = 1, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Ложь;
	ЭлементыФормы.КнопкаЭтикетки.Доступность = Ложь;
	
	Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
КонецПроцедуры

Процедура ДокументНаУпаковку(Форма)
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	//Изменение статуса документа
	ИзменитьСтатусДокумента(Документ, Перечисления.БС_СтатусыДокументов.НаУпаковке, Пользователь, ТекущаяДата());
	
	ФормаУпаковкиТовара_Название = ?(ТипЭкрана = 3, "ФормаУпаковкиТовара_1280х768", "ФормаУпаковкиТовара");
	ФормаУпаковкиТовара = ПолучитьФорму(ФормаУпаковкиТовара_Название);
	ФормаУпаковкиТовара.Документ = Документ;
	ФормаУпаковкиТовара.Контрагент = Форма.НадписьКлиент;
	ФормаУпаковкиТовара.Направление = Форма.НадписьРегион;
	ФормаУпаковкиТовара.ВсегоСтрок = Форма.ВсегоСтрок;
	ФормаУпаковкиТовара.ВсегоЕдиниц = Форма.ВсегоЕдиниц;
	
	Результат = ФормаУпаковкиТовара.ОткрытьМодально();
	ПроверкаПройдена = ТипЗнч(Результат) = Тип("Структура");
	Если ПроверкаПройдена Тогда
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СкладСоСтолами = СкладДокумента = СкладГурьянова;
		Иначе
			СкладСоСтолами = Ложь;
		КонецЕсли; 
		Если СкладСоСтолами Тогда
			ФормаСканированияСтола_Название = ?(ТипЭкрана = 3, "ФормаСканированияСтола_1280х768", "ФормаСканированияСтола");
			ФормаСканированияСтола = ПолучитьФорму(ФормаСканированияСтола_Название);
			ВозвратФормыСканированияСтола = ФормаСканированияСтола.ОткрытьМодально();
			Если ВозвратФормыСканированияСтола <> Неопределено Тогда
				ПревьюКомментария = " Стол "+ВозвратФормыСканированияСтола.Наименование;
			Иначе
				ПревьюКомментария = "";
			КонецЕсли;
		Иначе
			ПревьюКомментария = "";
		КонецЕсли; 
		
		// Проверить не отменён ли заказ во время сборки
		СтатусВБазе = ПолучитьСтатусДокумента(Документ);
		Если СтатусВБазе = Перечисления.БС_СтатусыДокументов.НаУпаковке Тогда
			ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.Упакован;
			ИзменитьСтатусДокумента(Документ, ТекущийСтатусДокумента, Пользователь, ТекущаяДата(), ПревьюКомментария, Результат);
		Иначе 
			мПредупреждение("Внимание! Документ отменён. Необходимо вернуть товар. Упаковка будет учтена в з/п.");
		КонецЕсли;
		
		// Рассылка писем взаиморасчётов 
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			//Вызов внешней обработки ДействияПриЗаписиДокумента
			СсылкаОбработки = Справочники.ВнешниеОбработки.НайтиПоКоду("000000119");
			ИмяФайла = ПолучитьИмяВременногоФайла("epf");
			ДвоичныеДанные = СсылкаОбработки.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Параметры = Новый Структура;
			Параметры.Вставить("Источник", Документ);
			Отказ = Ложь;
			Параметры.Вставить("Отказ", Отказ);
			Обработка.ВыполнитьОбработку(Параметры);
			Отказ = Параметры["Отказ"];
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	Иначе
		// Проверить не отменён ли заказ во время сборки
		СтатусВБазе = ПолучитьСтатусБезЗоны(Документ);
		Если СтатусВБазе = Перечисления.БС_СтатусыДокументов.Отменен Тогда 
			ТекущийСтатусДокумента = СтатусВБазе;
		Иначе
			ТекущийСтатусДокумента = Перечисления.БС_СтатусыДокументов.Проверен;
			ИзменитьСтатусДокумента(Документ, ТекущийСтатусДокумента, Пользователь, ТекущаяДата());
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИнформационнаяНадпись = "Статус:""" + ТекущийСтатусДокумента + """" + Символы.ПС + Символы.ПС + Документ + Символы.ПС + Символы.ПС + ?(ПроверкаПройдена, "Документ упакован", "Упаковка отменена"); 
	
	ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = ?(ПроверкаПройдена, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьКлиент.ЦветФона = ?(ПроверкаПройдена, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьРегион.ЦветФона = ?(ПроверкаПройдена, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Ложь;
	ЭлементыФормы.КнопкаЭтикетки.Доступность = Ложь;
	
	Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;  
	
	ПроверкаВерсии();
КонецПроцедуры

Процедура ПроверкаПаллета(Форма)
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	ФормаПроверкиПаллета_Название = ?(ТипЭкрана = 3, "ФормаПроверкиПаллета_1280х768", "ФормаПроверкиПаллета");
	ФормаПроверкиПаллета = ПолучитьФорму(ФормаПроверкиПаллета_Название);
	ФормаПроверкиПаллета.Направление = Документ.РегионДоставки;
	ФормаПроверкиПаллета.ЗаказыПутевогоЛиста = ЗаказыПутевогоЛиста; 
	
	Результат = ФормаПроверкиПаллета.ОткрытьМодально();
	
	Если Результат = 0 Тогда
		///*** Необходимо обновить значения количества упаковок
	КонецЕсли;
	
	Форма.ИнформационнаяНадпись = "Проверка паллета:" + Документ + Символы.ПС + Символы.ПС + ?(Результат = 0, "Паллет собран", "Проверка отменена"); 
	
	ЭлементыФормы.НадписьИнформацияОДокументе.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьКлиент.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.НадписьРегион.ЦветФона = ?(Результат = 0, ЦветаСтиля.ЦветФонаФормы, WebЦвета.СветлоРозовый);
	ЭлементыФормы.КнопкаВзятьДокумент.Доступность = Ложь;
	ЭлементыФормы.КнопкаЭтикетки.Доступность = Ложь;
	
	Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКДокумента;
КонецПроцедуры

Процедура СоставитьОтчетРазногласийЗаказаПоставщикаИПриемки()
	//Пока пропускаем
	//Если Пользователь.Наименование <> "Соловьёв Андрей" Тогда
	//	Возврат;
	//КонецЕсли;
	
	ТаблицаРазногласий = Новый ТаблицаЗначений;
	ТаблицаРазногласий.Колонки.Добавить("Документ");
	ТаблицаРазногласий.Колонки.Добавить("СторонаЗаказа");
	ТаблицаРазногласий.Колонки.Добавить("СторонаПриёмки");
	ТаблицаРазногласий.Колонки.Добавить("Номенклатура");
	ТаблицаРазногласий.Колонки.Добавить("ЦветНоменклатуры");
	ТаблицаРазногласий.Колонки.Добавить("СрокГодности");
	ТаблицаРазногласий.Колонки.Добавить("ЦветСрокаГодности");
	ТаблицаРазногласий.Колонки.Добавить("Количество");
	ТаблицаРазногласий.Колонки.Добавить("ЦветКоличества");
	ТаблицаРазногласий.Колонки.Добавить("Приёмщик");
	
	ЦветОбычный = СериализаторXDTO.XMLСтрока(WebЦвета.Черный);
	ЦветВыделенный = СериализаторXDTO.XMLСтрока(WebЦвета.Красный);
	
	ТЧЗаказа = Документ.Товары.Выгрузить(,"Номенклатура,ХарактеристикаНоменклатуры,Количество");
	ТЧЗаказа.Колонки.Добавить("Проверен");
	ТЧЗаказа.ЗаполнитьЗначения(Ложь, "Проверен");
	
	ЗапросПриёмки = Новый Запрос;
	ЗапросПриёмки.Текст =
	"ВЫБРАТЬ
	|	ПриёмкаТовара.Документ КАК Документ,
	|	ПриёмкаТовара.Номенклатура КАК Номенклатура,
	|	ПриёмкаТовара.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(ПриёмкаТовара.Количество) КАК Количество
	|ИЗ
	|	РегистрСведений.БС_ПриемкаТовара КАК ПриёмкаТовара
	|ГДЕ
	|	ПриёмкаТовара.Документ = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриёмкаТовара.Документ,
	|	ПриёмкаТовара.Номенклатура,
	|	ПриёмкаТовара.ХарактеристикаНоменклатуры";
	ЗапросПриёмки.УстановитьПараметр("Документ", Документ);
	РСПриёмка = ЗапросПриёмки.Выполнить().Выгрузить();
	РСПриёмка.Колонки.Добавить("Проверен");
	РСПриёмка.ЗаполнитьЗначения(Ложь, "Проверен");
	
	Для Каждого СтрокаТЧЗаказа Из ТЧЗаказа Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", СтрокаТЧЗаказа.Номенклатура);
		СтрокиРСПриёмка = РСПриёмка.НайтиСтроки(Отбор);
		Если СтрокиРСПриёмка.Количество() = 0 Тогда
			///*** Такой номенклатуры не найдено
			СтрокаРазногласия = ТаблицаРазногласий.Добавить();
			СтрокаРазногласия.Документ = Документ;
			СтрокаРазногласия.СторонаЗаказа = Истина;
			СтрокаРазногласия.СторонаПриёмки = Ложь;
			СтрокаРазногласия.Номенклатура = СтрокаТЧЗаказа.Номенклатура;
			СтрокаРазногласия.ЦветНоменклатуры = ЦветВыделенный;
			СтрокаРазногласия.СрокГодности = СтрокаТЧЗаказа.ХарактеристикаНоменклатуры;
			СтрокаРазногласия.ЦветСрокаГодности = ЦветВыделенный;
			СтрокаРазногласия.Количество = СтрокаТЧЗаказа.Количество;
			СтрокаРазногласия.ЦветКоличества = ЦветВыделенный;
			СтрокаРазногласия.Приёмщик = Пользователь;
			
			СтрокаТЧЗаказа.Проверен = Истина;
		Иначе
			СрокГодностиНайден = Ложь;
			Для Каждого СтрокаРСПриёмка Из СтрокиРСПриёмка Цикл
				Если СтрокаТЧЗаказа.ХарактеристикаНоменклатуры = СтрокаРСПриёмка.ХарактеристикаНоменклатуры Тогда
					СрокГодностиНайден = Истина;
					НайденнаяСтрокаПриёмки = СтрокаРСПриёмка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СрокГодностиНайден Тогда
				///*** Такой срок годности найден
				///*** Проверка количества
				Если СтрокаТЧЗаказа.Количество = НайденнаяСтрокаПриёмки.Количество Тогда
					///*** Строки полностью совпали
					СтрокаРазногласия = ТаблицаРазногласий.Добавить();
					СтрокаРазногласия.Документ = Документ;
					СтрокаРазногласия.СторонаЗаказа = Истина;
					СтрокаРазногласия.СторонаПриёмки = Ложь;
					СтрокаРазногласия.Номенклатура = СтрокаТЧЗаказа.Номенклатура;
					СтрокаРазногласия.ЦветНоменклатуры = ЦветОбычный;
					СтрокаРазногласия.СрокГодности = СтрокаТЧЗаказа.ХарактеристикаНоменклатуры;
					СтрокаРазногласия.ЦветСрокаГодности = ЦветОбычный;
					СтрокаРазногласия.Количество = СтрокаТЧЗаказа.Количество;
					СтрокаРазногласия.ЦветКоличества = ЦветОбычный;
					СтрокаРазногласия.Приёмщик = Пользователь;
					
					СтрокаРазногласия = ТаблицаРазногласий.Добавить();
					СтрокаРазногласия.Документ = Документ;
					СтрокаРазногласия.СторонаЗаказа = Ложь;
					СтрокаРазногласия.СторонаПриёмки = Истина;
					СтрокаРазногласия.Номенклатура = СтрокаТЧЗаказа.Номенклатура;
					СтрокаРазногласия.ЦветНоменклатуры = ЦветОбычный;
					СтрокаРазногласия.СрокГодности = СтрокаТЧЗаказа.ХарактеристикаНоменклатуры;
					СтрокаРазногласия.ЦветСрокаГодности = ЦветОбычный;
					СтрокаРазногласия.Количество = СтрокаТЧЗаказа.Количество;
					СтрокаРазногласия.ЦветКоличества = ЦветОбычный;
					СтрокаРазногласия.Приёмщик = Пользователь;
					
					СтрокаТЧЗаказа.Проверен = Истина;
					НайденнаяСтрокаПриёмки.Проверен = Истина;
				Иначе
					///*** Количество не совпало
					СтрокаРазногласия = ТаблицаРазногласий.Добавить();
					СтрокаРазногласия.Документ = Документ;
					СтрокаРазногласия.СторонаЗаказа = Истина;
					СтрокаРазногласия.СторонаПриёмки = Ложь;
					СтрокаРазногласия.Номенклатура = СтрокаТЧЗаказа.Номенклатура;
					СтрокаРазногласия.ЦветНоменклатуры = ЦветОбычный;
					СтрокаРазногласия.СрокГодности = СтрокаТЧЗаказа.ХарактеристикаНоменклатуры;
					СтрокаРазногласия.ЦветСрокаГодности = ЦветОбычный;
					СтрокаРазногласия.Количество = СтрокаТЧЗаказа.Количество;
					СтрокаРазногласия.ЦветКоличества = ЦветВыделенный;
					СтрокаРазногласия.Приёмщик = Пользователь;
					
					СтрокаТЧЗаказа.Проверен = Истина;
				КонецЕсли;
			Иначе
				///*** Такой срок годности не найден
				СтрокаРазногласия = ТаблицаРазногласий.Добавить();
				СтрокаРазногласия.Документ = Документ;
				СтрокаРазногласия.СторонаЗаказа = Истина;
				СтрокаРазногласия.СторонаПриёмки = Ложь;
				СтрокаРазногласия.Номенклатура = СтрокаТЧЗаказа.Номенклатура;
				СтрокаРазногласия.ЦветНоменклатуры = ЦветОбычный;
				СтрокаРазногласия.СрокГодности = СтрокаТЧЗаказа.ХарактеристикаНоменклатуры;
				СтрокаРазногласия.ЦветСрокаГодности = ЦветВыделенный;
				СтрокаРазногласия.Количество = СтрокаТЧЗаказа.Количество;
				СтрокаРазногласия.ЦветКоличества = ЦветВыделенный;
				СтрокаРазногласия.Приёмщик = Пользователь;
				
				СтрокаТЧЗаказа.Проверен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Индекс = РСПриёмка.Количество()-1;
	Пока Индекс >= 0 Цикл
		Если РСПриёмка[Индекс].Проверен Тогда
			РСПриёмка.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Для Каждого СтрокаРСПриёмка Из РСПриёмка Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", СтрокаРСПриёмка.Номенклатура);
		СтрокиТЧЗаказа = ТЧЗаказа.НайтиСтроки(Отбор);
		Если СтрокиТЧЗаказа.Количество() = 0 Тогда
			///*** Такой номенклатуры не найдено
			СтрокаРазногласия = ТаблицаРазногласий.Добавить();
			СтрокаРазногласия.Документ = Документ;
			СтрокаРазногласия.СторонаЗаказа = Ложь;
			СтрокаРазногласия.СторонаПриёмки = Истина;
			СтрокаРазногласия.Номенклатура = СтрокаРСПриёмка.Номенклатура;
			СтрокаРазногласия.ЦветНоменклатуры = ЦветВыделенный;
			СтрокаРазногласия.СрокГодности = СтрокаРСПриёмка.ХарактеристикаНоменклатуры;
			СтрокаРазногласия.ЦветСрокаГодности = ЦветВыделенный;
			СтрокаРазногласия.Количество = СтрокаРСПриёмка.Количество;
			СтрокаРазногласия.ЦветКоличества = ЦветВыделенный;
			СтрокаРазногласия.Приёмщик = Пользователь;
			
			СтрокаРСПриёмка.Проверен = Истина;
		Иначе
			СрокГодностиНайден = Ложь;
			Для Каждого СтрокаТЧЗаказа Из СтрокиТЧЗаказа Цикл
				Если СтрокаРСПриёмка.ХарактеристикаНоменклатуры = СтрокаТЧЗаказа.ХарактеристикаНоменклатуры Тогда
					СрокГодностиНайден = Истина;
					НайденнаяСтрокаЗаказа = СтрокаТЧЗаказа;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СрокГодностиНайден Тогда
				///*** Такой срок годности найден
				///*** Проверка количества
				Если СтрокаРСПриёмка.Количество = НайденнаяСтрокаЗаказа.Количество Тогда
					///*** Строки полностью совпали !!! ВНИМАНИЕ!!! Сюда вообще не должна заходить
					СтрокаРазногласия = ТаблицаРазногласий.Добавить();
					СтрокаРазногласия.Документ = Документ;
					СтрокаРазногласия.СторонаЗаказа = Ложь;
					СтрокаРазногласия.СторонаПриёмки = Истина;
					СтрокаРазногласия.Номенклатура = СтрокаРСПриёмка.Номенклатура;
					СтрокаРазногласия.ЦветНоменклатуры = ЦветОбычный;
					СтрокаРазногласия.СрокГодности = СтрокаРСПриёмка.ХарактеристикаНоменклатуры;
					СтрокаРазногласия.ЦветСрокаГодности = ЦветОбычный;
					СтрокаРазногласия.Количество = СтрокаРСПриёмка.Количество;
					СтрокаРазногласия.ЦветКоличества = ЦветОбычный;
					СтрокаРазногласия.Приёмщик = Пользователь;
					
					СтрокаРазногласия = ТаблицаРазногласий.Добавить();
					СтрокаРазногласия.Документ = Документ;
					СтрокаРазногласия.СторонаЗаказа = Истина;
					СтрокаРазногласия.СторонаПриёмки = Ложь;
					СтрокаРазногласия.Номенклатура = СтрокаТЧЗаказа.Номенклатура;
					СтрокаРазногласия.ЦветНоменклатуры = ЦветОбычный;
					СтрокаРазногласия.СрокГодности = СтрокаТЧЗаказа.ХарактеристикаНоменклатуры;
					СтрокаРазногласия.ЦветСрокаГодности = ЦветОбычный;
					СтрокаРазногласия.Количество = СтрокаТЧЗаказа.Количество;
					СтрокаРазногласия.ЦветКоличества = ЦветОбычный;
					СтрокаРазногласия.Приёмщик = Пользователь;
					
					СтрокаРСПриёмка.Проверен = Истина;
					НайденнаяСтрокаЗаказа.Проверен = Истина;
				Иначе
					///*** Количество не совпало
					СтрокаРазногласия = ТаблицаРазногласий.Добавить();
					СтрокаРазногласия.Документ = Документ;
					СтрокаРазногласия.СторонаЗаказа = Ложь;
					СтрокаРазногласия.СторонаПриёмки = Истина;
					СтрокаРазногласия.Номенклатура = СтрокаРСПриёмка.Номенклатура;
					СтрокаРазногласия.ЦветНоменклатуры = ЦветОбычный;
					СтрокаРазногласия.СрокГодности = СтрокаРСПриёмка.ХарактеристикаНоменклатуры;
					СтрокаРазногласия.ЦветСрокаГодности = ЦветОбычный;
					СтрокаРазногласия.Количество = СтрокаРСПриёмка.Количество;
					СтрокаРазногласия.ЦветКоличества = ЦветВыделенный;
					СтрокаРазногласия.Приёмщик = Пользователь;
					
					СтрокаРСПриёмка.Проверен = Истина;
				КонецЕсли;
			Иначе
				///*** Такой срок годности не найден
				СтрокаРазногласия = ТаблицаРазногласий.Добавить();
				СтрокаРазногласия.Документ = Документ;
				СтрокаРазногласия.СторонаЗаказа = Ложь;
				СтрокаРазногласия.СторонаПриёмки = Истина;
				СтрокаРазногласия.Номенклатура = СтрокаРСПриёмка.Номенклатура;
				СтрокаРазногласия.ЦветНоменклатуры = ЦветОбычный;
				СтрокаРазногласия.СрокГодности = СтрокаРСПриёмка.ХарактеристикаНоменклатуры;
				СтрокаРазногласия.ЦветСрокаГодности = ЦветВыделенный;
				СтрокаРазногласия.Количество = СтрокаРСПриёмка.Количество;
				СтрокаРазногласия.ЦветКоличества = ЦветВыделенный;
				СтрокаРазногласия.Приёмщик = Пользователь;
				
				СтрокаРСПриёмка.Проверен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//ВнестиДанныеВРСРасхожденияПриёмки(ТаблицаРазногласий);
КонецПроцедуры

Процедура ВнестиДанныеВРСРасхожденияПриёмки(ТаблицаИзменений)
	// СериализаторXDTO.XMLЗначение(Тип("Цвет"), ЦветXML) 
	// СериализаторXDTO.XMLСтрока(Цвет) 
	
	//РС = РегистрыСведений.РасхожденияПриёмки.СоздатьНаборЗаписей();
	//РС.Загрузить(ТаблицаИзменений);
	//РС.Записать();
	
	Для Каждого СтрокаИзменений Из ТаблицаИзменений Цикл
		МЗ = РегистрыСведений.РасхожденияПриёмки.СоздатьМенеджерЗаписи();
		МЗ.Документ = СтрокаИзменений.Документ;
		МЗ.СторонаЗаказа = СтрокаИзменений.СторонаЗаказа;
		МЗ.СторонаПриёмки = СтрокаИзменений.СторонаПриёмки;
		МЗ.Номенклатура = СтрокаИзменений.Номенклатура;
		МЗ.СрокГодности = СтрокаИзменений.СрокГодности;
		МЗ.Количество = СтрокаИзменений.Количество;
		МЗ.Приёмщик = СтрокаИзменений.Приёмщик;
		МЗ.ЦветНоменклатуры = СтрокаИзменений.ЦветНоменклатуры;
		МЗ.ЦветСрокаГодности = СтрокаИзменений.ЦветСрокаГодности;
		МЗ.ЦветКоличества = СтрокаИзменений.ЦветКоличества;
		МЗ.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Форма_сканирования_товара
Процедура ФормаСканированияТовара_ПриОткрытии(Форма) Экспорт
	Форма.Заголовок = "Сканирование товара в документ";
	ОбновитьФормуСканированияТовара(Форма);
КонецПроцедуры

Процедура ОбновитьФормуСканированияТовара(Форма, НажатьТаб = 0)
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	///*** Перезаполнить отсканированные позиции из РС НоменклатураПоТСД
	ЗапросСканированныхПозиций = Новый Запрос;
	ЗапросСканированныхПозиций.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураПоТСД.Номенклатура КАК Номенклатура,
	|	НоменклатураПоТСД.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.БС_НоменклатураПоТСД КАК НоменклатураПоТСД
	|ГДЕ
	|	НоменклатураПоТСД.Документ = &Документ
	|	И НоменклатураПоТСД.Операция = ""Сборка""";
	ЗапросСканированныхПозиций.УстановитьПараметр("Документ", Документ);
	ВыборкаСканированныхПозиций = ЗапросСканированныхПозиций.Выполнить().Выбрать();
	Пока ВыборкаСканированныхПозиций.Следующий() Цикл   
		ЕстьСрок = ВыборкаСканированныхПозиций.ХарактеристикаНоменклатуры <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ВыборкаСканированныхПозиций.Номенклатура);
		СписокСтрок = Товар.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока Из СписокСтрок Цикл
			Если ЕстьСрок Тогда
				Если ТекСтрока.ХарактеристикаНоменклатуры = ВыборкаСканированныхПозиций.ХарактеристикаНоменклатуры Тогда
					ТекСтрока.Отсканирован = Истина;
				КонецЕсли;
			Иначе
				ТекСтрока.Отсканирован = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Отсканировано = 0;
	Для Каждого СтрокаТовара Из Товар Цикл
		Отсканировано = Отсканировано + ?(СтрокаТовара.Отсканирован, 1, 0);
	КонецЦикла;
	
	Форма.ИнформацияПоДокументу = "Позиций: Отсканировано - " + Строка(Отсканировано) + " / Осталось - " + Строка(Товар.Количество() - Отсканировано);
	ЭлементыФормы.ИндикаторСканирования.МаксимальноеЗначение = Товар.Количество();
	Форма.ИндикаторСканирования = Отсканировано;
	
	ЭлементыФормы.ПолеТабличногоДокументаТовар.Очистить();
	ИмяМакета = ?(ТипЭкрана = 2, "МакетСпискаПозиций_480х800", ?(ТипЭкрана = 3, "МакетСпискаПозиций_1280х768", "МакетСпискаПозиций"));
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ИндексКолонкиНаименования = ?(ТипЭкрана = 3, 3, 3);
	ОбластьШапка.Область(1,ИндексКолонкиНаименования,1,ИндексКолонкиНаименования).РастягиватьПоГоризонтали = Истина;
	ОбластьСтрока.Область(1,ИндексКолонкиНаименования,1,ИндексКолонкиНаименования).РастягиватьПоГоризонтали = Истина;
	ОбластьШапка.Область(1,1,1,ОбластьШапка.ШиринаТаблицы).Шрифт = Новый Шрифт(ОбластьШапка.Область(1,1,1,ОбластьШапка.ШиринаТаблицы).Шрифт,,РазмерШрифтаТаблиц);
	ОбластьСтрока.Область(1,1,1,ОбластьСтрока.ШиринаТаблицы).Шрифт = Новый Шрифт(ОбластьСтрока.Область(1,1,1,ОбластьСтрока.ШиринаТаблицы).Шрифт,,РазмерШрифтаТаблиц);
	
	ЭлементыФормы.ПолеТабличногоДокументаТовар.Вывести(ОбластьШапка);
	Для Каждого СтрокаТовара Из Товар Цикл
		Если СтрокаТовара.Отсканирован Тогда
			Продолжить;
		КонецЕсли; 
		
		ОбластьСтрока.Параметры.Заполнить(СтрокаТовара);
		ЭлементыФормы.ПолеТабличногоДокументаТовар.Вывести(ОбластьСтрока);
	КонецЦикла;
	ЭлементыФормы.ПолеТабличногоДокументаТовар.ФиксацияСверху = 1;
	ЭлементыФормы.ПолеТабличногоДокументаТовар.ГоризонтальнаяПолосаПрокрутки = Ложь;
	
	НажатьТаб(НажатьТаб);
	
	//Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКТовара;
	
	//УстановкаАктивногоЭлементаФормы(Форма, ЭлементыФормы.ПолеВводаШКТовара);
КонецПроцедуры

Процедура ФормаСканированияТовара_КнопкаЗавершитьНажатие(Форма) Экспорт
	Отсканировано = 0;
	Для Каждого СтрокаТовара Из Товар Цикл
		Отсканировано = Отсканировано + ?(СтрокаТовара.Отсканирован, 1, 0);
	КонецЦикла;
	Если Отсканировано = Товар.Количество() Тогда
		Форма.Закрыть(0);
		Возврат;
	КонецЕсли;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(1, "Да");
	СписокКнопок.Добавить(2, "Нет");
	Если мВопрос("Прервать сбор документа?", СписокКнопок) = 1 Тогда
		ФормаЗавершенияСборкиДокумента_Название = ?(ТипЭкрана = 2, "ФормаЗавершенияСборкиДокумента_480х800", ?(ТипЭкрана = 3, "ФормаЗавершенияСборкиДокумента_1280х768", "ФормаЗавершенияСборкиДокумента"));
		ФормаЗавершенияСборки = ПолучитьФорму(ФормаЗавершенияСборкиДокумента_Название);
		Результат = ФормаЗавершенияСборки.ОткрытьМодально();
		Если Результат = 0 Тогда
			Возврат;
		ИначеЕсли Результат = 1 Тогда
			Форма.Закрыть(1);
			Возврат;
		Иначе
			Форма.Закрыть(2);
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ФормаСканированияТовара_ПолеВводаШКТовараПриИзменении(Форма) Экспорт
	// *** Это ШК со сроком если:
	// *** 1. у него есть пробел
	// *** 2. цифр после пробела 8     
	Если не ЗначениеЗаполнено(Форма.ШтрихКод) Тогда Возврат КонецЕсли;
	
	ПоложениеПробела = СтрНайти(Форма.ШтрихКод, " ");
	Если ПоложениеПробела > 0 Тогда
		ДлинаСрока = СтрДлина(Прав(Форма.ШтрихКод, СтрДлина(Форма.ШтрихКод)-ПоложениеПробела));
		Если ДлинаСрока = 8 Тогда
			// *** В этом ШК есть срок
			НазваниеСрока = Прав(Форма.ШтрихКод, 8);
			ДатаСрока = ПреобразоватьСтрокуВДату(НазваниеСрока);
			ЕстьСрок = ЗначениеЗаполнено(ДатаСрока);
			ШКТовара = Лев(Форма.ШтрихКод, ПоложениеПробела-1);
		Иначе
			НазваниеСрока = "";
			ЕстьСрок = Ложь;
			ШКТовара = Лев(Форма.ШтрихКод, ПоложениеПробела-1);
		КонецЕсли;		
	Иначе
		НазваниеСрока = "";
		ЕстьСрок = Ложь;
		ШКТовара = Форма.ШтрихКод;
	КонецЕсли;
	
	Форма.ШтрихКод = "";
	
	Если ПроверитьШтрихКод(ШКТовара) Тогда
		ТекстПредупреждения = "Введён неверный штрих код. Должны быть только цифры в количестве от 9 до 14.";
		РазбитьСтроку(ТекстПредупреждения);
		мПредупреждение(ТекстПредупреждения);
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод";
	Запрос.УстановитьПараметр("Штрихкод", ШКТовара);
	Результат = Запрос.Выполнить();
	
	Если Результат = Неопределено Тогда
		// *** Ошибка выполнения запроса
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	ШКВБазеНайден = Выборка.Следующий();
	
	РезультатВызоваФормы = Неопределено;
	Если Не ШКВБазеНайден Тогда
		ФормаНеНайденогоШК_Наименование = ?(ТипЭкрана = 2, "ФормаНеНайденогоШК_480х800", ?(ТипЭкрана = 3, "ФормаНеНайденогоШК_1280х768", "ФормаНеНайденогоШК"));
		ФормаНеНайденогоШК = ПолучитьФорму(ФормаНеНайденогоШК_Наименование);
		РезультатВызоваФормы = ФормаНеНайденогоШК.ОткрытьМодально();
		НоменклатураЕстьВСписке = ТипЗнч(РезультатВызоваФормы) = Тип("СправочникСсылка.Номенклатура"); 
	Иначе
		НоменклатураЕстьВСписке = Товар.Найти(Выборка.Владелец, "Номенклатура") <> Неопределено;
		Если Не НоменклатураЕстьВСписке Тогда
			ФормаИнформацииОТовареНеИзСписка_Наименование = ?(ТипЭкрана = 2, "ФормаИнформацииОТовареНеИзСписка_480х800", ?(ТипЭкрана = 3, "ФормаИнформацииОТовареНеИзСписка_1280х768", "ФормаИнформацииОТовареНеИзСписка"));
			ФормаИнформацииОТовареНеИзСписка = ПолучитьФорму(ФормаИнформацииОТовареНеИзСписка_Наименование);
			ФормаИнформацииОТовареНеИзСписка.ИнформацияОТоваре = Выборка.Владелец;
			РезультатВызоваФормы = ФормаИнформацииОТовареНеИзСписка.ОткрытьМодально();
		Иначе
			РезультатВызоваФормы = Выборка.Владелец;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВызоваФормы) = Тип("СправочникСсылка.Номенклатура") Тогда
		Количество = 0;
		Если ЕстьСрок Тогда
			СписокСтрок = Новый СписокЗначений();
			Для Каждого СтрокаТаблицы Из Товар Цикл
				Если СтрокаТаблицы.Номенклатура = РезультатВызоваФормы И ДатаСрокаКорректна(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.СрокГодности, ДатаСрока) Тогда
					СписокСтрок.Добавить(СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокСтрок.Количество() > 0 Тогда
				Количество = 0;
				ТоварУжеСканировался = Ложь;
				СрокПлохой = Ложь;
				Для Каждого ЭлементСписка Из СписокСтрок Цикл
					Количество = Количество + ЭлементСписка.Значение.Количество;
					ТоварУжеСканировался = ЭлементСписка.Значение.Отсканирован;
					НоменклатураНаименование = ЭлементСписка.Значение.Наименование; 
					СрокПлохой = СрокПлохой ИЛИ ЭлементСписка.Значение.СрокПлохой;
				КонецЦикла;
				
				ФормаИнформацииОТовареИзСписка_Наименование = ?(ТипЭкрана = 2, "ФормаИнформацииОТовареИзСписка_480х800", ?(ТипЭкрана = 3, "ФормаИнформацииОТовареИзСписка_1280х768", "ФормаИнформацииОТовареИзСписка"));
				ФормаИнформацииОТовареИзСписка = ПолучитьФорму(ФормаИнформацииОТовареИзСписка_Наименование);
				ФормаИнформацииОТовареИзСписка.НоменклатураНаименование = НоменклатураНаименование;
				ФормаИнформацииОТовареИзСписка.Количество = Количество;
				ФормаИнформацииОТовареИзСписка.Единица = РезультатВызоваФормы.ЕдиницаХраненияОстатков;
				ФормаИнформацииОТовареИзСписка.ОбщаяИнформация = ?(ТоварУжеСканировался, "Товар уже собран:", "Необходимо собрать:");
				ФормаИнформацииОТовареИзСписка.ЦветФона = ?(ТоварУжеСканировался, WebЦвета.СветлоРозовый, WebЦвета.СветлоЗеленый);
				ФормаИнформацииОТовареИзСписка.СрокПлохой = СрокПлохой;
				
				Результат = ФормаИнформацииОТовареИзСписка.ОткрытьМодально();
				
				Если Результат = 0 Тогда
					Для Каждого ЭлементСписка Из СписокСтрок Цикл
						ЭлементСписка.Значение.Отсканирован = Истина;
					КонецЦикла;
					
					ОбновитьФормуСканированияТовара(Форма, 3);
					//Форма.АктивироватьПолеВводаШтрихКода();
				КонецЕсли;						
			Иначе
				/// *** С таким сроком нет
				
				ТекстПредупреждения = "Неверный срок: в документе -";
				
				НайденныеСтроки = Товар.НайтиСтроки(Новый Структура("Номенклатура", РезультатВызоваФормы));
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					Если НайденныеСтроки.Количество() > 1 Тогда
						ТекстПредупреждения = ТекстПредупреждения + " или " + """" +Формат(ТекСтрока.СрокГодности, "ДФ=dd.MM.yyyy")+"""";
					Иначе
						ТекстПредупреждения = ТекстПредупреждения + """" +Формат(ТекСтрока.СрокГодности, "ДФ=dd.MM.yyyy")+"""";
					КонецЕсли;
				КонецЦикла;
				
				ТекстПредупреждения = ТекстПредупреждения + ", в коробке - """+Формат(ДатаСрока, "ДФ=dd.MM.yyyy")+""".";
				
				РазбитьСтроку(ТекстПредупреждения);
				мПредупреждение(ТекстПредупреждения);
				
				Возврат;
			КонецЕсли;
		Иначе
			Если НельзяСобиратьСКороткимСроком(РезультатВызоваФормы) Тогда
				ТекстПредупреждения = "Эту позицию """+РезультатВызоваФормы+""" нельзя собирать по штрих-коду без срока.";				
				РазбитьСтроку(ТекстПредупреждения);
				мПредупреждение(ТекстПредупреждения);
				Возврат;
			КонецЕсли;
			
			Количество = 0;
			ТоварУжеСканировался = Ложь;
			МассивСтрок = Товар.НайтиСтроки(Новый Структура("Номенклатура", РезультатВызоваФормы));
			НоменклатураНаименование = "";
			СрокПлохой = Ложь;
			Для Каждого ЭлементМассива Из МассивСтрок Цикл
				Количество = Количество + ЭлементМассива.Количество;
				ТоварУжеСканировался = ЭлементМассива.Отсканирован;
				НоменклатураНаименование = ЭлементМассива.Наименование;
				СрокПлохой = СрокПлохой ИЛИ ЭлементМассива.СрокПлохой;
			КонецЦикла;
			
			///*** Если это товар с подарком, то добавить в надпись слово "ПОДАРОК!"
			//ТоварСПодарком = РезультатВызоваФормы.Код = "УТ000005026"; // Номенклатура "СкинМед  Chlorhexidin Shampoo Шампунь с хлоргексидином, 236 мл (10/уп)"
			//Если ТоварСПодарком и ДокументРозницы Тогда
			//	НоменклатураНаименование = НоменклатураНаименование + Символы.ПС + "ПОДАРОК!";
			//КонецЕсли;
			
			ФормаИнформацииОТовареИзСписка_Наименование = ?(ТипЭкрана = 2, "ФормаИнформацииОТовареИзСписка_480х800", ?(ТипЭкрана = 3, "ФормаИнформацииОТовареИзСписка_1280х768", "ФормаИнформацииОТовареИзСписка"));
			ФормаИнформацииОТовареИзСписка = ПолучитьФорму(ФормаИнформацииОТовареИзСписка_Наименование);
			ФормаИнформацииОТовареИзСписка.НоменклатураНаименование = НоменклатураНаименование;
			ФормаИнформацииОТовареИзСписка.Количество = Количество;
			ФормаИнформацииОТовареИзСписка.Единица = РезультатВызоваФормы.ЕдиницаХраненияОстатков;
			ФормаИнформацииОТовареИзСписка.ОбщаяИнформация = ?(ТоварУжеСканировался, "Товар уже собран:", "Необходимо собрать:");
			ФормаИнформацииОТовареИзСписка.ЦветФона = ?(ТоварУжеСканировался, WebЦвета.СветлоРозовый, WebЦвета.СветлоЗеленый);
			ФормаИнформацииОТовареИзСписка.СрокПлохой = СрокПлохой;
			
			Результат = ФормаИнформацииОТовареИзСписка.ОткрытьМодально();
			
			Если Результат = 0 Тогда
				Для Каждого ЭлементМассива Из МассивСтрок Цикл
					ЭлементМассива.Отсканирован = Истина;
				КонецЦикла;
				
				//Форма.АктивироватьПолеВводаШтрихКода();
				ОбновитьФормуСканированияТовара(Форма, 3);
			КонецЕсли;						
		КонецЕсли;
		ДобавитьЗаписьВРегНоменклатураПоТСД(РезультатВызоваФормы, ИмяТСД, Пользователь, Документ, ТекущаяДата(), ?(ЕстьСрок, ПодобратьХарактеристику(РезультатВызоваФормы, ДатаСрока), Неопределено), "Сборка",, Количество);		
	КонецЕсли; 	
КонецПроцедуры

Функция ДатаСрокаКорректна(Номенклатура, СрокГодностиТовара, СрокГодностиШК)
	Если ТипЗнч(СрокГодностиТовара) <> Тип("Дата") или ТипЗнч(СрокГодностиШК) <> Тип("Дата") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗапросБренда = Новый Запрос;
	ЗапросБренда.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Объект
	|	И ЗначенияСвойствОбъектов.Свойство = &Свойство";
	ЗапросБренда.УстановитьПараметр("Объект", Номенклатура);
	ЗапросБренда.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000000002"));
	Результат = ЗапросБренда.Выполнить();
	ЕстьБрендАпицена = Ложь; 
	ЕстьБрендЭкопром = Ложь;
	Если не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		БрендАпицена = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000120");
		БрендЭкопром = Справочники.ЗначенияСвойствОбъектов.НайтиПоКоду("000000058");
		ЕстьБрендАпицена = Выборка.Значение = БрендАпицена;
		ЕстьБрендЭкопром = Выборка.Значение = БрендЭкопром;
	КонецЕсли;
	
	Если ЕстьБрендАпицена Тогда
		МинДата = ДобавитьМесяц(НачалоМесяца(СрокГодностиТовара),-2);
		МаксДата = КонецМесяца(ДобавитьМесяц(СрокГодностиТовара,2));		
		Возврат СрокГодностиШК >= МинДата И СрокГодностиШК <= МаксДата;
	ИначеЕсли ЕстьБрендЭкопром Тогда
		МинДата = ДобавитьМесяц(НачалоМесяца(СрокГодностиТовара),-2);
		МаксДата = КонецМесяца(ДобавитьМесяц(СрокГодностиТовара,2));		
		Возврат СрокГодностиШК >= МинДата И СрокГодностиШК <= МаксДата;
	Иначе
		Возврат КонецМесяца(СрокГодностиТовара) = КонецМесяца(СрокГодностиШК);
	КонецЕсли;	
КонецФункции

Процедура ФормаСканированияТовара_ТабличноеПолеТоварПриАктивизацииСтроки(Форма) Экспорт
	//Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШКТовара;
	//НажатьТаб(2);
КонецПроцедуры

Процедура ФормаСканированияТовара_ПолеТабличногоДокументаТоварВыбор(Форма, НомерСтроки) Экспорт
	ИзменитьРазмерШрифта(НомерСтроки);
	
	ОбновитьФормуСканированияТовара(Форма, 2);
КонецПроцедуры

Процедура ФормаСканированияТовара_УменьшитьШрифт(Форма) Экспорт
	РазмерШрифтаТаблиц = ?(РазмерШрифтаТаблиц < 10, 10, РазмерШрифтаТаблиц - 1);
	СохранитьИзмененияНастроекПользователя();
	ОбновитьФормуСканированияТовара(Форма);
КонецПроцедуры

Процедура ФормаСканированияТовара_УвеличитьШрифт(Форма) Экспорт
	РазмерШрифтаТаблиц = ?(РазмерШрифтаТаблиц > 30, 30, РазмерШрифтаТаблиц + 1);
	СохранитьИзмененияНастроекПользователя();
	ОбновитьФормуСканированияТовара(Форма);
КонецПроцедуры
#КонецОбласти

#Область Форма_возврата_товара
Процедура ФормаВозвратаТовара_ПриОткрытии(Форма) Экспорт
	Форма.Заголовок = "Возврат товара";
	ОбновитьФормуВозвратаТовара(Форма, 0);
КонецПроцедуры

Процедура ОбновитьФормуВозвратаТовара(Форма, НажатьТаб = 1)
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	Отсканировано = 0;
	Для Каждого СтрокаТовара Из Товар Цикл
		Отсканировано = Отсканировано + ?(СтрокаТовара.Отсканирован, 1, 0);
	КонецЦикла;
	
	Форма.ИнформацияПоДокументу = "Позиций: Отсканировано - " + Строка(Отсканировано) + " / Осталось - " + Строка(Товар.Количество() - Отсканировано);
	ЭлементыФормы.ИндикаторСканирования.МаксимальноеЗначение = Товар.Количество();
	Форма.ИндикаторСканирования = Отсканировано;
	
	ЭлементыФормы.ПолеТабличногоДокументаТовар.Очистить();
	ИмяМакета = ?(ТипЭкрана = 2, "МакетСпискаПозиций_480х800", ?(ТипЭкрана = 3, "МакетСпискаПозиций_1280х768", "МакетСпискаПозиций"));
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ИндексКолонкиНаименования = ?(ТипЭкрана = 3, 3, 3);
	ОбластьШапка.Область(1,ИндексКолонкиНаименования,1,ИндексКолонкиНаименования).РастягиватьПоГоризонтали = Истина;
	ОбластьСтрока.Область(1,ИндексКолонкиНаименования,1,ИндексКолонкиНаименования).РастягиватьПоГоризонтали = Истина;
	ОбластьШапка.Область(1,1,1,ОбластьШапка.ШиринаТаблицы).Шрифт = Новый Шрифт(ОбластьШапка.Область(1,1,1,ОбластьШапка.ШиринаТаблицы).Шрифт,,РазмерШрифтаТаблиц);
	ОбластьСтрока.Область(1,1,1,ОбластьСтрока.ШиринаТаблицы).Шрифт = Новый Шрифт(ОбластьСтрока.Область(1,1,1,ОбластьСтрока.ШиринаТаблицы).Шрифт,,РазмерШрифтаТаблиц);
	
	ЭлементыФормы.ПолеТабличногоДокументаТовар.Вывести(ОбластьШапка);
	Для Каждого СтрокаТовара Из Товар Цикл
		Если СтрокаТовара.Отсканирован Тогда
			Продолжить;
		КонецЕсли;
		ОбластьСтрока.Параметры.Заполнить(СтрокаТовара);
		ЭлементыФормы.ПолеТабличногоДокументаТовар.Вывести(ОбластьСтрока);
	КонецЦикла;
	ЭлементыФормы.ПолеТабличногоДокументаТовар.ФиксацияСверху = 1;
	ЭлементыФормы.ПолеТабличногоДокументаТовар.ГоризонтальнаяПолосаПрокрутки = Ложь;
	
	НажатьТаб(НажатьТаб);
	//Попытка
	//    wsh = Новый COMОбъект("WSCript.Shell");
	//	КолНажатий = 0;
	//	Пока КолНажатий < НажатьТаб Цикл
	//   		wsh.sendkeys("{TAB}");
	//		КолНажатий = КолНажатий + 1;
	//	КонецЦикла;
	//Исключение
	//КонецПопытки;	
	
	Форма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКТовара;	
КонецПроцедуры

Процедура ФормаВозвратаТовара_КнопкаПринятьНажатие(Форма) Экспорт
	///*** Создать корректировку на отсканированные позиции возврата
	
	Отсканировано = 0;
	Для Каждого СтрокаТовара Из Товар Цикл
		Отсканировано = Отсканировано + ?(СтрокаТовара.Отсканирован, 1, 0);
	КонецЦикла;
	Если Отсканировано = 0 Тогда
		Форма.Закрыть(1);
		Возврат;
	КонецЕсли;
	
	ЗапросРеализации = Новый Запрос;
	ЗапросРеализации.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Сделка = &Сделка";
	ЗапросРеализации.УстановитьПараметр("Сделка", Документ);
	Выборка = ЗапросРеализации.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументРеализации = Выборка.Ссылка;
	Иначе
		///*** Реализация не создана, поэтому можно просто отменить проведение самого заказа
		ДокументЗаказОбъект = Документ.ПолучитьОбъект();
		ДокументЗаказОбъект.Комментарий = "ВОЗВРАТ "+ДокументЗаказОбъект.Комментарий;
		ДокументЗаказОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Форма.Закрыть(0);
		Возврат;
	КонецЕсли;
	
	ЗапросКорректироки = Новый Запрос;
	ЗапросКорректироки.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.ДокументРеализации = &ДокументРеализации";
	ЗапросКорректироки.УстановитьПараметр("ДокументРеализации", ДокументРеализации);
	Выборка = ЗапросКорректироки.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстПредупреждения = "На этот документ возврат уже был создан.";
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(1, "ОК");
		мВопрос(ТекстПредупреждения, СписокКнопок);
		Форма.Закрыть(0);
		Возврат;		
	КонецЕсли;
	
	Контрагент = ДокументРеализации.Контрагент;
	Если Контрагент = КонтрагентОЗОН Тогда
		ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	КонецЕсли;
	
	ДокументКорректировки = Документы.КорректировкаРеализации.СоздатьДокумент();
	ДокументКорректировки.Дата = ТекущаяДата();
	ДокументКорректировки.БанковскийСчетОрганизации = ДокументРеализации.БанковскийСчетОрганизации;
	ДокументКорректировки.ВидОперации = ВидОперации;
	ДокументКорректировки.ОтражатьВБухгалтерскомУчете = Истина;
	ДокументКорректировки.ОтражатьВНалоговомУчете = Истина;
	ДокументКорректировки.ОтражатьВУправленческомУчете = Истина;
	ДокументКорректировки.КратностьВзаиморасчетов = 1;
	ДокументКорректировки.КурсВзаиморасчетов = 1;
	ДокументКорректировки.Организация = ДокументРеализации.Организация;
	ДокументКорректировки.ДокументРеализации = ДокументРеализации; 
	ДокументКорректировки.Подразделение = ДокументРеализации.Подразделение;
	ДокументКорректировки.Сделка = Документ;
	ДокументКорректировки.Контрагент = Контрагент;
	ДокументКорректировки.ДоговорКонтрагента = ДокументРеализации.ДоговорКонтрагента;
	ДокументКорректировки.Склад = СкладВозврата;
	ДокументКорректировки.ВалютаДокумента = ДокументРеализации.ВалютаДокумента;
	ДокументКорректировки.УчитыватьНДС = ДокументРеализации.УчитыватьНДС;
	ДокументКорректировки.СуммаВключаетНДС = ДокументРеализации.СуммаВключаетНДС;
	ДокументКорректировки.КорректироватьБУиНУ = Истина;
	ДокументКорректировки.ИсправляемыйДокументРеализации = ДокументРеализации;
	ДокументКорректировки.ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
	ДокументКорректировки.КорректироватьНДС = Истина;
	
	ТоварыРеализации = ДокументРеализации.Товары;
	ТоварыКорректировки = ДокументКорректировки.Товары;
	Для Каждого СтрокаТовараРеализации Из ТоварыРеализации Цикл
		СтрокаТовараФормы = Товар.Найти(СтрокаТовараРеализации.НомерСтроки, "НомерСтроки");
		ВозвращенноеКоличество = СтрокаТовараФормы.Количество;
		Остаток = СтрокаТовараРеализации.Количество - ВозвращенноеКоличество;
		
		СтрокаТовараКорректировки = ТоварыКорректировки.Добавить();
		СтрокаТовараКорректировки.Номенклатура = СтрокаТовараРеализации.Номенклатура;
		СтрокаТовараКорректировки.ХарактеристикаНоменклатуры = СтрокаТовараРеализации.ХарактеристикаНоменклатуры;
		СтрокаТовараКорректировки.ЕдиницаИзмерения = СтрокаТовараРеализации.ЕдиницаИзмерения;
		СтрокаТовараКорректировки.ЕдиницаИзмеренияМест = СтрокаТовараРеализации.ЕдиницаИзмеренияМест;
		СтрокаТовараКорректировки.Качество = СтрокаТовараРеализации.Качество;
		СтрокаТовараКорректировки.Количество = ?(ВозвращенноеКоличество > 0, Остаток, СтрокаТовараРеализации.Количество);
		СтрокаТовараКорректировки.КоличествоМест = СтрокаТовараРеализации.КоличествоМест;
		СтрокаТовараКорректировки.Коэффициент = СтрокаТовараРеализации.Коэффициент;
		СтрокаТовараКорректировки.СерияНоменклатуры = СтрокаТовараРеализации.СерияНоменклатуры;
		СтрокаТовараКорректировки.Склад = СтрокаТовараРеализации.Склад;
		СтрокаТовараКорректировки.СпособСписанияОстаткаТоваров = СтрокаТовараРеализации.СпособСписанияОстаткаТоваров;
		СтрокаТовараКорректировки.Цена = СтрокаТовараРеализации.Цена;
		СтрокаТовараКорректировки.Сумма = ?(ВозвращенноеКоличество > 0, СтрокаТовараРеализации.Сумма * Остаток / СтрокаТовараРеализации.Количество, СтрокаТовараРеализации.Сумма);
		СтрокаТовараКорректировки.СтавкаНДС = СтрокаТовараРеализации.СтавкаНДС;
		СтрокаТовараКорректировки.СуммаНДС = ?(ВозвращенноеКоличество > 0, СтрокаТовараРеализации.СуммаНДС * Остаток / СтрокаТовараРеализации.Количество, СтрокаТовараРеализации.СуммаНДС);
		СтрокаТовараКорректировки.ЗаказПокупателя = СтрокаТовараРеализации.ЗаказПокупателя;
		СтрокаТовараКорректировки.КоличествоДоИзменения = СтрокаТовараРеализации.Количество;
		СтрокаТовараКорректировки.ЦенаДоИзменения = СтрокаТовараРеализации.Цена;
		СтрокаТовараКорректировки.СуммаДоИзменения = СтрокаТовараРеализации.Сумма;
		СтрокаТовараКорректировки.СтавкаНДСДоИзменения = СтрокаТовараРеализации.СтавкаНДС;
		СтрокаТовараКорректировки.СуммаНДСДоИзменения = СтрокаТовараРеализации.СуммаНДС;
		СтрокаТовараКорректировки.ЕстьВДокументеРеализации = Истина;
		СтрокаТовараКорректировки.ЦенаДоКорректировки = СтрокаТовараРеализации.Цена;
		СтрокаТовараКорректировки.СуммаДоКорректировки = СтрокаТовараРеализации.Сумма;
		СтрокаТовараКорректировки.СуммаНДСДоКорректировки = СтрокаТовараРеализации.СуммаНДС;
		СтрокаТовараКорректировки.ОтражатьТоварныйУчет = ВозвращенноеКоличество > 0;
		СтрокаТовараКорректировки.ПроцентСкидкиНаценки = СтрокаТовараРеализации.ПроцентСкидкиНаценки;
		СтрокаТовараКорректировки.ПроцентАвтоматическихСкидок = СтрокаТовараРеализации.ПроцентАвтоматическихСкидок;
		СтрокаТовараКорректировки.УсловиеАвтоматическойСкидки = СтрокаТовараРеализации.УсловиеАвтоматическойСкидки;
		СтрокаТовараКорректировки.ЗначениеУсловияАвтоматическойСкидки = СтрокаТовараРеализации.ЗначениеУсловияАвтоматическойСкидки;
	КонецЦикла;
	
	Попытка 
		ДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстПредупреждения = "Не удалось провести документ корректировки.";
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(1, "ОК");
		мВопрос(ТекстПредупреждения, СписокКнопок);
		Форма.Закрыть(0);
		Возврат;
	КонецПопытки;
	
	Если Контрагент <> КонтрагентОЗОН Тогда
		
		//РаботаСДиалогами.ВвестиСчетФактуру(ДокументКорректировки, ДокументКорректировки.ПолучитьФорму("ФормаДокумента"), "СчетФактураВыданный");
		СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактура.Дата = ТекущаяДата();
		СчетФактура.ДокументОснование = ДокументКорректировки.Ссылка;
		СчетФактура.Организация = ДокументКорректировки.Организация;
		СчетФактура.УдалитьНаАванс = Ложь;
		СчетФактура.Под0 = Ложь;
		СчетФактура.Контрагент = ДокументКорректировки.Контрагент;
		СчетФактура.ВалютаДокумента = ДокументКорректировки.ВалютаДокумента;
		СчетФактура.СуммаДокумента = ДокументКорректировки.СуммаДокумента;
		СчетФактура.ДоговорКонтрагента = ДокументКорректировки.ДоговорКонтрагента;
		СчетФактура.СформированПриВводеНачальныхОстатковНДС = Ложь;
		СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
		СчетФактура.КодВидаОперации = "01";
		СчетФактура.КодСпособаВыставления = 1;
		СчетФактура.ДатаВыставления = ТекущаяДата();
		СчетФактура.Выставлен = Истина;
		СчетФактура.Исправление = Ложь;
		СчетФактура.СуммаУменьшение = -ДокументКорректировки.СуммаДокумента;
		СчетФактура.УдалитьУчитыватьИсправлениеИсходногоДокумента = Ложь;
		СчетФактура.СчетФактураБезНДС = Ложь;
		СчетФактура.СчетФактураНеВыставляется = Ложь;
		СчетФактура.СуммаНДСУменьшение = ПолучитьСуммуНДСУменьшение(ДокументКорректировки);
		СчетФактура.СуммаНДС = -СчетФактура.СуммаНДСУменьшение;
		СчетФактура.ИсправляемыйСчетФактура = ПолучитьСФПоРеализации(ДокументРеализации);
		СчетФактура.СводныйКорректировочный = Ложь;
		СчетФактура.СводныйКомиссионный = Ложь;
		СчетФактура.КодВидаОперацииНаУменьшение = "18";
		
		СтрокаОснования = СчетФактура.ДокументыОснования.Добавить();
		СтрокаОснования.ДокументОснование = ДокументКорректировки.Ссылка;
		СтрокаОснования.НомерИсходногоДокумента = СтрокаОснования.ДокументОснование.Номер;
		СтрокаОснования.ДатаИсходногоДокумента = СтрокаОснования.ДокументОснование.Дата;
		СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Ложь;
		СтрокаОснования.СуммаУменьшение = СчетФактура.СуммаУменьшение;
		СтрокаОснования.СуммаНДСУменьшение = СчетФактура.СуммаНДСУменьшение;
		
		Попытка 
			СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;	
		
	КонецЕсли;
	
	///*** Создан документ Корректировка и Счёт-фактура, Заказ покупателя необходимо установить статус Возвращён
	Статус = ?(ДокументРеализации.СуммаДокумента = ДокументКорректировки.СуммаДокумента, Перечисления.БС_СтатусыДокументов.Возвращен, Перечисления.БС_СтатусыДокументов.Возвращен);
	ИзменитьСтатусДокумента(Документ, Статус, Пользователи, ТекущаяДата());
	
	Форма.Закрыть(0);
КонецПроцедуры

Функция ПолучитьСуммуНДСУменьшение(ДокументКорректировки)
	СуммаНДСДо = 0;
	СуммаНДСПосле = 0;
	Для Каждого СтрокаТовара Из ДокументКорректировки.Товары Цикл
		СуммаНДСДо = СтрокаТовара.СуммаНДСДоКорректировки;
		СуммаНДСПосле = СтрокаТовара.СуммаНДС;
	КонецЦикла;
	Возврат СуммаНДСДо-СуммаНДСПосле;
КонецФункции

Функция ПолучитьСФПоРеализации(ДокументРеализации)
	ЗапросСФ = Новый Запрос;
	ЗапросСФ.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";
	ЗапросСФ.УстановитьПараметр("ДокументОснование", ДокументРеализации);
	Выборка = ЗапросСФ.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ФормаВозвратаТовара_КнопкаОтменаНажатие(Форма) Экспорт
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(1, "Да");
	СписокКнопок.Добавить(2, "Нет");	
	Если мВопрос("Отменить возврат товара?", СписокКнопок) = 1 Тогда
		Форма.Закрыть(1);		
	КонецЕсли;
КонецПроцедуры

Процедура ФормаВозвратаТовара_ПолеВводаШКТовараПриИзменении(Форма) Экспорт
	Если Форма.ШтрихКод = "" Тогда Возврат КонецЕсли;
	ШКТовара = Форма.ШтрихКод;
	Форма.ШтрихКод = "";
	Если ПроверитьШтрихКод(ШКТовара) Тогда
		ТекстПредупреждения = "Введён неверный штрих код. Должны быть только цифры в количестве от 9 до 14.";
		РазбитьСтроку(ТекстПредупреждения);
		мПредупреждение(ТекстПредупреждения);
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод";
	Запрос.УстановитьПараметр("Штрихкод", ШКТовара);
	Результат = Запрос.Выполнить();
	
	Если Результат = Неопределено Тогда
		// *** Ошибка выполнения запроса
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	ШКВБазеНайден = Выборка.Следующий();
	
	РезультатВызоваФормы = Неопределено;
	Если Не ШКВБазеНайден Тогда
		ТекстПредупреждения = "Штрихкод не найден";
		РазбитьСтроку(ТекстПредупреждения);
		мПредупреждение(ТекстПредупреждения);		
		Возврат;
	Иначе
		НоменклатураЕстьВСписке = Товар.Найти(Выборка.Владелец, "Номенклатура") <> Неопределено;
		Если Не НоменклатураЕстьВСписке Тогда
			ТекстПредупреждения = "Этой позиции нет в текущем документе: """+Выборка.Владелец+""".";
			РазбитьСтроку(ТекстПредупреждения);
			мПредупреждение(ТекстПредупреждения);		
			Возврат;
		Иначе
			РезультатВызоваФормы = Выборка.Владелец;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(РезультатВызоваФормы) = Тип("СправочникСсылка.Номенклатура") Тогда
		Количество = 0;
		ТоварУжеСканировался = Ложь;
		МассивСтрок = Товар.НайтиСтроки(Новый Структура("Номенклатура", РезультатВызоваФормы));
		НоменклатураНаименование = "";
		Для Каждого ЭлементМассива Из МассивСтрок Цикл
			Количество = Количество + ЭлементМассива.Количество;
			ТоварУжеСканировался = ЭлементМассива.Отсканирован;
			НоменклатураНаименование = ЭлементМассива.Наименование;
		КонецЦикла;
		
		ФормаВводаКоличестваТовара_Наименование = ?(ТипЭкрана = 2, "ФормаВводаКоличестваТовара_480х800", ?(ТипЭкрана = 3, "ФормаВводаКоличестваТовара_1280х768", "ФормаВводаКоличестваТовара"));
		ФормаВводаКоличестваТовара = ПолучитьФорму(ФормаВводаКоличестваТовара_Наименование);
		ФормаВводаКоличестваТовара.ПолеВводаКоличество = Количество;
		ФормаВводаКоличестваТовара.МаксимальноеЗначение = Количество;			
		ФормаВводаКоличестваТовара.НадписьЕдиницаИзмерения = ЭлементМассива.Единица;			
		Результат = ФормаВводаКоличестваТовара.ОткрытьМодально();
		
		Если Результат = 0 Тогда
			Для Каждого ЭлементМассива Из МассивСтрок Цикл
				ЭлементМассива.Отсканирован = Истина;
			КонецЦикла;
			
			ОбновитьФормуВозвратаТовара(Форма, 3);
		КонецЕсли;						
	КонецЕсли;
	//ИзмененияКонфигурации2.ДобавитьЗаписьВРегНоменклатураПоТСД(РезультатВызоваФормы, ИмяТСД, Пользователь, Документ, ТекущаяДата());		
КонецПроцедуры

Процедура ФормаВозвратаТовара_ТабличноеПолеТоварПриАктивизацииСтроки(Форма) Экспорт
	Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШКТовара;
КонецПроцедуры

Процедура ФормаВозвратаТовара_ПолеТабличногоДокументаТоварВыбор(Форма, НомерСтроки) Экспорт
	ИзменитьРазмерШрифта(НомерСтроки);
	
	ОбновитьФормуВозвратаТовара(Форма);
КонецПроцедуры
#КонецОбласти

#Область Форма_печати_этикеток
Процедура ФормаПечатиЭтикеток_ПриОткрытии(Форма) Экспорт
	СоставУпаковок = ПолучитьСоставУпаковокПоЗаказу(Документ);
	КоличествоМест = СоставУпаковок["КоличествоУпаковок"];
	ЕстьХолод = СоставУпаковок["ЕстьХолод"];
	Форма.КолМест = ?(ЗначениеЗаполнено(КоличествоМест), КоличествоМест, 1);
	НачатьС = 1;
	Форма.ФлажокХолод = ?(ЗначениеЗаполнено(ЕстьХолод), ЕстьХолод, Ложь);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ДоступностьКнопкиПечатиЭтикеток = Документ.СкладГруппа = СкладГурьянова 
		или Документ.СкладГруппа = СкладНоворязанка
		или Документ.СкладГруппа = ГруппаСкладовМосква;
	Иначе
		ДоступностьКнопкиПечатиЭтикеток = Истина;
	КонецЕсли;
	
	Форма.ЭлементыФормы.КнопкаПечать.Доступность = ДоступностьКнопкиПечатиЭтикеток;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Форма.НаименованиеКонтрагента = Форма.ДокументЗаказ.Контрагент.Наименование;
		Форма.Направление = Форма.ДокументЗаказ.Контрагент.Регион.ЖДСтанцияНазначения;
		Форма.НомерЗаказа = ПолучитьКороткийНомерЗаказа(Форма.ДокументЗаказ.Номер);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Форма.НаименованиеКонтрагента = СкладДокумента;
		Форма.Направление = Документ.Заказчик;
		Форма.НомерЗаказа = ПолучитьКороткийНомерЗаказа(Документ.Номер);
	КонецЕсли;
КонецПроцедуры

Процедура ФормаПечатиЭтикеток_КнопкаПечатьНажатие(Форма) Экспорт
	Форма.Закрыть(ПечатьЭтикетки(Форма)); 
КонецПроцедуры          

Процедура ФормаПечатиЭтикеток_КнопкаСохранитьНажатие(Форма) Экспорт
	СоставУпаковок = Новый Структура;
	СоставУпаковок.Вставить("ВсегоУпаковок", Форма.КолМест);
	СоставУпаковок.Вставить("ЕстьХолод", Форма.ФлажокХолод);
	Форма.Закрыть(СоставУпаковок);
КонецПроцедуры  

Функция ПечатьЭтикетки(Форма)
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(1, "Склад 1");
	СписокКнопок.Добавить(2, "Комната А1");
	Ответ = мВопрос("Выберите принтер", СписокКнопок);
	Если Ответ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Ответ = 1 Тогда
		ВыбранныйПринтер = "Brother QL-810W Sklad 1";
	Иначе
		ВыбранныйПринтер = "Brother QL-720NW A-1";
	КонецЕсли;
	
	Параметры = Новый Структура;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Параметры.Вставить("Направление", Форма.ДокументЗаказ.Контрагент.Регион.ЖДСтанцияНазначения);
		МассивСтрокНаименованияКонтрагента = ПолучитьМассивСтрокНаименованияКонтрагента(Форма.ДокументЗаказ.Контрагент.Наименование);
		Параметры.Вставить("КонтрагентСтрока1", МассивСтрокНаименованияКонтрагента[0]);
		Параметры.Вставить("КонтрагентСтрока2", МассивСтрокНаименованияКонтрагента[1]);
		Параметры.Вставить("КороткийНомерЗаказа", ПолучитьКороткийНомерЗаказа(Форма.ДокументЗаказ.Номер, Ложь));
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Параметры.Вставить("Направление", Документ.Заказчик);
		МассивСтрокНаименованияКонтрагента = ПолучитьМассивСтрокНаименованияКонтрагента(СкладДокумента);
		Параметры.Вставить("КонтрагентСтрока1", МассивСтрокНаименованияКонтрагента[0]);
		Параметры.Вставить("КонтрагентСтрока2", МассивСтрокНаименованияКонтрагента[1]);
		Параметры.Вставить("КороткийНомерЗаказа", ПолучитьКороткийНомерЗаказа(Документ.Номер, Ложь));
	КонецЕсли;
	
	ВсегоЭтикеток = Форма.КолМест;
	Для НомерМеста = 1 По ВсегоЭтикеток Цикл
		ЭтоХолод = ((НомерМеста=ВсегоЭтикеток) и Форма.ФлажокХолод);
		Параметры.Вставить("ИнформацияОМесте", "Место "+?(ЭтоХолод, "Хол.", НомерМеста)+" из "+ВсегоЭтикеток+?(Форма.ФлажокХолод, "(Х)", ""));
		
		ТабДок = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("МакетЭтикетки");
		Область = Макет.ПолучитьОбласть("Этикетка");
		Область.Параметры.Заполнить(Параметры);
		ТекстШК = ПолучитьТекстШтрихКодаЭтикеткиЗаказа(Форма.ДокументЗаказ.Дата, ПолучитьКороткийНомерЗаказа(Форма.ДокументЗаказ.Номер, Истина), НомерМеста, ЭтоХолод);
		
		//Область.Рисунки.ШтрихКод.Объект.ТипКода = 4;
		//Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
		//Область.Рисунки.ШтрихКод.Линия = Линия;
		//Область.Рисунки.ШтрихКод.Объект.Сообщение = ТекстШК;
		//Область.Рисунки.ШтрихКод.Объект.ТекстКода = ТекстШК; 
		
		КартинкаШК = СформироватьШтрихКод(,,ТекстШК);
		РисунокШК = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		РисунокШК.Расположить(Область.Область("R1C1:R1C2"));
		РисунокШК.Картинка = КартинкаШК;
		РисунокШК.ГраницаСверху = Ложь;
		РисунокШК.ГраницаСнизу = Ложь;
		РисунокШК.ГраницаСправа = Ложь;
		РисунокШК.ГраницаСлева = Ложь;  
		
		ТабДок.Вывести(Область);
		
		ТабДок.ИмяПринтера = ВыбранныйПринтер;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.АвтоМасштаб = Истина;
		ТабДок.ПолеСверху = 3;
		ТабДок.ПолеСлева = 3;
		ТабДок.ПолеСнизу = 3;
		ТабДок.ПолеСправа = 3;
		ТабДок.Напечатать(не Форма.ФлажокДиалогПечати);
	КонецЦикла;
	
	СоставУпаковок = Новый Структура;
	СоставУпаковок.Вставить("ВсегоУпаковок", ВсегоЭтикеток);
	СоставУпаковок.Вставить("ЕстьХолод", Форма.ФлажокХолод);
	Возврат СоставУпаковок;
КонецФункции

Процедура ФормаПечатиЭтикеток_КнопкаИзменитьКоличествоНажатие(Форма, Элемент) Экспорт 
	Если Элемент.Имя = "КнопкаПлюс1" Тогда
		Форма.КолМест = Форма.КолМест + 1;
	ИначеЕсли Элемент.Имя = "КнопкаМинус1" Тогда
		Форма.КолМест = ?(Форма.КолМест = 1, 1, Форма.КолМест-1);
	КонецЕсли;
КонецПроцедуры

Процедура ФормаПечатиЭтикеток_КнопкаЗакрытьНажатие(Форма) Экспорт
	Форма.Закрыть();
КонецПроцедуры

Функция ПолучитьМассивСтрокНаименованияКонтрагента(КонтрагентНаименование)
	ПредельнаяДлина = 40;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("");
	МассивСтрок.Добавить("");
	Если СтрДлина(КонтрагентНаименование) < ПредельнаяДлина Тогда
		МассивСтрок[0] = КонтрагентНаименование;
	Иначе
		ПозицияПробелаДляПереноса = СтрНайти(КонтрагентНаименование, " ", НаправлениеПоиска.СКонца, ПредельнаяДлина);
		Если ПозицияПробелаДляПереноса < ПредельнаяДлина/2 Тогда
			МассивСтрок[0] = Лев(КонтрагентНаименование, ПредельнаяДлина);
			МассивСтрок[1] = Сред(КонтрагентНаименование, ПредельнаяДлина+1, ПредельнаяДлина);
		Иначе
			МассивСтрок[0] = Лев(КонтрагентНаименование, ПозицияПробелаДляПереноса-1);
			МассивСтрок[1] = Сред(КонтрагентНаименование, ПозицияПробелаДляПереноса+1, ПредельнаяДлина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивСтрок;
КонецФункции

#КонецОбласти

#Область Форма_товара_из_списка
Процедура ФормаТовараИзСписка_ПриОткрытии(Форма) Экспорт
	// ИзменитьЦветФона
	Форма.ЭлементыФормы.НадписьИнформацияОТоваре.ЦветФона = Форма.ЦветФона;
	Если Форма.СрокПлохой Тогда
		Форма.ЭлементыФормы.НадписьПлохогоСрока.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ФормаТовараИзСписка_КнопкаТоварСобранНажатие(Форма) Экспорт
	Форма.Закрыть(0);
КонецПроцедуры

Процедура ФормаТовараИзСписка_КнопкаНеверныйШтрихКодНажатие(Форма) Экспорт
	ФормаНеНайденогоШК_Наименование = ?(ТипЭкрана = 2, "ФормаНеНайденогоШК_480х800", ?(ТипЭкрана = 3, "ФормаНеНайденогоШК_1280х768", "ФормаНеНайденогоШК"));
	ФормаНеНайденогоШК = ПолучитьФорму(ФормаНеНайденогоШК_Наименование);
	Результат = ФормаНеНайденогоШК.ОткрытьМодально();
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Номенклатура") Тогда
		//Штрих-код добавлен в базу
		НоменклатураСсылка = Результат;
		СтрокиТовара = Товар.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураСсылка));
		Если СтрокиТовара.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из СтрокиТовара Цикл
				Форма.Количество = Форма.Количество + ТекСтрока.Количество;
			КонецЦикла;
			Форма.Единица = СтрокиТовара[0].Единица;
			Форма.НоменклатураНаименование = СтрокиТовара[0].Наименование;
			Форма.ОбщаяИнформация = "Необходимо собрать:";
			Форма.ЦветФона = WebЦвета.СветлоЗеленый;
		КонецЕсли;
		ФормаТовараИзСписка_ПриОткрытии(Форма);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область Форма_частичной_инвентаризации
Процедура ФормаЧастичнойИнвентаризации_ПриОткрытии(Форма) Экспорт
	ТаблицаИнвентаризации = Форма.ТаблицаИнвентаризации;
	ТаблицаИнвентаризации.Колонки.Добавить("Проверен");
	ТаблицаИнвентаризации.Колонки.Добавить("Номенклатура");
	ТаблицаИнвентаризации.Колонки.Добавить("Место");
	
	ДатаНачалаИнвентаризации = ПолучитьДатуНачалаИнвентаризации();
	ЗаполнитьСписокМест(Форма);
	ЗаполнитьТаблицуИнвентаризации(Форма);
КонецПроцедуры

Функция ПолучитьДатуНачалаИнвентаризации()
	ЗапросДатИнвентаризаций = Новый Запрос;
	ЗапросДатИнвентаризаций.Текст =
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладе.Дата КАК Дата
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.ПометкаУдаления = ЛОЖЬ
	|	И ИнвентаризацияТоваровНаСкладе.Дата < &ДатаТекИнвентаризации
	|	И ИнвентаризацияТоваровНаСкладе.Склад = &Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	ЗапросДатИнвентаризаций.УстановитьПараметр("ДатаТекИнвентаризации", ДокументИнвентаризации.Дата);
	ЗапросДатИнвентаризаций.УстановитьПараметр("Склад", ДокументИнвентаризации.Склад);
	ТекДата = ДокументИнвентаризации.Дата;
	Выборка = ЗапросДатИнвентаризаций.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если (ТекДата - Выборка.Дата) > 86400*2 Тогда
			Возврат ТекДата;
		Иначе
			ТекДата = Выборка.Дата;
		КонецЕсли;
	КонецЦикла;
	Возврат ТекДата;
КонецФункции

Процедура ЗаполнитьСписокМест(Форма)
	
	Форма.СписокМест.Очистить();
	
	ЗапросМест = Новый Запрос;
	ЗапросМест.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаХраненияНоменклатуры.МестоХранения.Родитель КАК Родитель,
	|	ЕСТЬNULL(МестаХраненияНоменклатуры.МестоХранения.Наименование, ""не задано"") КАК Наименование,
	|	ЕСТЬNULL(МестаХраненияНоменклатуры.МестоХранения, ""не задано"") КАК МестоХранения
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИнвентаризацияТоваровНаСкладеТовары.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|	ГДЕ
	|		ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	|		ПО (МестаХраненияНоменклатуры.Номенклатура = ВложенныйЗапрос.Номенклатура)";
	ЗапросМест.УстановитьПараметр("Ссылка", ДокументИнвентаризации);
	Выборка = ЗапросМест.Выполнить().Выбрать();
	Форма.СписокМест.Добавить(0, "Все");
	Пока Выборка.Следующий() Цикл
		Форма.СписокМест.Добавить(Выборка.МестоХранения, ?(ЗначениеЗаполнено(Выборка.Родитель), Строка(Выборка.Родитель)+"/", "") + ?(ЗначениеЗаполнено(Выборка.Наименование), Выборка.Наименование, ""));
	КонецЦикла;
	
	Форма.ЭлементыФормы.ПолеВыбораФильтраПоМесту.СписокВыбора = Форма.СписокМест;
	Форма.ПолеВыбораФильтраПоМесту = Форма.СписокМест[0].Значение;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуИнвентаризации(Форма)
	ЭлементыФормы = Форма.ЭлементыФормы;
	
	ЗапросНоменклатуры = Новый Запрос;
	ЗапросНоменклатуры.Текст =
	"ВЫБРАТЬ
	|	ДокументИнветаризацииТовары.Номенклатура КАК Номенклатура,
	|	спрНоменклатура.Артикул КАК Артикул,
	|	ВЫБОР
	|		КОГДА ЗапросИзРегистра.КоличествоВРегистре ЕСТЬ NULL
	|				ИЛИ ЗапросИзРегистра.КоличествоВРегистре = 0
	|			ТОГДА ""НЕТ""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СУММА(1) > ЗапросИзРегистра.КоличествоВРегистре
	|					ТОГДА ""ЧАСТИЧНО""
	|				ИНАЧЕ ""ДА""
	|			КОНЕЦ
	|	КОНЕЦ КАК Проверен,
	|	ЗапросМеста.НаименованиеМеста КАК НаименованиеМеста,
	|	ЗапросМеста.МестоХранения КАК Место
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ДокументИнветаризацииТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО ДокументИнветаризацииТовары.Номенклатура = спрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Инвентаризация.Номенклатура КАК Номенклатура,
	|			СУММА(1) КАК КоличествоВРегистре
	|		ИЗ
	|			РегистрСведений.Инвентаризация КАК Инвентаризация
	|		ГДЕ
	|			Инвентаризация.Документ = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Инвентаризация.Номенклатура) КАК ЗапросИзРегистра
	|		ПО ДокументИнветаризацииТовары.Номенклатура = ЗапросИзРегистра.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МестаХраненияНоменклатуры.Номенклатура КАК Номенклатура,
	|			ВЫБОР
	|				КОГДА МестаХраненияНоменклатуры.МестоХранения.Родитель.Наименование ЕСТЬ NULL
	|					ТОГДА """"
	|				ИНАЧЕ МестаХраненияНоменклатуры.МестоХранения.Родитель.Наименование + ""/""
	|			КОНЕЦ + МестаХраненияНоменклатуры.МестоХранения.Наименование КАК НаименованиеМеста,
	|			МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
	|		ИЗ
	|			РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры) КАК ЗапросМеста
	|		ПО ДокументИнветаризацииТовары.Номенклатура = ЗапросМеста.Номенклатура
	|ГДЕ
	|	ДокументИнветаризацииТовары.Ссылка = &Ссылка
	|	И &Место
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументИнветаризацииТовары.Номенклатура,
	|	спрНоменклатура.Артикул,
	|	ЗапросИзРегистра.КоличествоВРегистре,
	|	ЗапросМеста.НаименованиеМеста,
	|	ЗапросМеста.МестоХранения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проверен УБЫВ,
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	ЗапросНоменклатуры.УстановитьПараметр("Ссылка", ДокументИнвентаризации);
	Если Форма.ПолеВыбораФильтраПоМесту = Форма.СписокМест[0].Значение Тогда
		ЗапросНоменклатуры.УстановитьПараметр("Место", Истина);
	Иначе
		Если Форма.ПолеВыбораФильтраПоМесту = "не задано" Тогда
			ЗапросНоменклатуры.Текст = СтрЗаменить(ЗапросНоменклатуры.Текст, "&Место", "ЗапросМеста.МестоХранения есть NULL");
		Иначе
			ЗапросНоменклатуры.Текст = СтрЗаменить(ЗапросНоменклатуры.Текст, "&Место", "ЗапросМеста.МестоХранения = &Место");
			ЗапросНоменклатуры.УстановитьПараметр("Место", Форма.ПолеВыбораФильтраПоМесту);
		КонецЕсли;
	КонецЕсли;
	
	Форма.ТаблицаИнвентаризации.Очистить();
	Форма.ТаблицаИнвентаризации = ЗапросНоменклатуры.Выполнить().Выгрузить();
	
	ЭлементыФормы.ТабличноеПолеНоменклатуры.СоздатьКолонки();
	ЭлементыФормы.ТабличноеПолеНоменклатуры.Колонки.Проверен.Видимость = Ложь;
	ЭлементыФормы.ТабличноеПолеНоменклатуры.Колонки.Артикул.Ширина = 8;
	ЭлементыФормы.ТабличноеПолеНоменклатуры.Колонки.НаименованиеМеста.Ширина = 10;
	ЭлементыФормы.ТабличноеПолеНоменклатуры.Колонки.Место.Видимость = Ложь;
	ЭлементыФормы.ТабличноеПолеНоменклатуры.Шрифт =	Новый Шрифт(ЭлементыФормы.ТабличноеПолеНоменклатуры.Шрифт,,РазмерШрифтаТаблиц);
	
	ЗапросКоличестваВсегоИОсталось = Новый Запрос;
	ЗапросКоличестваВсегоИОсталось.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеИзДокумента
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, ) КАК ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.Номенклатура В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ИнвентаризацияТоваровНаСкладеТовары.Номенклатура
	|			ИЗ
	|				Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|			ГДЕ
	|				ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Инвентаризация.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеИзРегистра
	|ИЗ
	|	РегистрСведений.Инвентаризация КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Документ = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеИзДокумента.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДокументБезРегистра
	|ИЗ
	|	ДанныеИзДокумента КАК ДанныеИзДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеИзРегистра КАК ДанныеИзРегистра
	|		ПО ДанныеИзДокумента.Номенклатура = ДанныеИзРегистра.Номенклатура
	|ГДЕ
	|	ДанныеИзРегистра.Номенклатура ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВложенныйЗапрос.ИзДокумента, 0) КАК ИзДокумента,
	|	ЕСТЬNULL(ВложенныйЗапрос1.Осталось, 0) КАК Осталось
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СУММА(1) КАК ИзДокумента
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеИзДокумента.Номенклатура КАК Номенклатура
	|		ИЗ
	|			ДанныеИзДокумента КАК ДанныеИзДокумента) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос,
	|	(ВЫБРАТЬ
	|		СУММА(1) КАК Осталось
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДокументБезРегистра.Номенклатура КАК Номенклатура
	|		ИЗ
	|			ДокументБезРегистра КАК ДокументБезРегистра) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос1";
	ЗапросКоличестваВсегоИОсталось.Параметры.Вставить("Ссылка", ДокументИнвентаризации);
	Выборка = ЗапросКоличестваВсегоИОсталось.Выполнить().Выбрать();
	Выборка.Следующий();
	ЭлементыФормы.ТабличноеПолеНоменклатуры.Колонки.Номенклатура.ТекстШапки = Строка(Выборка.ИзДокумента)+"/"+Выборка.Осталось;
КонецПроцедуры

Процедура ФормаЧастичнойИнвентаризации_ПолеВводаШтрихКодаПриИзменении(Форма) Экспорт
	ЗапросШтрихКода = Новый Запрос;
	ЗапросШтрихКода.Текст =
	"ВЫБРАТЬ
	|	Штрихкоды.Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод";
	ЗапросШтрихКода.УстановитьПараметр("Штрихкод", Преобразовать_ШК_в_короткий(Форма.ПолеВводаШтрихКода));
	Выборка = ЗапросШтрихКода.Выполнить().Выбрать();
	НетШтрихкода = Ложь;
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			Номенклатура = Выборка.Владелец;
			ВывестиФормуНоменклатуры(Форма);
			//НажатьТаб(4);
		Иначе
			НетШтрихкода = Истина;
		КонецЕсли;
	Иначе
		НетШтрихкода = Истина;
	КонецЕсли;
	
	Если НетШтрихкода Тогда
		ТекстПредупреждения = "Такого штрихкода нет.";
		РазбитьСтроку(ТекстПредупреждения);
		мПредупреждение(ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиФормуНоменклатуры(Форма)
	СтрокаТаблицы = Форма.ТаблицаИнвентаризации.Найти(Номенклатура, "Номенклатура");
	
	Если СтрокаТаблицы = Неопределено Тогда
		//*** Проверить есть ли эта позиция в полном списке инвентарицации
		ЗапросНоменклатуры = новый Запрос;
		ЗапросНоменклатуры.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ЗапросРегистра.КоличествоВРегистре ЕСТЬ NULL
		|				ИЛИ ЗапросРегистра.КоличествоВРегистре = 0
		|			ТОГДА ""НЕТ""
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СУММА(1) > ЗапросРегистра.КоличествоВРегистре
		|					ТОГДА ""ЧАСТИЧНО""
		|				ИНАЧЕ ""ДА""
		|			КОНЕЦ
		|	КОНЕЦ КАК Проверен
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Инвентаризация.Номенклатура КАК Номенклатура,
		|			СУММА(1) КАК КоличествоВРегистре
		|		ИЗ
		|			РегистрСведений.Инвентаризация КАК Инвентаризация
		|		ГДЕ
		|			Инвентаризация.Документ = &Ссылка
		|			И Инвентаризация.Номенклатура = &Номенклатура
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Инвентаризация.Номенклатура) КАК ЗапросРегистра
		|		ПО ИнвентаризацияТоваровНаСкладеТовары.Номенклатура = ЗапросРегистра.Номенклатура
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка
		|	И ИнвентаризацияТоваровНаСкладеТовары.Номенклатура = &Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура,
		|	ВЫБОР
		|		КОГДА ЗапросРегистра.Номенклатура ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ЗапросРегистра.КоличествоВРегистре";
		ЗапросНоменклатуры.УстановитьПараметр("Ссылка", ДокументИнвентаризации);
		ЗапросНоменклатуры.УстановитьПараметр("Номенклатура", Номенклатура);
		Результат = ЗапросНоменклатуры.Выполнить();
		Если Результат.Пустой() Тогда
			///*** Эта номенклатура не из списка инвентаризации
			///*** Если это Частичная инвентаризация, то высветим сообщение
			Если ЧастичнаяИнвентаризация Тогда
				ТекстВопроса = "Эта позиция не проверяется. Добавить в инвентаризацию?";
				РазбитьСтроку(ТекстВопроса);
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(1, "Не добавлять");
				СписокКнопок.Добавить(2, "Добавить");
				Если мВопрос(ТекстВопроса, СписокКнопок) = 1 Тогда
					Форма.ПолеВводаШтрихКода = "";
					Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШтрихКода;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Проверен = Выборка.Проверен;
	Иначе
		Проверен = СтрокаТаблицы.Проверен;
	КонецЕсли;
	
	ФормаИнвентаризацииНоменклатуры_Наименование = ?(ТипЭкрана = 2, "ФормаИнвентаризацииНоменклатуры_480х800", ?(ТипЭкрана = 3, "ФормаИнвентаризацииНоменклатуры_1280х768", "ФормаИнвентаризацииНоменклатуры"));
	ФормаНоменклатуры = ПолучитьФорму(ФормаИнвентаризацииНоменклатуры_Наименование);
	ФормаНоменклатуры.ОткрытьМодально();
	
	ЗаполнитьТаблицуИнвентаризации(Форма);
	Форма.ПолеВводаШтрихКода = "";
	Форма.ЭтаФорма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШтрихКода;
	
	НажатьТаб(4);
КонецПроцедуры

Процедура ФормаЧастичнойИнвентаризации_ПолеВыбораФильтраПоМестуПриИзменении(Форма) Экспорт
	ЗаполнитьТаблицуИнвентаризации(Форма);
КонецПроцедуры

Процедура ФормаЧастичнойИнвентаризации_ТабличноеПолеНоменклатурыВыбор(Форма, НомерСтроки) Экспорт
	ИзменитьРазмерШрифта(НомерСтроки);
	ЗаполнитьТаблицуИнвентаризации(Форма);
	//НажатьТаб(4);         //вернем фокус на таблицу
	//Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ТабличноеПолеНоменклатуры;        //вернем фокус на таблицу - этот метод не работает
КонецПроцедуры

Процедура ФормаЧастичнойИнвентаризации_ТабличноеПолеНоменклатурыПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	ОформлениеСтроки.ЦветФона = ?(ДанныеСтроки.Проверен = "ДА", WebЦвета.БледноКрасноФиолетовый, ?(ДанныеСтроки.Проверен = "НЕТ", WebЦвета.БледноЗеленый, WebЦвета.Желтый));
КонецПроцедуры

Процедура ФормаЧастичнойИнвентаризации_КнопкаВыбратьНажатие(Форма) Экспорт
	Номенклатура = Форма.ЭлементыФормы.ТабличноеПолеНоменклатуры.ТекущаяСтрока.Номенклатура;
	ВывестиФормуНоменклатуры(Форма);		
КонецПроцедуры
#КонецОбласти

#Область Форма_проверки_товара
Процедура ФормаПроверкиТовара_КнопкаЗавершитьНажатие(Форма) Экспорт  
	ЕстьНепроверенные = Ложь;
	Для Каждого СтрокаТовара Из Форма.Товар Цикл 
		Если СтрокаТовара.Проверен = Ложь Тогда
			ЕстьНепроверенные = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Если ЕстьНепроверенные Тогда		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(1, "Да");
		СписокКнопок.Добавить(2, "Нет");	
		Если мВопрос("Не все позиции проверены. Прервать операцию?", СписокКнопок) = 1 Тогда
			ФормаЗавершенияСборкиДокумента_Название = ?(ТипЭкрана = 2, "ФормаЗавершенияСборкиДокумента_480х800", ?(ТипЭкрана = 3, "ФормаЗавершенияСборкиДокумента_1280х768", "ФормаЗавершенияСборкиДокумента"));
			ФормаЗавершенияСборки = ПолучитьФорму(ФормаЗавершенияСборкиДокумента_Название);
			Результат = ФормаЗавершенияСборки.ОткрытьМодально();
			Если Результат = 0 Тогда
				Возврат;
			ИначеЕсли Результат = 1 Тогда
				Форма.Закрыть(1);
				Возврат;
			Иначе
				Форма.Закрыть(2);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Форма.Закрыть(0);
	КонецЕсли;
КонецПроцедуры

Процедура ПерерисоватьФормуПроверкиТовара(Форма, НажатьТаб = 0)
	Если Форма.Товар.Колонки.Количество() = 0 Тогда
		Форма.Товар.Колонки.Добавить("Количество");
		Форма.Товар.Колонки.Добавить("Наименование");
		Форма.Товар.Колонки.Добавить("Номенклатура");
		Форма.Товар.Колонки.Добавить("ХарактеристикаНоменклатуры");
		Форма.Товар.Колонки.Добавить("Проверен");
		Форма.Товар.Колонки.Добавить("Артикул");
		
		ТоварДокумента = Документ.Товары;
		Для Каждого СтрокаТовара Из ТоварДокумента Цикл
			//Если РаздельнаяСборка Тогда
			//	МестоХранения = ПолучитьМестоХранения(СтрокаТовара.Номенклатура,,СкладДокумента);
			//	ДобавитьТовар = СписокМестДляЗапроса.НайтиПоЗначению(МестоХранения) <> Неопределено;
			//	//ДобавитьТовар = (СборкаТолькоХолода И МестоХолод) ИЛИ (НЕ СборкаТолькоХолода И НЕ МестоХолод);
			//Иначе
			//	ДобавитьТовар = Истина;
			//КонецЕсли;
			
			Если СтрокаТовара.Размещение = СкладДокумента ИЛИ ПолучитьПризнакЗаказаИнтернет() Тогда
				Отбор = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры);
				СтрокиТаблицы = Форма.Товар.НайтиСтроки(Отбор);
				Если СтрокиТаблицы.Количество() = 0 Тогда
					НоваяСтрока = Форма.Товар.Добавить();
					НоваяСтрока.Количество = СтрокаТовара.Количество * СтрокаТовара.Коэффициент;
					НоваяСтрока.Наименование = Строка(СтрокаТовара.Номенклатура) + ?(ЗначениеЗаполнено(СтрокаТовара.ХарактеристикаНоменклатуры), " ("+СтрокаТовара.ХарактеристикаНоменклатуры+")", "");
					НоваяСтрока.Номенклатура = СтрокаТовара.Номенклатура;
					НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;
					НоваяСтрока.Артикул = СтрокаТовара.Номенклатура.Артикул;
					НоваяСтрока.Проверен = ЭтотТоварПроверен(СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры);
				Иначе
					СтрокаТаблицы = СтрокиТаблицы[0];
					СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + СтрокаТовара.Количество * СтрокаТовара.Коэффициент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЕстьНеПроверенный = Форма.Товар.Найти(Ложь, "Проверен") <> Неопределено;
		
		Если Не ЕстьНеПроверенный Тогда
			Форма.Закрыть(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ЭлементыФормы.ПолеТабличногоДокументаТовар.Очистить();
	ИмяМакета = ?(ТипЭкрана = 2, "МакетСпискаПозиций_480х800", ?(ТипЭкрана = 3, "МакетСпискаПозиций_1280х768", "МакетСпискаПозиций"));
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьШапка.Область(1,3,1,3).РастягиватьПоГоризонтали = Истина;
	ОбластьСтрока.Область(1,3,1,3).РастягиватьПоГоризонтали = Истина;
	ОбластьШапка.Область(1,1,1,ОбластьШапка.ШиринаТаблицы).Шрифт = Новый Шрифт(ОбластьШапка.Область(1,1,1,ОбластьШапка.ШиринаТаблицы).Шрифт,,РазмерШрифтаТаблиц);
	ОбластьСтрока.Область(1,1,1,ОбластьСтрока.ШиринаТаблицы).Шрифт = Новый Шрифт(ОбластьСтрока.Область(1,1,1,ОбластьСтрока.ШиринаТаблицы).Шрифт,,РазмерШрифтаТаблиц);
	
	Форма.ЭлементыФормы.ПолеТабличногоДокументаТовар.Вывести(ОбластьШапка);
	Для Каждого СтрокаТовара Из Форма.Товар Цикл
		Если не СтрокаТовара.Проверен Тогда
			ОбластьСтрока.Параметры.Заполнить(СтрокаТовара);
			Форма.ЭлементыФормы.ПолеТабличногоДокументаТовар.Вывести(ОбластьСтрока);
		КонецЕсли;		
	КонецЦикла;
	Форма.ЭлементыФормы.ПолеТабличногоДокументаТовар.ФиксацияСверху = 1;
	Форма.ЭлементыФормы.ПолеТабличногоДокументаТовар.ГоризонтальнаяПолосаПрокрутки = Ложь;
	
	НажатьТаб(НажатьТаб);
	//УстановкаАктивногоЭлементаФормы(Форма, Форма.ЭлементыФормы.ПолеВводаШКТовара);
КонецПроцедуры

Функция ЭтотТоварПроверен(Номенклатура, ХарактеристикаНоменклатуры)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.БС_НоменклатураПоТСД КАК БС_НоменклатураПоТСД
	|ГДЕ
	|	БС_НоменклатураПоТСД.Документ = &Документ
	|	И БС_НоменклатураПоТСД.Номенклатура = &Номенклатура
	|	И БС_НоменклатураПоТСД.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|	И БС_НоменклатураПоТСД.Операция = ""Проверка""";
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
	Результат = Запрос.Выполнить();
	Возврат не Результат.Пустой();
КонецФункции

Процедура ФормаПроверкиТовара_ПриОткрытии(Форма) Экспорт
	//Если СокрЛП(Пользователь.Код) = "Базулин Дмитрий" Тогда
	//	ЭтоКонтрольнаяПроверка = Истина;
	//Иначе
	//	ЭтоКонтрольнаяПроверка = Ложь;
	//КонецЕсли;
	
	ПерерисоватьФормуПроверкиТовара(Форма);
КонецПроцедуры

Процедура ФормаПроверкиТовара_ПолеВводаШКТовараПриИзменении(Форма) Экспорт
	///*** Проверка срока в штрихкоде не написана, реализовано только сканирование длинного штрихкода ***\\\
	
	Если не ЗначениеЗаполнено(Форма.ШтрихКод) Тогда Возврат КонецЕсли;
	
	ПоложениеПробела = СтрНайти(Форма.ШтрихКод, " ");
	Если ПоложениеПробела > 0 Тогда
		ДлинаСрока = СтрДлина(Прав(Форма.ШтрихКод, СтрДлина(Форма.ШтрихКод)-ПоложениеПробела));
		Если ДлинаСрока = 8 Тогда
			// *** В этом ШК есть срок
			НазваниеСрока = Прав(Форма.ШтрихКод, 8);
			ДатаСрока = ПреобразоватьСтрокуВДату(НазваниеСрока);
			ЕстьСрок = ЗначениеЗаполнено(ДатаСрока);
			ШКТовара = Лев(Форма.ШтрихКод, ПоложениеПробела-1);
		Иначе
			НазваниеСрока = "";
			ЕстьСрок = Ложь;
			ШКТовара = Лев(Форма.ШтрихКод, ПоложениеПробела-1);
		КонецЕсли;		
	Иначе
		НазваниеСрока = "";
		ЕстьСрок = Ложь;
		ШКТовара = Форма.ШтрихКод;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Штрихкоды.Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод";
	Запрос.УстановитьПараметр("Штрихкод", ШКТовара);
	Форма.ШтрихКод = "";
	Результат = Запрос.Выполнить();
	Если Результат <> Неопределено Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Владелец = Выборка.Владелец;
			Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				ВыбранТоварНаФормеПроверки(Форма, Владелец);				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПерерисоватьФормуПроверкиТовара(Форма, 3);
КонецПроцедуры

Процедура ФормаПроверкиТовара_ПолеТабличногоДокументаТоварВыбор(Форма, Номенклатура) Экспорт
	ВыбранТоварНаФормеПроверки(Форма, Номенклатура);
	
	ПерерисоватьФормуПроверкиТовара(Форма, 2);
КонецПроцедуры

Процедура ВыбранТоварНаФормеПроверки(Форма, Номенклатура)
	
	МассивСтрок = Форма.Товар.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если МассивСтрок.Количество() > 0 Тогда
		ЕстьНеПроверенные = Ложь;
		ВсегоКоличество = 0;
		Для Каждого Строка Из МассивСтрок Цикл
			Если Не Строка.Проверен Тогда
				ЕстьНеПроверенные = Истина;
				Прервать;
			Иначе
				ВсегоКоличество = ВсегоКоличество + Строка.Количество;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьНеПроверенные Тогда
			мПредупреждение("Товар уже проверен" + Символы.ПС + ВсегоКоличество);
		Иначе
			Если МассивСтрок.Количество() > 1 Тогда							
				ФормаЧисла_Название = ?(ТипЭкрана = 3, "ФормаОтображенияЧислаДолгойМультиПроверки_1280х768", "ФормаОтображенияЧислаДолгойМультиПроверки");
				ФормаЧисла = ПолучитьФорму(ФормаЧисла_Название);
				ФормаЧисла.ОтображаемаяНоменклатура = Номенклатура.Наименование;
				ФормаЧисла.ТабличноеПолеВводаКоличества.Колонки.Добавить("Срок");
				ФормаЧисла.ТабличноеПолеВводаКоличества.Колонки.Добавить("КоличествоПоДокументу");
				КЧ = Новый КвалификаторыЧисла(10,0);
				Массив = Новый Массив;
				Массив.Добавить(Тип("Число"));
				ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
				ФормаЧисла.ТабличноеПолеВводаКоличества.Колонки.Добавить("КоличествоСобрано",ОписаниеТиповЧ,"Кол-во",15);
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					НоваяСтрока = ФормаЧисла.ТабличноеПолеВводаКоличества.Добавить();
					НоваяСтрока.Срок = СтрокаМассива.ХарактеристикаНоменклатуры;
					НоваяСтрока.КоличествоПоДокументу = СтрокаМассива.Количество;
					НоваяСтрока.КоличествоСобрано = 0;
				КонецЦикла;
				ФормаЧисла.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
				Результат = ФормаЧисла.ОткрытьМодально();
				Если Результат = 0 Тогда
					Для Каждого СтрокаМассива Из МассивСтрок Цикл
						СтрокаМассива.Проверен = Истина;
					КонецЦикла;
				КонецЕсли;
			Иначе
				Строка = МассивСтрок[0];							
				ФормаЧисла_Название = ?(ТипЭкрана = 3, "ФормаОтображенияЧислаДолгойПроверки_1280х768", "ФормаОтображенияЧислаДолгойПроверки");
				ФормаЧисла = ПолучитьФорму(ФормаЧисла_Название);
				ФормаЧисла.ОтображаемаяНоменклатура = Номенклатура.Наименование;
				ФормаЧисла.ОтображаемоеКоличество = Строка.Количество;
				ФормаЧисла.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
				ФормаЧисла.ОтображаемыйСрок = Строка.ХарактеристикаНоменклатуры;
				Результат = ФормаЧисла.ОткрытьМодально();
				Если Результат = 0 Тогда
					Строка.Проверен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		мПредупреждение("Позиции """+Номенклатура+""" в этом документе нет.");
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			ДобавитьЗаписьВРегНоменклатураПоТСД(Номенклатура, ИмяТСД, Пользователь, Документ, ТекущаяДата(), СтрокаМассива.ХарактеристикаНоменклатуры, "Проверка",, СтрокаМассива.Количество);
		КонецЦикла; 
	Иначе
		ДобавитьЗаписьВРегНоменклатураПоТСД(Номенклатура, ИмяТСД, Пользователь, Документ, ТекущаяДата(), Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), "Проверка", "Товар не из этого заказа");
	КонецЕсли;
КонецПроцедуры

Процедура ФормаПроверкиТовара_ПолеТабличногоДокументаТоварПриАктивизации(Форма) Экспорт
	//Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШКТовара;
	//НажатьТаб(2);
КонецПроцедуры

Процедура ФормаПроверкиТовара_УменьшитьШрифт(Форма) Экспорт
	РазмерШрифтаТаблиц = ?(РазмерШрифтаТаблиц < 10, 10, РазмерШрифтаТаблиц - 1);
	ПерерисоватьФормуПроверкиТовара(Форма);
	СохранитьИзмененияНастроекПользователя();
КонецПроцедуры

Процедура ФормаПроверкиТовара_УвеличитьШрифт(Форма) Экспорт
	РазмерШрифтаТаблиц = ?(РазмерШрифтаТаблиц > 30, 30, РазмерШрифтаТаблиц + 1);
	ПерерисоватьФормуПроверкиТовара(Форма);
	СохранитьИзмененияНастроекПользователя();
КонецПроцедуры
#КонецОбласти

#Область Форма_отображение_числа_быстрой_проверки
Процедура ФормаОтображенияЧислаБыстройПроверки_ПриОткрытии(Форма) Экспорт
	Форма.ЭлементыФормы.НадписьЧисло.Заголовок = Строка(Форма.ОтображаемоеЧисло) + " " + Форма.ЕдиницаИзмерения;
	Форма.ЭлементыФормы.НадписьСрок.Заголовок = Форма.ОтображаемыйСрок;
КонецПроцедуры
#КонецОбласти

#Область Форма_отображение_числа_долгой_проверки
Процедура ФормаОтображенияЧислаДолгойПроверки_ПриОткрытии(Форма) Экспорт
	Форма.ЭлементыФормы.НадписьНоменклатура.Заголовок = Форма.ОтображаемаяНоменклатура;
	Форма.ЭлементыФормы.НадписьСрок.Заголовок = ?(ЗначениеЗаполнено(Форма.ОтображаемыйСрок), Форма.ОтображаемыйСрок, "Не ведётся");
КонецПроцедуры

Процедура ФормаОтображенияЧислаДолгойПроверки_КнопкаОКНажатие(Форма) Экспорт
	Если Форма.ВведённоеКоличество = Форма.ОтображаемоеКоличество Тогда
		Форма.Закрыть(0);
	Иначе
		ТекстПредупреждения = "Проверьте введённое количество. Должно быть "+Форма.ОтображаемоеКоличество+" "+Форма.ЕдиницаИзмерения+".";
		РазбитьСтроку(ТекстПредупреждения);
		мПредупреждение(ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область Форма_отображение_числа_долгой_мульти_проверки
Процедура ФормаОтображенияЧислаДолгойМультиПроверки_ПриОткрытии(Форма) Экспорт
	Форма.ЭлементыФормы.НадписьНоменклатура.Заголовок = Форма.ОтображаемаяНоменклатура + " ("+Форма.ЕдиницаИзмерения+")";
	Форма.ЭлементыФормы.ТабличноеПолеВводаКоличества.СоздатьКолонки();
	Форма.ЭлементыФормы.ТабличноеПолеВводаКоличества.Колонки.Срок.Доступность = Ложь;
	Форма.ЭлементыФормы.ТабличноеПолеВводаКоличества.Колонки.КоличествоПоДокументу.Видимость = Ложь;
КонецПроцедуры

Процедура ФормаОтображенияЧислаДолгойМультиПроверки_КнопкаОКНажатие(Форма) Экспорт
	ЕстьОшибки = Ложь;
	Для Каждого СтрокаСрока Из Форма.ТабличноеПолеВводаКоличества Цикл
		ЕстьОшибки = ЕстьОшибки или СтрокаСрока.КоличествоПоДокументу <> СтрокаСрока.КоличествоСобрано;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТекстПредупреждения = "Неверное количество. Должно быть:";
		Для Каждого СтрокаСрока Из Форма.ТабличноеПолеВводаКоличества Цикл
			ТекстПредупреждения = ТекстПредупреждения +Символы.ПС+ "По сроку "+СтрокаСрока.Срок+Формат(СтрокаСрока.КоличествоПоДокументу,"ЧГ=0; ЧФ=' - Ч'");
		КонецЦикла;
		мПредупреждение(ТекстПредупреждения);
	Иначе
		Форма.Закрыть(0);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область Форма_ввода_количества_товара
Процедура ФормаВводаКоличестваТовара_ПриОткрытии(Форма) Экспорт
	Форма.Заголовок = "Ввод количества";
	ЭлементыФормы = Форма.ЭлементыФормы;
	ЭлементыФормы.ПолеВводаКоличество.МинимальноеЗначение = 1;
	ЭлементыФормы.ПолеВводаКоличество.МаксимальноеЗначение = Форма.МаксимальноеЗначение;
КонецПроцедуры

Процедура ФормаВводаКоличестваТовара_КнопкаOKНажатие(Форма) Экспорт
	Форма.Закрыть(0);
КонецПроцедуры

Процедура ФормаВводаКоличестваТовара_КнопкаОтменаНажатие(Форма) Экспорт
	Форма.Закрыть(1);
КонецПроцедуры

Процедура ФормаВводаКоличестваТовара_КнопкаУвеличитьНажатие(Форма) Экспорт
	Если Форма.ПолеВводаКоличество < Форма.МаксимальноеЗначение Тогда
		Форма.ПолеВводаКоличество = Форма.ПолеВводаКоличество + 1;
	КонецЕсли;	
КонецПроцедуры

Процедура ФормаВводаКоличестваТовара_КнопкаУменьшитьНажатие(Форма) Экспорт
	Если Форма.ПолеВводаКоличество > 1 Тогда
		Форма.ПолеВводаКоличество = Форма.ПолеВводаКоличество - 1;
	КонецЕсли;	
КонецПроцедуры
#КонецОбласти

#Область Форма_информации_о_товаре_НЕ_из_списка
Процедура ФормаИнформацииОТовареНеИзСписка_КнопкаНеверныйШтрихКодНажатие(Форма) Экспорт
	ФормаНеНайденогоШК_Наименование = ?(ТипЭкрана = 2, "ФормаНеНайденогоШК_480х800", ?(ТипЭкрана = 3, "ФормаНеНайденогоШК_1280х768", "ФормаНеНайденогоШК"));
	ФормаНеНайденогоШК = ПолучитьФорму(ФормаНеНайденогоШК_Наименование);
	Результат = ФормаНеНайденогоШК.ОткрытьМодально();
	Форма.Закрыть(Результат);
КонецПроцедуры
#КонецОбласти

#Область Форма_приёмки
Процедура ФормаПриёмки_ПриОткрытии(Форма) Экспорт
	Форма.ЭлементыФормы.ИндикаторСканирования.МаксимальноеЗначение = Товар.Количество();
	Форма.ЭлементыФормы.НадписьДокумент.Заголовок = Документ;
	ОбновитьФормуФормаПриёмки(Форма, 0);
КонецПроцедуры

Процедура ОбновитьФормуФормаПриёмки(Форма, НажатьТаб = 1)
	
	Отсканировано = 0;
	Для Каждого СтрокаТовара Из Товар Цикл
		Отсканировано = Отсканировано + ?(СтрокаТовара.Отсканирован, 1, 0);
	КонецЦикла;
	
	Форма.ИнформацияПоТовару = "Отсканировано - " + Строка(Отсканировано) + " / Осталось - " + Строка(Товар.Количество() - Отсканировано);
	Форма.ИндикаторСканирования = Отсканировано;
	
	Товар.Сортировать("Сортировка, Наименование");
	
	Форма.ЭлементыФормы.ТабличноеПоле.Шрифт = Новый Шрифт(Форма.ЭлементыФормы.ТабличноеПоле.Шрифт,,РазмерШрифтаТаблиц);
	Форма.ЭлементыФормы.ТабличноеПоле.Значение = Товар;
	Форма.ЭлементыФормы.ТабличноеПоле.СоздатьКолонки();
	Форма.ЭлементыФормы.ТабличноеПоле.Колонки.Номенклатура.Видимость = Ложь;
	Форма.ЭлементыФормы.ТабличноеПоле.Колонки.Сортировка.Видимость = Ложь;
	Форма.ЭлементыФормы.ТабличноеПоле.Колонки.Место.Видимость = Ложь;
	Форма.ЭлементыФормы.ТабличноеПоле.Колонки.Отсканирован.Видимость = Ложь;
	Форма.ЭлементыФормы.ТабличноеПоле.Колонки.ЕстьРасхождения.Видимость = Ложь;
	Форма.ЭлементыФормы.ТабличноеПоле.Колонки.ЕстьШК.Видимость = Ложь;
	Форма.ЭлементыФормы.ТабличноеПоле.Колонки.Единица.Видимость = Ложь;
	Форма.ЭлементыФормы.ТабличноеПоле.Колонки.Количество.Видимость = Ложь;
	Форма.ЭлементыФормы.ТабличноеПоле.Колонки.Наименование.ВысотаЯчейки = 3;
	Форма.ЭлементыФормы.ТабличноеПоле.ТолькоПросмотр = Истина;
	
	Форма.ЭлементыФормы.ТабличноеПоле.Колонки.Артикул.Ширина = ?(ТипЭкрана = 2, 10, ?(ТипЭкрана = 3, 7, 7));
	
	Форма.ЭлементыФормы.ТабличноеПоле.ТекущаяСтрока = Товар.Получить(0);
	
	НажатьТаб(НажатьТаб);
	
	//Если НажатьТаб > 0 Тогда
	//	Попытка
	//		wsh = Новый COMОбъект("WSCript.Shell");
	//		Для ТекНажатие = 1 По НажатьТаб Цикл
	//			wsh.sendkeys("{TAB}");
	//		КонецЦикла;
	//	Исключение
	//	КонецПопытки;	
	//КонецЕсли;
	
	Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШКТовара;	
КонецПроцедуры

Процедура ФормаПриёмки_ТабличноеПолеПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	Если ДанныеСтроки.Отсканирован Тогда 
		Если ДанныеСтроки.ЕстьРасхождения Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветАктивности;
		Иначе
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли;
	Иначе
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли;
КонецПроцедуры

Процедура ФормаПриёмки_КнопкаЗавершитьНажатие(Форма) Экспорт
	Отсканировано = 0;
	ЕстьРасхождения = 0;
	Для Каждого СтрокаТовара Из Товар Цикл
		Отсканировано = Отсканировано + ?(СтрокаТовара.Отсканирован, 1, 0);
		ЕстьРасхождения = ЕстьРасхождения + ?(СтрокаТовара.ЕстьРасхождения, 1, 0);
	КонецЦикла;
	
	ВсегоСтрок = Товар.Количество();
	Если Отсканировано = ВсегоСтрок И ЕстьРасхождения = 0 Тогда
		Форма.Закрыть(0);
		Возврат;
	КонецЕсли;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(1, "Да");
	СписокКнопок.Добавить(2, "Нет");	
	Если мВопрос("Прервать приём документа?", СписокКнопок) = 1 Тогда	
		ФормаЗавершенияПриёмки_Наименование = ?(ТипЭкрана = 3, "ФормаЗавершенияПриёмкиДокумента_1280х768", "ФормаЗавершенияПриёмкиДокумента");
		ФормаЗавершенияПриёмки = ПолучитьФорму(ФормаЗавершенияПриёмки_Наименование);
		Результат = ФормаЗавершенияПриёмки.ОткрытьМодально();
		Если Результат = 0 Тогда
			Возврат;
		Иначе
			Форма.Закрыть(Результат); //1-Отменить;2-Отложить;3-Принять
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ФормаПриёмки_ПолеВводаШКТовараПриИзменении(Форма) Экспорт 
	Если не ЗначениеЗаполнено(Форма.ШтрихКод) Тогда Возврат КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Штрихкоды.Владелец
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод = &Штрихкод";
	Запрос.УстановитьПараметр("Штрихкод", Форма.ШтрихКод);
	ШКТовара = Форма.ШтрихКод;
	Форма.ШтрихКод = "";
	Результат = Запрос.Выполнить();
	Если Результат <> Неопределено Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Владелец = Выборка.Владелец;
			Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				Номенклатура = Владелец;
				//ИзмененияКонфигурации2.ДобавитьЗаписьВРегНоменклатураПоТСД(Номенклатура, ИмяТСД, Пользователь, Документ, ТекущаяДата());
				МассивСтрок = Товар.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
				Если МассивСтрок.Количество() = 0 Тогда					
					//Это не наш товар
					СписокКнопок = Новый СписокЗначений;
					СписокКнопок.Добавить(1, "Да");
					СписокКнопок.Добавить(2, "Нет");	
					Если мВопрос("Добавть в документ товар:"+Символы.ПС+Номенклатура,СписокКнопок) = 1 Тогда
						ОтсканированТоварНаФормеПриёмки(Номенклатура);
					КонецЕсли;					
				Иначе					
					//Товар найден
					
					ЕстьНеОтсканированные = Ложь;
					Для Каждого ТекСтрока Из МассивСтрок Цикл
						Если не ТекСтрока.Отсканирован Тогда
							ЕстьНеОтсканированные = Истина;
							СтрокаТовара = ТекСтрока;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если не ЕстьНеОтсканированные Тогда
						//Товар уже сканировался
						СписокКнопок = Новый СписокЗначений;
						СписокКнопок.Добавить(1, "Продолжить");
						СписокКнопок.Добавить(2, "Прервать");
						ТекстВопроса = "Товар уже принимался. Продолжить ?";
						РазбитьСтроку(ТекстВопроса);
						Если мВопрос(ТекстВопроса,СписокКнопок) = 1 Тогда
							ВыбранаСтрокаНаФормеПриёмки(МассивСтрок[0]);
						КонецЕсли;
					Иначе
						ВыбранаСтрокаНаФормеПриёмки(СтрокаТовара);
					КонецЕсли;
					
					//Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШКТовара;
					ОбновитьФормуФормаПриёмки(Форма, 4);
				КонецЕсли;
				
			Иначе				
				//Это штрих-код не товара
				ОбновитьФормуФормаПриёмки(Форма, 4);
			КонецЕсли;			
		Иначе
			
			// Штрих-код не найден
			
			//Проверка штрих-кода на корректность
			//Штрих-код должен состоять из цифр длиной от 12 до 14 символов
			Ошибка = Ложь;
			
			Ошибка = ПроверитьШтрихКод(ШКТовара);
			Если Ошибка Тогда
				мПредупреждение("Невреный штрих-код!"+Символы.ПС+Символы.ПС+"ШК номенклатуры должен состять из 12-14 цифр.");
				Возврат;
			КонецЕсли;       			
			
			ФормаНеНайденогоШК_Наименование = ?(ТипЭкрана = 2, "ФормаНеНайденогоШК_480х800", ?(ТипЭкрана = 3, "ФормаНеНайденогоШК_1280х768", "ФормаНеНайденогоШК"));
			ФормаНеНайденогоШК = ПолучитьФорму(ФормаНеНайденогоШК_Наименование);
			Результат = ФормаНеНайденогоШК.ОткрытьМодально();
			Если ТипЗнч(Результат) = Тип("СправочникСсылка.Номенклатура") Тогда
				//Штрих-код добавлен в базу
				//ИзмененияКонфигурации2.ДобавитьЗаписьВРегНоменклатураПоТСД(Результат, ИмяТСД, Пользователь, Документ, ТекущаяДата());
				МассивСтрок = Товар.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
				ВыбранаСтрокаНаФормеПриёмки(МассивСтрок[0]);
			Иначе
				//ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПолеВводаШКТовара;
				ОбновитьФормуФормаПриёмки(Форма, 4);				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ФормаПриёмки_ТабличноеПолеПриАктивизацииСтроки(Форма) Экспорт
	//Форма.ЭтаФорма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШКТовара;
КонецПроцедуры

Процедура ФормаПриёмки_ТабличноеПолеВыбор(Форма, НомерСтроки) Экспорт 
	ВыбранаСтрокаНаФормеПриёмки(Форма.ЭлементыФормы.ТабличноеПоле.ТекущаяСтрока);
	ОбновитьФормуФормаПриёмки(Форма, 1);
	
	//Если НомерСтроки = 0 Тогда
	//	РазмерШрифтаТаблиц = ?(РазмерШрифтаТаблиц < 6, 6, РазмерШрифтаТаблиц - 1);
	//Иначе
	//	РазмерШрифтаТаблиц = ?(РазмерШрифтаТаблиц > 30, 30, РазмерШрифтаТаблиц + 1);
	//КонецЕсли;
	//
	//ОбновитьФормуФормаПриёмки(Форма);
	//
	//СохранитьИзмененияНастроекПользователя();
КонецПроцедуры

Процедура ФормаПриёмки_УвеличитьШрифт(Форма) Экспорт
	РазмерШрифтаТаблиц = ?(РазмерШрифтаТаблиц > 30, 30, РазмерШрифтаТаблиц + 1);
	ОбновитьФормуФормаПриёмки(Форма);
	СохранитьИзмененияНастроекПользователя();
КонецПроцедуры

Процедура ФормаПриёмки_УменьшитьШрифт(Форма) Экспорт
	РазмерШрифтаТаблиц = ?(РазмерШрифтаТаблиц < 10, 10, РазмерШрифтаТаблиц - 1);
	ОбновитьФормуФормаПриёмки(Форма);
	СохранитьИзмененияНастроекПользователя();
КонецПроцедуры

Процедура ВыбранаСтрокаНаФормеПриёмки(СтрокаТовара)
	//ИзмененияКонфигурации2.ДобавитьЗаписьВРегНоменклатураПоТСД(СтрокаТовара.Номенклатура, ИмяТСД, Пользователь, Документ, ТекущаяДата());
	ОтсканированТоварНаФормеПриёмки(СтрокаТовара.Номенклатура);	
КонецПроцедуры

Процедура ФормаПриёмки_КнопкаВыбратьНажатие(Форма) Экспорт
	ВыбранаСтрокаНаФормеПриёмки(Форма.ЭлементыФормы.ТабличноеПоле.ТекущаяСтрока);
	ОбновитьФормуФормаПриёмки(Форма, 1);
КонецПроцедуры

Процедура ОтсканированТоварНаФормеПриёмки(Номенклатура)
	ДобавитьЗаписьВРегНоменклатураПоТСД(Номенклатура, ИмяТСД, Пользователь, Документ, ТекущаяДата(), Неопределено, "Приёмка"); 
	
	//Проверка на категорию "Снято с производства", имеет смысл только при приёмке нового товара, не при перемещении
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗапросСнятыхСПроизводства = Новый Запрос;
		ЗапросСнятыхСПроизводства.Текст = 
		"ВЫБРАТЬ
		|	КатегорииОбъектов.Объект КАК Объект,
		|	КатегорииОбъектов.Категория КАК Категория
		|ИЗ
		|	РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
		|ГДЕ
		|	КатегорииОбъектов.Объект = &Объект
		|	И КатегорииОбъектов.Категория = &Категория";
		ЗапросСнятыхСПроизводства.УстановитьПараметр("Объект", Номенклатура);
		ЗапросСнятыхСПроизводства.УстановитьПараметр("Категория", Справочники.КатегорииОбъектов.НайтиПоКоду("000000121"));
		Результат = ЗапросСнятыхСПроизводства.Выполнить();
		Если Не Результат.Пустой() Тогда
			ТекстПредупреждения = "Позиция """+Номенклатура+""" снята с производства. Либо надо снять признак у Агапкина Павла, либо её не добавлять в заказ.";
			РазбитьСтроку(ТекстПредупреждения); 
			мПредупреждение(ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Проверка на свойство "Актуально"
	Если Не Номенклатура.Актуально Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(1, "Да");
		СписокКнопок.Добавить(2, "Нет");	
		ТекстВопроса = "Товар """+Номенклатура+""" не актуален. Принять данный товар?";
		РазбитьСтроку(ТекстВопроса); 
		Если мВопрос(ТекстВопроса, СписокКнопок) = 2 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Необходимо по умолчанию брать срок из документа 
	
	ЗапросЗначенияХарактеристики = Новый Запрос;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗапросЗначенияХарактеристики.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ ВыборкаСрока
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
		|	И ЗаказПоставщикуТовары.Номенклатура = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Значение КАК Значение
		|ИЗ
		|	ВыборкаСрока КАК ВыборкаСрока
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ВыборкаСрока.ХарактеристикаНоменклатуры = ЗначенияСвойствОбъектов.Объект
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &СвойствоСрокГодности";
	Иначе 
		ЗапросЗначенияХарактеристики.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ ВыборкаСрока
		|ИЗ
		|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
		|ГДЕ
		|	ВнутреннийЗаказТовары.Ссылка = &Ссылка
		|	И ВнутреннийЗаказТовары.Номенклатура = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Значение КАК Значение
		|ИЗ
		|	ВыборкаСрока КАК ВыборкаСрока
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ПО ВыборкаСрока.ХарактеристикаНоменклатуры = ЗначенияСвойствОбъектов.Объект
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &СвойствоСрокГодности";
	КонецЕсли;	
	ЗапросЗначенияХарактеристики.УстановитьПараметр("Ссылка", Документ);
	ЗапросЗначенияХарактеристики.УстановитьПараметр("Номенклатура", Номенклатура);
	ЗапросЗначенияХарактеристики.УстановитьПараметр("СвойствоСрокГодности", СвойствоСрокГодности);
	Выборка = ЗапросЗначенияХарактеристики.Выполнить().Выбрать(); 
	НаименованиеСрока = Неопределено;
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Значение) = Тип("Дата") Тогда
			НаименованиеСрока = Формат(Выборка.Значение, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	КонецЕсли;
	
	Если НаименованиеСрока = Неопределено Тогда
		НаименованиеСрока = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
	КонецЕсли;  
	
	ЗапросКоличестваИзДокумента = Новый Запрос;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗапросКоличестваИзДокумента.Текст =
		"ВЫБРАТЬ
		|	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Номенклатура = &Номенклатура
		|	И ЗаказПоставщикуТовары.Ссылка = &Ссылка";  
	Иначе    
		ЗапросКоличестваИзДокумента.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВнутреннийЗаказТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
		|ГДЕ
		|	ВнутреннийЗаказТовары.Номенклатура = &Номенклатура
		|	И ВнутреннийЗаказТовары.Ссылка = &Ссылка";  
	КонецЕсли;
	ЗапросКоличестваИзДокумента.УстановитьПараметр("Номенклатура", Номенклатура);
	ЗапросКоличестваИзДокумента.УстановитьПараметр("Ссылка", Документ);
	Выборка = ЗапросКоличестваИзДокумента.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	ФормаВводаКоличестваИСроков_Наименование = ?(ТипЭкрана = 2, "ФормаВводаКоличестваИСроков_480х800", ?(ТипЭкрана = 3, "ФормаВводаКоличестваИСроков_1280х768", "ФормаВводаКоличестваИСроков"));
	ФормаВводаКоличестваИСроков = ПолучитьФорму(ФормаВводаКоличестваИСроков_Наименование);
	ФормаВводаКоличестваИСроков.Номенклатура = Номенклатура;
	ФормаВводаКоличестваИСроков.НаименованиеСрока = НаименованиеСрока;
	ФормаВводаКоличестваИСроков.КоличествоПоДокументу = Количество;
	СписокСроков = ФормаВводаКоличестваИСроков.ОткрытьМодально();
	
	Если СписокСроков <> Неопределено Тогда
		ДобавитьВДокументНаФормеПриёмки(Номенклатура, СписокСроков);
		СтрокаТовара = Товар.Найти(Номенклатура, "Номенклатура");
		Если СтрокаТовара <> Неопределено Тогда
			СтрокаТовара.Отсканирован = Истина;
			СтрокаТовара.ЕстьРасхождения = не ПроверитьКоличествоПриёмки(Номенклатура);
			СтрокаТовара.Сортировка = ?(СтрокаТовара.Отсканирован,?(СтрокаТовара.ЕстьРасхождения,1,2),0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПроверитьКоличествоПриёмки(Номенклатура)
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;              
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ЗапросИзДокумента
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
		|	И ЗаказПоставщикуТовары.Номенклатура = &Номенклатура";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ВнутреннийЗаказТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ЗапросИзДокумента
		|ИЗ
		|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
		|ГДЕ
		|	ВнутреннийЗаказТовары.Ссылка = &Ссылка
		|	И ВнутреннийЗаказТовары.Номенклатура = &Номенклатура";
	КонецЕсли;
	Запрос.Выполнить();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ПриёмкаТовара.Количество) КАК Количество
	|ПОМЕСТИТЬ ЗапросИзРегистра
	|ИЗ
	|	РегистрСведений.БС_ПриемкаТовара КАК ПриёмкаТовара
	|ГДЕ
	|	ПриёмкаТовара.Документ = &Ссылка
	|	И ПриёмкаТовара.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗапросИзДокумента.Количество = ЗапросИзРегистра.Количество
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КоличествоСовпадает
	|ИЗ
	|	ЗапросИзДокумента КАК ЗапросИзДокумента,
	|	ЗапросИзРегистра КАК ЗапросИзРегистра";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоСовпадает;
	КонецЕсли;
КонецФункции

Процедура ДобавитьВДокументНаФормеПриёмки(Номенклатура, СписокСроков)
	
	// *** Вначале надо удалить предыдущие записи, если такие были *** \\\
	ЗапросЗаписей = Новый Запрос;
	ЗапросЗаписей.Текст = 
	"ВЫБРАТЬ
	|	ПриёмкаТовара.Документ КАК Документ,
	|	ПриёмкаТовара.Номенклатура КАК Номенклатура,
	|	ПриёмкаТовара.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ПриёмкаТовара.Количество КАК Количество,
	|	ПриёмкаТовара.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.БС_ПриемкаТовара КАК ПриёмкаТовара
	|ГДЕ
	|	ПриёмкаТовара.Документ = &Документ
	|	И ПриёмкаТовара.Номенклатура = &Номенклатура";
	ЗапросЗаписей.УстановитьПараметр("Документ", Документ);
	ЗапросЗаписей.УстановитьПараметр("Номенклатура", Номенклатура);
	Результат = ЗапросЗаписей.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			МЗ = РегистрыСведений.БС_ПриемкаТовара.СоздатьМенеджерЗаписи();
			МЗ.Документ = Выборка.Документ;
			МЗ.Номенклатура = Выборка.Номенклатура;
			МЗ.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			МЗ.Прочитать();
			МЗ.Удалить();
		КонецЦикла;
	КонецЕсли;
	
	Если Номенклатура.ВестиУчетПоХарактеристикам Тогда
		Для Каждого СтрокаСрока Из СписокСроков Цикл
			Если Не ЗначениеЗаполнено(СтрокаСрока.Количество) или не ЗначениеЗаполнено(СтрокаСрока.Наименование) Тогда
				Продолжить;
			КонецЕсли;
			МЗ = РегистрыСведений.БС_ПриемкаТовара.СоздатьМенеджерЗаписи();
			МЗ.Документ = Документ;
			МЗ.Номенклатура = Номенклатура;
			МЗ.ХарактеристикаНоменклатуры = ПолучитьСсылкуСпрХарактеристики(Номенклатура, СтрокаСрока.Наименование);
			МЗ.Количество = СтрокаСрока.Количество;
			МЗ.Записать(Истина);
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(СписокСроков[0].Количество) Тогда
			МЗ = РегистрыСведений.БС_ПриемкаТовара.СоздатьМенеджерЗаписи();
			МЗ.Документ = Документ;
			МЗ.Номенклатура = Номенклатура;
			МЗ.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			МЗ.Количество = СписокСроков[0].Количество;
			МЗ.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСсылкуСпрХарактеристики(Номенклатура, НаименованиеСрока)
	ВыборкаХарактеристик = Справочники.ХарактеристикиНоменклатуры.Выбрать(,Номенклатура);
	Пока ВыборкаХарактеристик.Следующий() Цикл
		Если ВыборкаХарактеристик.Наименование = НаименованиеСрока Тогда
			Возврат ВыборкаХарактеристик.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоздатьНовуюХарактеристику(Номенклатура, НаименованиеСрока)
КонецФункции

Функция СоздатьНовуюХарактеристику(Номенклатура, НаименованиеСрока)
	НовыйЭлементСпр = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	НовыйЭлементСпр.Владелец = Номенклатура;
	НовыйЭлементСпр.Наименование = НаименованиеСрока;
	НовыйЭлементСпр.Записать();
	СсылкаНовыйЭлемент = НовыйЭлементСпр.Ссылка;
	
	СтрокаГод = Прав(НаименованиеСрока, 4);
	СтрокаМесяц = Сред(НаименованиеСрока, 4, 2);
	СтрокаДень = Лев(НаименованиеСрока, 2);
	ЧислоГод = Число(СтрокаГод);
	ЧислоМесяц = Число(СтрокаМесяц);
	ЧислоДень = Число(СтрокаДень);
	
	МЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	МЗ.Значение = Дата(ЧислоГод, ЧислоМесяц, ЧислоДень);
	МЗ.Объект = СсылкаНовыйЭлемент;
	МЗ.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000000001");
	МЗ.Записать(Истина);
	
	Возврат СсылкаНовыйЭлемент;
КонецФункции
#КонецОбласти

#Область Форма_завершения_сборки_документа
Процедура ФормаЗавершенияСборкиДокумента_ПереключательСобранПриИзменении(Форма) Экспорт
	Если Форма.ПереключательОтменаСборки = 1 Тогда
		Форма.Название = "Отмена сборки документа";
	Иначе
		Форма.Название = "Отложить документ";
	КонецЕсли;
КонецПроцедуры

Процедура ФормаЗавершенияСборкиДокумента_ПриОткрытии(Форма) Экспорт
	Форма.Название = "Прерывание сборки";
	Форма.ПереключательОтменаСборки = 0;
КонецПроцедуры

Процедура ФормаЗавершенияСборкиДокумента_КнопкаВыборНажатие(Форма) Экспорт
	Форма.Закрыть(Форма.ПереключательОтменаСборки);
КонецПроцедуры

Процедура ФормаЗавершенияСборкиДокумента_КнопкаОтменаНажатие(Форма) Экспорт
	Форма.Закрыть(0);
КонецПроцедуры
#КонецОбласти

#Область Форма_не_найденого_ШК
Процедура ФормаНеНайденогоШК_ПриОткрытии(Форма) Экспорт
	//СписокТовара.Колонки.Добавить("ШтрихКод",,"Штрих-код",16);
	Форма.СписокТовара.Колонки.Добавить("Номенклатура",,"Номенклатура",100);
	
	Для Каждого СтрокаТовара Из Товар Цикл
		Если СтрокаТовара.Отсканирован Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Форма.СписокТовара.Добавить();
		//НоваяСтрока.ШтрихКод = СтрокаТовара.ШтрихКод;
		НоваяСтрока.Номенклатура = СтрокаТовара.Номенклатура;
	КонецЦикла;
	
	Форма.ЭлементыФормы.СписокТовара.СоздатьКолонки();
	Форма.ЭлементыФормы.СписокТовара.Колонки.Номенклатура.ВысотаЯчейки = 2;
	
	Форма.ЭлементыФормы.КнопкаИзменитьВывод.Заголовок = "Весь список";
	Форма.ТекущийЭлемент = Форма.ЭлементыФормы.КнопкаИзменитьВывод;
КонецПроцедуры

Процедура ФормаНеНайденогоШК_СписокТовараВыбор(Форма) Экспорт
	ПривязатьНаФормеНеНайденогоШК(Форма);
КонецПроцедуры

Процедура ФормаНеНайденогоШК_КнопкаИзменитьВыводНажатие(Форма, Элемент) Экспорт
	Если Элемент.Заголовок = "Весь список" Тогда
		Элемент.Заголовок = "Не сканированные";
		Форма.СписокТовара.Очистить();
		Для Каждого СтрокаТовара Из Товар Цикл
			НоваяСтрока = Форма.СписокТовара.Добавить();
			//НоваяСтрока.ШтрихКод = СтрокаТовара.ШтрихКод;
			НоваяСтрока.Номенклатура = СтрокаТовара.Номенклатура;
		КонецЦикла;
	Иначе
		Элемент.Заголовок = "Весь список";
		Форма.СписокТовара.Очистить();
		Для Каждого СтрокаТовара Из Товар Цикл
			Если СтрокаТовара.Отсканирован Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Форма.СписокТовара.Добавить();
			//НоваяСтрока.ШтрихКод = СтрокаТовара.ШтрихКод;
			НоваяСтрока.Номенклатура = СтрокаТовара.Номенклатура;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ФормаНеНайденогоШК_КнопкаЗакрытьФормуНажатие(Форма) Экспорт
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(1, "Да");
	СписокКнопок.Добавить(2, "Нет");	
	Если мВопрос("Закрыть форму", СписокКнопок) = 1 Тогда
		Форма.Закрыть(1);
	КонецЕсли;
КонецПроцедуры

Процедура ФормаНеНайденогоШК_КнопкаПривязатьНажатие(Форма) Экспорт
	ПривязатьНаФормеНеНайденогоШК(Форма);
КонецПроцедуры

Процедура ПривязатьНаФормеНеНайденогоШК(Форма)
	Ошибка = ПроверитьШтрихКод(ШКТовара);
	Если Ошибка Тогда
		мПредупреждение("ШК номенклатуры должен"+Символы.ПС+"состять из 12-14 цифр.");
		Форма.Закрыть(1);
	КонецЕсли;
	
	ВыбраннаяНоменклатура = Форма.ЭлементыФормы.СписокТовара.ТекущаяСтрока.Номенклатура;
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(1, "Да");
	СписокКнопок.Добавить(2, "Нет");	
	ТекстВопроса = "Записать штрих-код """ + ШКТовара + """ в номенклатуру """ + ВыбраннаяНоменклатура + """";
	РазбитьСтроку(ТекстВопроса);
	Если Вопрос(ТекстВопроса, СписокКнопок) = 1 Тогда
		Номенклатура = ВыбраннаяНоменклатура;
		ИзменитьШтрихКодНоменклатуры(ШКТовара, ВыбраннаяНоменклатура, Номенклатура.ЕдиницаХраненияОстатков);
		Форма.Закрыть(ВыбраннаяНоменклатура);
	КонецЕсли;	
КонецПроцедуры
#КонецОбласти

#Область Форма_инвентаризации_номенклатуры
Процедура ФормаИнвентаризацииНоменклатуры_ПередОткрытием(Форма, Отказ, СтандартнаяОбработка) Экспорт
	ЗаблокированнаяСтрока = Неопределено;
	Если БлокировкаПозицииДляДругих(Истина, Форма, ЗаблокированнаяСтрока) Тогда
		Если Пользователь = ЗаблокированнаяСтрока.Пользователь Тогда 
			Возврат;
		КонецЕсли;
		Если Пользователь = ПользовательБазулин Тогда
			ТекстСообщения = СтрШаблон("Позиция ""%1"" заблокирована пользователем ""%2"" в %3. Разблокировать?", ЗаблокированнаяСтрока.Номенклатура, ЗаблокированнаяСтрока.Пользователь, ЗаблокированнаяСтрока.ВремяБлокировки);
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(1, "Разблокировать");
			СписокКнопок.Добавить(2, "Отмена");
			Ответ = мВопрос(ТекстСообщения, СписокКнопок);
			Если Ответ = 1 Тогда
				ТаблицаБлокировок = ПолучитьЗначениеИзРССохраненныеНастройки("Таблица блокировок инвентаризации");
				СтрокаТаблицы = ТаблицаБлокировок.Найти(Номенклатура, "Номенклатура");
				ТаблицаБлокировок.Удалить(СтрокаТаблицы);
				СохранитьЗначениеВРССохраненныеНастройки("Таблица блокировок инвентаризации", ТаблицаБлокировок);
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ФормаИнвентаризацииНоменклатуры_ПриОткрытии(Форма) Экспорт
	Форма.ЕстьХарактеристики = Номенклатура.ВестиУчетПоХарактеристикам;
	Остатки = РегистрыНакопления.ТоварыНаСкладах.Остатки(ДокументИнвентаризации.Дата, Новый Структура("Склад, Номенклатура", ДокументИнвентаризации.Склад, Номенклатура),, "Количество");
	ОстаткиДоИнвентаризации = РегистрыНакопления.ТоварыНаСкладах.Остатки(ДатаНачалаИнвентаризации-1, Новый Структура("Склад, Номенклатура", ДокументИнвентаризации.Склад, Номенклатура),, "Количество");
	Форма.ЭлементыФормы.НадписьКоличествоУпр.Заголовок = Остатки.Итог("Количество");
	Форма.ЭлементыФормы.НадписьКоличествоДоИнв.Заголовок = ОстаткиДоИнвентаризации.Итог("Количество");
	ВывестиИтогиФормыИнвентаризацииНоменклатуры(Форма);
КонецПроцедуры

Функция БлокировкаПозицииДляДругих(Заблокировать, Форма, ЗаблокированнаяСтрока = Неопределено)
	Если Заблокировать Тогда
		ТаблицаБлокировок = ПолучитьЗначениеИзРССохраненныеНастройки("Таблица блокировок инвентаризации");
		Если ТаблицаБлокировок = Неопределено Тогда
			ТаблицаБлокировок = Новый ТаблицаЗначений;
			ТаблицаБлокировок.Колонки.Добавить("Номенклатура");
			ТаблицаБлокировок.Колонки.Добавить("ВремяБлокировки");
			ТаблицаБлокировок.Колонки.Добавить("Пользователь");
		КонецЕсли;
		СтрокаТаблицы = ТаблицаБлокировок.Найти(Номенклатура, "Номенклатура");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = ТаблицаБлокировок.Добавить();
			СтрокаТаблицы.Номенклатура = Номенклатура;
			СтрокаТаблицы.ВремяБлокировки = ТекущаяДата();
			СтрокаТаблицы.Пользователь = Пользователь;
			ЗаблокированнаяСтрока = СтрокаТаблицы;
			СохранитьЗначениеВРССохраненныеНастройки("Таблица блокировок инвентаризации", ТаблицаБлокировок);
			Возврат Ложь;
		Иначе  
			ЗаблокированнаяСтрока = СтрокаТаблицы;
			Возврат Истина;
		КонецЕсли;
	Иначе
		ТаблицаБлокировок = ПолучитьЗначениеИзРССохраненныеНастройки("Таблица блокировок инвентаризации");
		СтрокаТаблицы = ТаблицаБлокировок.Найти(Номенклатура, "Номенклатура");
		ТаблицаБлокировок.Удалить(СтрокаТаблицы);
		СохранитьЗначениеВРССохраненныеНастройки("Таблица блокировок инвентаризации", ТаблицаБлокировок);
		Возврат Ложь;
	КонецЕсли;
КонецФункции      				

Функция ПолучитьПользователяБлокировки()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Инвентаризация.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.Инвентаризация КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Документ = &Документ
	|	И Инвентаризация.Номенклатура = &Номенклатура";
	Запрос.УстановитьПараметр("Документ", ДокументИнвентаризации);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ФормаИнвентаризацииНоменклатуры_КнопкаОтменаНажатие(Форма) Экспорт
	БлокировкаПозицииДляДругих(Ложь, Форма);
	Форма.Закрыть();
КонецПроцедуры

Процедура ФормаИнвентаризацииНоменклатуры_КнопкаПодтвердитьНажатие(Форма) Экспорт
	ТаблицаУпр = РегистрыНакопления.ТоварыНаСкладах.Остатки(ДокументИнвентаризации.Дата, 
	Новый Структура("Склад, Номенклатура", ДокументИнвентаризации.Склад, Номенклатура),, "Количество");
	КоличествоУпр = ТаблицаУпр.Итог("Количество");
	КоличествоИнв = 0;
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаХарактеристик Цикл
		Если СтрокаТаблицы.Инвентаризировалась Тогда
			КоличествоИнв = КоличествоИнв + СтрокаТаблицы.Количество;
		КонецЕсли;
	КонецЦикла;
	
	//Меньше = ?(КоличествоИнв>КоличествоУпр,КоличествоУпр,КоличествоИнв);
	//Больше = ?(КоличествоИнв<КоличествоУпр,КоличествоУпр,КоличествоИнв);
	//Если (Меньше/Больше)<0.9 Тогда
	//	Текст = "Введённое кол-во сильно отличается от учётного. Продолжить?";
	//	РазбитьСтроку(Текст);
	//	Если Вопрос(Текст,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если КоличествоУпр <> КоличествоИнв Тогда
		Текст = "Введённое кол-во отличается от учётного. Продолжить?";
		//РазбитьСтроку(Текст);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Да");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Нет");
		Если мВопрос(Текст, СписокКнопок, Истина) = КодВозвратаДиалога.Нет Тогда 
			//Если Вопрос(Текст,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ЛокальноСоздатьЗаписьИнвентаризации(Форма);
	
	//Автоматически назначить цену, если нет для этой даты
	//извлечь даты, на которые нет цен - по данной номенклатуре и данной дате нет цены -------------
	ЗапросХарактеристикБезЦен = Новый Запрос;
	ЗапросХарактеристикБезЦен.Текст =
	"ВЫБРАТЬ
	|	Инвентаризация.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ЗначенияСвойствОбъектов.Значение КАК Дата
	|ИЗ
	|	РегистрСведений.Инвентаризация КАК Инвентаризация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	|		ГДЕ
	|			ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦенПродажи) КАК ЗапросЦен
	|		ПО Инвентаризация.Номенклатура = ЗапросЦен.Номенклатура
	|			И Инвентаризация.ХарактеристикаНоменклатуры = ЗапросЦен.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО Инвентаризация.ХарактеристикаНоменклатуры = ЗначенияСвойствОбъектов.Объект
	|ГДЕ
	|	Инвентаризация.Документ = &Документ
	|	И Инвентаризация.Номенклатура = &Номенклатура
	|	И Инвентаризация.Количество > 0
	|	И ЗапросЦен.Номенклатура ЕСТЬ NULL
	|	И ЗначенияСвойствОбъектов.Свойство = &СвойствоСрокГодности";
	ЗапросХарактеристикБезЦен.УстановитьПараметр("Номенклатура", Номенклатура);
	ЗапросХарактеристикБезЦен.УстановитьПараметр("ТипЦенПродажи", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000002"));
	ЗапросХарактеристикБезЦен.УстановитьПараметр("Документ", ДокументИнвентаризации);
	ЗапросХарактеристикБезЦен.УстановитьПараметр("СвойствоСрокГодности", СвойствоСрокГодности);
	ВыборкаХарактеристикиБезЦен = ЗапросХарактеристикБезЦен.Выполнить().Выбрать();
	
	//извлечь все цены со сроками годности на данную номенклатуру
	ЗапросЦенСоСроками = Новый Запрос;
	ЗапросЦенСоСроками.Текст=
	"ВЫБРАТЬ
	|	ОсновнойЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ОсновнойЗапрос.Дата КАК Дата,
	|	ЗапросЦеныЗакупки.Цена КАК ЦенаЗакупки,
	|	ЗапросЦеныПродажи.Цена КАК ЦенаПродажи,
	|	ОсновнойЗапрос.Период КАК Период,
	|	ОсновнойЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЦеныНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЕСТЬNULL(ВложенныйЗапрос.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Дата,
	|		МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период,
	|		ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	ИЗ
	|		РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ЗначенияСвойствОбъектов.Объект КАК Объект,
	|				ЗначенияСвойствОбъектов.Значение КАК Значение
	|			ИЗ
	|				РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ГДЕ
	|				ЗначенияСвойствОбъектов.Свойство = &СвойствоСрокГодности) КАК ВложенныйЗапрос
	|			ПО ЦеныНоменклатуры.ХарактеристикаНоменклатуры = ВложенныйЗапрос.Объект
	|	ГДЕ
	|		ЦеныНоменклатуры.Номенклатура = &Номенклатура
	|		И ЦеныНоменклатуры.ТипЦен = &ТипЦенЗакупки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЦеныНоменклатуры.ХарактеристикаНоменклатуры,
	|		ЕСТЬNULL(ВложенныйЗапрос.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	|		ЦеныНоменклатуры.Номенклатура,
	|		ЦеныНоменклатуры.ЕдиницаИзмерения) КАК ОсновнойЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЗапросЦеныЗакупки
	|		ПО ОсновнойЗапрос.Период = ЗапросЦеныЗакупки.Период
	|			И ОсновнойЗапрос.Номенклатура = ЗапросЦеныЗакупки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЗапросЦеныПродажи
	|		ПО ОсновнойЗапрос.Период = ЗапросЦеныПродажи.Период
	|			И ОсновнойЗапрос.Номенклатура = ЗапросЦеныПродажи.Номенклатура
	|ГДЕ
	|	ЗапросЦеныЗакупки.ТипЦен = &ТипЦенЗакупки
	|	И ЗапросЦеныПродажи.ТипЦен = &ТипЦенПродажи
	|	И ЗапросЦеныЗакупки.Цена > 0.01
	|	И ЗапросЦеныПродажи.Цена > 0.01";
	ЗапросЦенСоСроками.УстановитьПараметр("Номенклатура", Номенклатура);
	ЗапросЦенСоСроками.УстановитьПараметр("ТипЦенПродажи", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000002"));
	ЗапросЦенСоСроками.УстановитьПараметр("ТипЦенЗакупки", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"));
	ЗапросЦенСоСроками.УстановитьПараметр("СвойствоСрокГодности", СвойствоСрокГодности);
	ВыборкаЦеныСоСроками = ЗапросЦенСоСроками.Выполнить().Выбрать();
	
	Если ВыборкаХарактеристикиБезЦен.Количество() > 0 Тогда 
		Пока ВыборкаХарактеристикиБезЦен.Следующий() Цикл
			//    найти среди всех сроков годности ближайший к нашему
			ДатаБезЦены=ВыборкаХарактеристикиБезЦен.Дата;
			МинРазница=Неопределено;
			ЦенаЗакупки = 0;
			ЦенаПродажи = 0;
			Если ВыборкаЦеныСоСроками.Количество() > 0 Тогда
				ВыборкаЦеныСоСроками.Сбросить();
				Пока ВыборкаЦеныСоСроками.Следующий() Цикл
					Разница = ВыборкаЦеныСоСроками.Дата-ДатаБезЦены; 
					Разница = Макс(-Разница, Разница);
					МинРазница = ?(МинРазница = Неопределено, Разница, МинРазница);
					Если Разница <= МинРазница Тогда
						ЦенаЗакупки=ВыборкаЦеныСоСроками.ЦенаЗакупки;
						ЦенаПродажи=ВыборкаЦеныСоСроками.ЦенаПродажи;
						МинРазница=Разница;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			//    создать новую запись с найденной ценой для этой номенклатуры и срока годности
			Если ЦенаЗакупки <> 0 Тогда
				Параметры = Новый Структура;
				Параметры.Вставить("Номенклатура", Номенклатура);
				Параметры.Вставить("ЦенаЗакупки", ЦенаЗакупки);
				Параметры.Вставить("ЦенаПродажи", ЦенаПродажи);
				Параметры.Вставить("ХарактеристикаНоменклатуры", ВыборкаХарактеристикиБезЦен.ХарактеристикаНоменклатуры);
				Параметры.Вставить("ЕдИзмерения", ВыборкаЦеныСоСроками.ЕдиницаИзмерения);
				
				СозданиеДокументаУстановкаЦенНоменклатуры(Параметры);	
				
			Иначе
				//цен нет вообще, то эту номенклатуру удалить из списка и выдать предупреждение
				Текст="Внимание!!! По данной позиции цены не установлены. Сообщите об этом в поддержку.";
				РазбитьСтроку(Текст);
				мПредупреждение(Текст);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Форма.Закрыть();
КонецПроцедуры

Процедура СозданиеДокументаУстановкаЦенНоменклатуры(Параметры)
	ВалютаРуб = Справочники.Валюты.НайтиПоКоду("643");
	
	ДокУстановкаЦен = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
	ДокУстановкаЦен.Дата = ТекущаяДата();
	ДокУстановкаЦен.Информация="Закупочная, Цена продажи";
	ДокУстановкаЦен.Комментарий="На основании инвентаризации №"+ДокументИнвентаризации.Номер+" от "+ДокументИнвентаризации.Дата;
	ДокУстановкаЦен.НеПроводитьНулевыеЗначения = Истина;
	ДокУстановкаЦен.Ответственный=Пользователь;
	
	//2 записи для Товары -------------------
	Товары = ДокУстановкаЦен.Товары;
	Запись=Товары.Добавить();
	Запись.Номенклатура = Параметры.Номенклатура;
	Запись.ХарактеристикаНоменклатуры = Параметры.ХарактеристикаНоменклатуры;
	Запись.Цена = Параметры.ЦенаЗакупки;
	Запись.Валюта = ВалютаРуб;
	Запись.ЕдиницаИзмерения = Параметры.ЕдИзмерения;
	Запись.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
	Запись.ПроцентСкидкиНаценки = 0;
	Запись.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПустаяСсылка();
	
	Запись=Товары.Добавить();
	Запись.Номенклатура=Номенклатура;
	Запись.ХарактеристикаНоменклатуры = Параметры.ХарактеристикаНоменклатуры;
	Запись.Цена = Параметры.ЦенаПродажи;
	Запись.Валюта = ВалютаРуб;
	Запись.ЕдиницаИзмерения =Параметры.ЕдИзмерения;
	Запись.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000002");
	Запись.ПроцентСкидкиНаценки = Окр(Параметры.ЦенаПродажи/Параметры.ЦенаЗакупки*100-100);
	Запись.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип;
	
	
	
	//2 записи для ТипыЦен ----------------
	ТипыЦен = ДокУстановкаЦен.ТипыЦен;
	Запись = ТипыЦен.Добавить();
	Запись.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
	
	Запись = ТипыЦен.Добавить();
	Запись.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000002");
	
	
	ДокУстановкаЦен.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

Процедура ВывестиИтогиФормыИнвентаризацииНоменклатуры(Форма)
	Форма.ТаблицаХарактеристик = ЛокальноПолучитьОстаткиПоХарактеристикам(Форма);
	
	СортироватьПоДате(Форма, Форма.ТаблицаХарактеристик);
	
	ВывестиИтогПоИнвентаризации(Форма);	
	
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.СоздатьКолонки();
	
	РазмерШрифта = ?(ТипЭкрана = 2, 12, ?(ТипЭкрана = 3, 18, 12));
	
	ШрифтТекста = Новый Шрифт(Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Шрифт,,РазмерШрифта);
	//ШрифтШапки = Новый Шрифт(ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.ХарактеристикаНоменклатуры.ШрифтШапки,,12);
	
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.Инвентаризировалась.Видимость = Ложь;
	
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.ХарактеристикаНоменклатуры.Ширина = 10;
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.ХарактеристикаНоменклатуры.ТекстШапки = "Срок";
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.ХарактеристикаНоменклатуры.ШрифтТекста = ШрифтТекста;
	//ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.ХарактеристикаНоменклатуры.ШрифтШапки = ШрифтШапки;
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.ХарактеристикаНоменклатуры.ТолькоПросмотр = Истина;
	
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.Количество.Ширина = 10;
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.Количество.ТекстШапки = "Количество";
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.Количество.ШрифтТекста = ШрифтТекста;
	//ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.Количество.ШрифтШапки = ШрифтШапки;
	
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.Пользователь.Ширина = 10;
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.Пользователь.ТекстШапки = "Сборщик";
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.Пользователь.ШрифтТекста = ШрифтТекста;
	//ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.Пользователь.ШрифтШапки = ШрифтШапки;
	Форма.ЭлементыФормы.ТабличноеПолеХарактеристик.Колонки.Пользователь.ТолькоПросмотр = Истина;	
КонецПроцедуры

Процедура ВывестиИтогПоИнвентаризации(Форма)
	Итог = 0;
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаХарактеристик Цикл
		Если СтрокаТаблицы.Инвентаризировалась Тогда
			Итог = Итог + СтрокаТаблицы.Количество;
		КонецЕсли;
	КонецЦикла;
	Форма.ЭлементыФормы.НадписьКоличествоИнв.Заголовок = Итог;
	//ЭлементыФормы.НадписьКоличествоИнв.Заголовок = ТаблицаХарактеристик.Итог("Количество");
КонецПроцедуры

Функция ЛокальноПолучитьОстаткиПоХарактеристикам(Форма)
	ЗапросОстатков = Новый Запрос;
	ЗапросОстатков.Текст =
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиПоСкладу
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			Склад = &Склад
	|				И Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Инвентаризация.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(Инвентаризация.Период) КАК Период
	|ПОМЕСТИТЬ ПериодИнв
	|ИЗ
	|	РегистрСведений.Инвентаризация КАК Инвентаризация
	|ГДЕ
	|	Инвентаризация.Документ = &Документ
	|	И Инвентаризация.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Инвентаризация.ХарактеристикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодИнв.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Инвентаризация.Пользователь КАК Пользователь,
	|	Инвентаризация.Количество КАК Количество
	|ПОМЕСТИТЬ ОстаткиПоИнв
	|ИЗ
	|	ПериодИнв КАК ПериодИнв
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Инвентаризация КАК Инвентаризация
	|		ПО ПериодИнв.ХарактеристикаНоменклатуры = Инвентаризация.ХарактеристикаНоменклатуры
	|			И ПериодИнв.Период = Инвентаризация.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОстаткиПоИнв.ХарактеристикаНоменклатуры, ОстаткиПоСкладу.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ОстаткиПоИнв.Количество ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Инвентаризировалась,
	|	ОстаткиПоИнв.Пользователь КАК Пользователь,
	|	ЕСТЬNULL(ОстаткиПоИнв.Количество, ОстаткиПоСкладу.КоличествоОстаток) КАК Количество
	|ИЗ
	|	ОстаткиПоСкладу КАК ОстаткиПоСкладу
	|		ПОЛНОЕ СОЕДИНЕНИЕ ОстаткиПоИнв КАК ОстаткиПоИнв
	|		ПО ОстаткиПоСкладу.ХарактеристикаНоменклатуры = ОстаткиПоИнв.ХарактеристикаНоменклатуры";
	ЗапросОстатков.УстановитьПараметр("Документ", ДокументИнвентаризации);
	ЗапросОстатков.УстановитьПараметр("Номенклатура", Номенклатура);
	ЗапросОстатков.УстановитьПараметр("Склад", ДокументИнвентаризации.Склад);
	Форма.ТаблицаХарактеристик = ЗапросОстатков.Выполнить().Выгрузить();
	Если не Форма.ЕстьХарактеристики и Форма.ТаблицаХарактеристик.Количество() = 0 Тогда
		НоваяСтрока = Форма.ТаблицаХарактеристик.Добавить();
		НоваяСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		НоваяСтрока.Инвентаризировалась = Ложь;
		НоваяСтрока.Пользователь = Неопределено;
		НоваяСтрока.Количество = 0;
	КонецЕсли;
	Возврат Форма.ТаблицаХарактеристик;
КонецФункции

Процедура ЛокальноСоздатьЗаписьИнвентаризации(Форма)
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаХарактеристик Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Пользователь) И СтрокаТаблицы.Пользователь <> Пользователь Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапросИзРегистра = Новый Запрос;
		ЗапросИзРегистра.Текст =
		"ВЫБРАТЬ
		|	Инвентаризация.Период
		|ИЗ
		|	РегистрСведений.Инвентаризация КАК Инвентаризация
		|ГДЕ
		|	Инвентаризация.Документ = &Документ
		|	И Инвентаризация.Номенклатура = &Номенклатура
		|	И Инвентаризация.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|	И Инвентаризация.Пользователь = &Пользователь";
		ЗапросИзРегистра.УстановитьПараметр("Документ", ДокументИнвентаризации);
		ЗапросИзРегистра.УстановитьПараметр("Номенклатура", Номенклатура);
		ЗапросИзРегистра.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		ЗапросИзРегистра.УстановитьПараметр("Пользователь", Пользователь);
		Выборка = ЗапросИзРегистра.Выполнить().Выбрать();
		МЗ = РегистрыСведений.Инвентаризация.СоздатьМенеджерЗаписи();
		Пока Выборка.Следующий() Цикл
			МЗ.Документ = ДокументИнвентаризации;
			МЗ.Номенклатура = Номенклатура;
			МЗ.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			МЗ.Пользователь = Пользователь;
			МЗ.Период = Выборка.Период;
			МЗ.Прочитать();
			Если МЗ.Выбран() Тогда
				МЗ.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		МЗ.Документ = ДокументИнвентаризации;
		МЗ.Номенклатура = Номенклатура;
		МЗ.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		МЗ.Количество = СтрокаТаблицы.Количество;
		МЗ.Период = ТекущаяДата();
		МЗ.Пользователь = Пользователь;
		МЗ.Комментарий = "Изменения внесены с """ + ПолучитьИмяТерминальногоКомпьютера() + """";		
		МЗ.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьВТаблицуХарактеристикДействующиеСроки(Форма, ТаблицаХарактеристик)
	Если не Форма.ЕстьХарактеристики Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДокумента = ДокументИнвентаризации.Дата;
	
	ВыборкаХарактеристик = Справочники.ХарактеристикиНоменклатуры.Выбрать(, Номенклатура);	
	Пока ВыборкаХарактеристик.Следующий() Цикл
		
		СтрокаХарактеристик = ТаблицаХарактеристик.Найти(ВыборкаХарактеристик.Ссылка, "ХарактеристикаНоменклатуры");
		Если СтрокаХарактеристик <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаХарактеристики = ?(СтрДлина(ВыборкаХарактеристик.Наименование)=10 и Сред(ВыборкаХарактеристик.Наименование,3,1)=".",Дата(ВыборкаХарактеристик.Наименование+" 0:0:0"),ДатаДокумента);
		Если ДатаХарактеристики < ДатаДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаХарактеристик.Добавить();
		НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаХарактеристик.Ссылка;
		НоваяСтрока.КоличествоОстаток = 0;
	КонецЦикла;
КонецПроцедуры

Процедура СортироватьПоДате(Форма, ТаблицаХарактеристик)
	Если не Форма.ЕстьХарактеристики Тогда
		Возврат;
	КонецЕсли;
	ТаблицаХарактеристик.Колонки.Добавить("Сортировка");
	ДатаДокумента = ДокументИнвентаризации.Дата;
	Для Каждого СтрокаХарактеристики Из ТаблицаХарактеристик Цикл
		ХарактеристикаНоменклатуры = СтрокаХарактеристики.ХарактеристикаНоменклатуры;
		ДатаХарактеристики = ?(СтрДлина(ХарактеристикаНоменклатуры.Наименование)=10 и Сред(ХарактеристикаНоменклатуры.Наименование,3,1)=".",Дата(ХарактеристикаНоменклатуры.Наименование+" 0:0:0"),ДатаДокумента);
		СтрокаХарактеристики.Сортировка = Формат(ДатаХарактеристики,"ДФ=yyyyMMdd");
	КонецЦикла;
	ТаблицаХарактеристик.Сортировать("Сортировка");
	ТаблицаХарактеристик.Колонки.Удалить(ТаблицаХарактеристик.Колонки.Индекс(ТаблицаХарактеристик.Колонки.Найти("Сортировка")));
КонецПроцедуры

Процедура ФормаИнвентаризацииНоменклатуры_ТабличноеПолеХарактеристикПриОкончанииРедактирования(Форма, Элемент) Экспорт
	ЗначениеПользователь = Элемент.ТекущаяСтрока.Пользователь;
	ЗначениеХарактеристика = Элемент.ТекущаяСтрока.ХарактеристикаНоменклатуры;
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаХарактеристик Цикл
		Если СтрокаТаблицы.Пользователь = ЗначениеПользователь
			и СтрокаТаблицы.ХарактеристикаНоменклатуры = ЗначениеХарактеристика Тогда
			СтрокаТаблицы.Инвентаризировалась = Истина;
			СтрокаТаблицы.Пользователь = Пользователь;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиИтогПоИнвентаризации(Форма);
КонецПроцедуры

Процедура ФормаИнвентаризацииНоменклатуры_ТабличноеПолеХарактеристикПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
	ФонНеИнвентаризировалась = WebЦвета.Белый;
	ФонИнвентаризироваласьЭтимПользователем = WebЦвета.СветлоЗеленый;
	ФонНельзяРедактировать = WebЦвета.СветлоСерый;
	ОформлениеСтроки.ЦветФона = ?(ЗначениеЗаполнено(ДанныеСтроки.Пользователь), ?(ДанныеСтроки.Пользователь = Пользователь, ФонИнвентаризироваласьЭтимПользователем, ФонНельзяРедактировать), ФонНеИнвентаризировалась);
	
	ДатаСрока = ПолучитьДатуИзХарактеристики(ДанныеСтроки.ХарактеристикаНоменклатуры);
	Если ТипЗнч(ДатаСрока) = Тип("Дата") Тогда
		Если КонецМесяца(ДатаСрока) = КонецДня(ДатаСрока) Тогда
			ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		Иначе                                      
			ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли; 
	ОформлениеСтроки.ЦветТекста = ЦветТекста;
КонецПроцедуры

Процедура ФормаИнвентаризацииНоменклатуры_ТабличноеПолеХарактеристикПередНачаломИзменения(Элемент, Отказ) Экспорт
	Базулин = Справочники.Пользователи.НайтиПоКоду("Базулин Дмитрий");
	
	Если не Элемент.ТекущаяСтрока.Инвентаризировалась Тогда
		Возврат;
	КонецЕсли;
	
	Если Пользователь = Базулин Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущаяСтрока.Пользователь = Пользователь Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
КонецПроцедуры

Процедура ФормаИнвентаризацииНоменклатуры_КнопкаДобавитьНажатие(Форма) Экспорт
	Если Форма.ЕстьХарактеристики Тогда
		ФормаВыбораХарактеристики_Наименование = ?(ТипЭкрана = 2, "ФормаВыбораХарактеристики_480х800", "ФормаВыбораХарактеристики");
		ФормаВыбораХарактеристики = ПолучитьФорму(ФормаВыбораХарактеристики_Наименование);
		ФормаВыбораХарактеристики.ТекНоменклатура = Номенклатура;
		ФормаВыбораХарактеристики.ТаблицаХарактеристик = ПолучитьСписокДействующихХарактеристик(Форма); 
		ВыбранноеЗначение = ФормаВыбораХарактеристики.ОткрытьМодально();
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			НоваяСтрока = Форма.ТаблицаХарактеристик.Добавить();
			НоваяСтрока.Инвентаризировалась = Ложь;
			НоваяСтрока.Количество = 0;
			НоваяСтрока.ХарактеристикаНоменклатуры = ВыбранноеЗначение;
			НоваяСтрока.Пользователь = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСписокДействующихХарактеристик(Форма)
	ЛокальнаяТаблицаХарактеристик = Новый ТаблицаЗначений;
	ЛокальнаяТаблицаХарактеристик.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ВыборкаХарактеристик = Справочники.ХарактеристикиНоменклатуры.Выбрать(,Номенклатура);
	Пока ВыборкаХарактеристик.Следующий() Цикл
		НоваяСтрока = ЛокальнаяТаблицаХарактеристик.Добавить();
		НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаХарактеристик.Ссылка;
	КонецЦикла;
	СортироватьПоДате(Форма, ЛокальнаяТаблицаХарактеристик);
	
	//Удалить характеристики, по которым есть записи для текущего пользователя
	Для Каждого СтрокаОсновнойТаблицы Из Форма.ТаблицаХарактеристик Цикл
		Если СтрокаОсновнойТаблицы.Пользователь = Пользователь Тогда
			УдаляемаяХарактеристика = СтрокаОсновнойТаблицы.ХарактеристикаНоменклатуры;
			Для Каждого СтрокаЛокальнойТаблицы Из ЛокальнаяТаблицаХарактеристик Цикл
				Если СтрокаЛокальнойТаблицы.ХарактеристикаНоменклатуры = УдаляемаяХарактеристика Тогда
					ЛокальнаяТаблицаХарактеристик.Удалить(СтрокаЛокальнойТаблицы);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СписокХарактеристик = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из ЛокальнаяТаблицаХарактеристик Цикл
		СписокХарактеристик.Добавить(СтрокаТаблицы.ХарактеристикаНоменклатуры);
	КонецЦикла;
	
	Возврат СписокХарактеристик;
КонецФункции

#КонецОбласти

#Область Форма_Выбора_Характеристики
Процедура ФормаВыбораХарактеристики_КнопкаДобавитьНажатие(Форма)  Экспорт
	ФормаВводаМесяцаИГода_Наименование = ?(ТипЭкрана = 2, "ФормаВводаМесяцаИГода_480х800", ?(ТипЭкрана = 3, "ФормаВводаМесяцаИГода_1280х768", "ФормаВводаМесяцаИГода"));
	ФормаВводаМесяцаИГода = ПолучитьФорму(ФормаВводаМесяцаИГода_Наименование);
	ФормаВводаМесяцаИГода.Номенклатура = Форма.ТекНоменклатура;      
	Результат = ФормаВводаМесяцаИГода.ОткрытьМодально();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		Форма.Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаВыбораХарактеристики_ПриОткрытии(Форма) Экспорт
	РазмерШрифта = ?(ТипЭкрана = 2, 12, ?(ТипЭкрана = 3, 18, 12));	
	Форма.ЭлементыФормы.ТаблицаХарактеристик.Шрифт = Новый Шрифт(Форма.ЭлементыФормы.ТаблицаХарактеристик.Шрифт,,РазмерШрифта);
	Если Форма.ТаблицаХарактеристик.Количество() > 0 Тогда
		Форма.ЭлементыФормы.ТаблицаХарактеристик.ТекущаяСтрока = Форма.ТаблицаХарактеристик[Форма.ТаблицаХарактеристик.Количество()-1];
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область Форма_Ввода_Месяца_и_Года
Процедура ФормаВводаМесяцаГода_ПриОткрытии(Форма) Экспорт
	Форма.ПолеВводаГода = Год(ТекущаяДата()) + 2;
	Форма.ПолеВводаМесяца = Месяц(ТекущаяДата());	
КонецПроцедуры	
Процедура ФормаВводаМесяцаГода_КнопкаДобавитьНажатие(Форма) Экспорт
	ПолеВводаГода=Форма.ПолеВводаГода;
	ПолеВводаМесяца=Форма.ПолеВводаМесяца;
	ПолеВводаДня=Форма.ПолеВводаДня;
	
	ДатаКонцаМесяца=КонецМесяца(Дата(ПолеВводаГода, ПолеВводаМесяца, 1));
	ДеньКонца= Мин(ПолеВводаДня,День(ДатаКонцаМесяца));  //день не должен быть больше последнего дня месяца
	ДатаНовогоСрока =  ? (ПолеВводаДня = 0, ДатаКонцаМесяца, Дата(ПолеВводаГода, ПолеВводаМесяца, ДеньКонца));
	НаименованиеНовогоСрока = Формат(ДатаНовогоСрока, "ДФ=dd.MM.yyyy");
	спрХН = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(НаименованиеНовогоСрока, Истина,, Номенклатура);
	Если спрХН = Неопределено или Не ЗначениеЗаполнено(спрХН) Тогда
		НовыйЭлементСпр = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		НовыйЭлементСпр.Владелец = Номенклатура;
		НовыйЭлементСпр.Наименование = НаименованиеНовогоСрока;
		НовыйЭлементСпр.Записать();
		СсылкаНовыйЭлемент = НовыйЭлементСпр.Ссылка;
		
		СтрокаГод = Прав(НаименованиеНовогоСрока, 4);
		СтрокаМесяц = Сред(НаименованиеНовогоСрока, 4, 2);
		СтрокаДень = Лев(НаименованиеНовогоСрока, 2);
		ЧислоГод = Число(СтрокаГод);
		ЧислоМесяц = Число(СтрокаМесяц);
		ЧислоДень = Число(СтрокаДень);
		
		МЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		МЗ.Значение = Дата(ЧислоГод, ЧислоМесяц, ЧислоДень);
		МЗ.Объект = СсылкаНовыйЭлемент;
		МЗ.Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000000001");
		МЗ.Записать(Истина);
		Форма.Закрыть(СсылкаНовыйЭлемент);
	Иначе
		Форма.Закрыть(спрХН);
	КонецЕсли;
КонецПроцедуры
Процедура ФормаВводаМесяцаГода_МесяцРегулирование(Элемент, Направление, СтандартнаяОбработка) Экспорт
	//крутимся в рамках 1..12
	СтандартнаяОбработка = Ложь;    
	Элемент.Значение= (Элемент.Значение-1+12+Направление*1) % 12 + 1;
КонецПроцедуры
Процедура ФормаВводаМесяцаГода_ДеньРегулирование(Форма,Элемент, Направление, СтандартнаяОбработка) Экспорт
	//крутимся в рамках 1..<последний день месяца>
	ПолеВводаГода=Форма.ПолеВводаГода;
	ПолеВводаМесяца=Форма.ПолеВводаМесяца;
	СтандартнаяОбработка = Ложь; 
	Последний= День(КонецМесяца(Дата(ПолеВводаГода, ПолеВводаМесяца, 1)));
	Элемент.Значение= (Элемент.Значение-1+Последний+Направление*1) % Последний + 1;
КонецПроцедуры
#КонецОбласти

#Область ФормаВыбораСкладаВозврата

Процедура ВыборСклада(Форма, ИмяСклада, Пользователь) Экспорт; 
	
	Если ИмяСклада = "Гурьянова" Тогда 
		СкладВозврата = Справочники.Склады.НайтиПоКоду("000000001");
		Форма.ЭлементыФормы.ТекущийСклад.Заголовок = СкладВозврата.Наименование;
	ИначеЕсли ИмяСклада = "Новорязанка" Тогда
		СкладВозврата = Справочники.Склады.НайтиПоКоду("000000029");
	ИначеЕсли ИмяСклада = "Калининград" Тогда
		СкладВозврата = Справочники.Склады.НайтиПоКоду("000000028");
	ИначеЕсли ИмяСклада = "Чертаново" Тогда
		СкладВозврата = Справочники.Склады.НайтиПоКоду("000000030");
	КонецЕсли; 
	
	Форма.ЭлементыФормы.ТекущийСклад.Заголовок = СкладВозврата.Наименование;
	НаименованиеНастройки = "Значение склада возврата_" + Пользователь;
	БС_ИзмененияКонфигурацииСервер.СохранитьЗначениеВОбщихНастройках("СкладВозвратаТСД", НаименованиеНастройки,, Форма.ЭлементыФормы.ТекущийСклад.Заголовок); 
	Форма.Закрыть(); 
	
КонецПроцедуры

Процедура ВосстановитьЗначенияФормы(Форма, Пользователь) Экспорт; 
	
 	НаименованиеНастройки = "Значение склада возврата_" + Пользователь; 
	СкладВозврата = БС_ИзмененияКонфигурацииСервер.ВосстановитьЗначениеИзОбщихНастроек("СкладВозвратаТСД", НаименованиеНастройки,, Ложь); 
 	Форма.ЭлементыФормы.ТекущийСклад.Заголовок =  СкладВозврата;

КонецПроцедуры

	#КонецОбласти  
	
	#Область Форма_ввода_количества_и_сроков
	Процедура ФормаВводаКоличестваИСроков_ПриОткрытии(Форма) Экспорт
		СписокСроков = Форма.СписокСроков;
		Номенклатура = Форма.Номенклатура;
		ЭлементыФормы = Форма.ЭлементыФормы;
		
		СписокСроков.Колонки.Добавить("Наименование",,,10);
		СписокСроков.Колонки.Добавить("Количество",,,10);
		Если Номенклатура.ВестиУчетПоХарактеристикам Тогда
			Если не ЗначениеЗаполнено(Форма.НаименованиеСрока) Тогда
				Форма.НаименованиеСрока = ФормаВводаКоличестваИСроков_ПолучитьНаименованиеПоследнегоСрока(Номенклатура);
			КонецЕсли;
			Если не ЗначениеЗаполнено(Форма.НаименованиеСрока) Тогда
				Форма.ПолеВводаДня = 0;
				Форма.ПолеВводаМесяца = Месяц(ТекущаяДата());
				Форма.ПолеВводаГода = Год(ТекущаяДата())+2;
			Иначе
				День = Число(Лев(Форма.НаименованиеСрока,2));
				Месяц = Число(Сред(Форма.НаименованиеСрока,4,2));
				Год = Число(Прав(Форма.НаименованиеСрока,4));
				ПоследнийДеньВМесяце = День(КонецМесяца(Дата(Год,Месяц,День)));
				
				Форма.ПолеВводаДня = ?(День=ПоследнийДеньВМесяце, 0, День);
				Форма.ПолеВводаМесяца = Месяц;
				Форма.ПолеВводаГода = Год;
			КонецЕсли;
		Иначе
			ЭлементыФормы.ПолеВводаГода.Доступность = Ложь;
			ЭлементыФормы.ПолеВводаМесяца.Доступность = Ложь;
			ЭлементыФормы.ПолеВводаДня.Доступность = Ложь;
		КонецЕсли;
		
		ЗапросВведённогоКоличества = Новый Запрос;
		ЗапросВведённогоКоличества.Текст =
		"ВЫБРАТЬ
		|	ПриёмкаТовара.ХарактеристикаНоменклатуры.Наименование КАК ХарактеристикаНоменклатурыНаименование,
		|	ПриёмкаТовара.Количество КАК Количество
		|ИЗ
		|	РегистрСведений.БС_ПриемкаТовара КАК ПриёмкаТовара
		|ГДЕ
		|	ПриёмкаТовара.Документ = &Документ
		|	И ПриёмкаТовара.Номенклатура = &Номенклатура";
		ЗапросВведённогоКоличества.УстановитьПараметр("Документ", Документ);
		ЗапросВведённогоКоличества.УстановитьПараметр("Номенклатура", Номенклатура);
		Выборка = ЗапросВведённогоКоличества.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = СписокСроков.Добавить();
			НоваяСтрока.Наименование = Выборка.ХарактеристикаНоменклатурыНаименование;
			НоваяСтрока.Количество = Выборка.Количество;
		КонецЦикла;
		
		Форма.КоличествоСрока = Форма.КоличествоПоДокументу;
		ФормаВводаКоличестваИСроков_ОбновитьФорму(Форма);
	КонецПроцедуры
	
	Процедура ФормаВводаКоличестваИСроков_КнопкаЗавершитьНажатие(Форма) Экспорт
		СписокСроков = Форма.СписокСроков;
		
		Если СписокСроков.Количество() > 0 Тогда
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(1, "Да");
			СписокКнопок.Добавить(2, "Нет");	
			СписокКнопок.Добавить(3, "Отмена");	
			ТекстВопроса = "Сохранить данные ?"+Символы.ПС;
			Для Каждого СтрокаТаблицы Из СписокСроков Цикл
				ТекстВопроса = ТекстВопроса + ?(ЗначениеЗаполнено(СтрокаТаблицы.Наименование), СтрокаТаблицы.Наименование, "Без срока") + "   -   " + СтрокаТаблицы.Количество + Символы.ПС;
			КонецЦикла;
			
			Ответ = мВопрос(ТекстВопроса, СписокКнопок);
			Если Ответ = 1 Тогда
				Форма.Закрыть(СписокСроков);
			ИначеЕсли Ответ = 2 Тогда
				Форма.Закрыть(Неопределено);
			ИначеЕсли Ответ = 3 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(1, "Да");
			СписокКнопок.Добавить(2, "Нет");	
			Если мВопрос("Прервать сборку этой позиции?", СписокКнопок) = 1 Тогда
				Форма.Закрыть(Неопределено);
			КонецЕсли;
		КонецЕсли;	
	КонецПроцедуры
	
	Процедура ФормаВводаКоличестваИСроков_КнопкаДобавитьНажатие(Форма) Экспорт
		Номенклатура = Форма.Номенклатура;
		СписокСроков = Форма.СписокСроков;
		
		Если Номенклатура.ВестиУчетПоХарактеристикам Тогда 
			Если Форма.ПолеВводаДня = 0 Тогда
				ДатаСрока = КонецМесяца(Дата(Форма.ПолеВводаГода, Форма.ПолеВводаМесяца, 1));
			Иначе
				ДатаСрока = Дата(Форма.ПолеВводаГода, Форма.ПолеВводаМесяца, Форма.ПолеВводаДня);
			КонецЕсли;
			Если ДатаСрока < ТекущаяДата() Тогда
				мПредупреждение("Введите верный срок");
				Возврат;
			ИначеЕсли ДатаСрока < ДобавитьМесяц(ТекущаяДата(),10) Тогда
				Годы = Год(ДатаСрока) - Год(ТекущаяДата());
				Месяцы = Месяц(ДатаСрока) - Месяц(ТекущаяДата());
				ОстатокМесяцев = Месяцы + Годы * 12;
				МассивСтрок = ПолучитьСклоненияСтрокиПоЧислу("месяц", ОстатокМесяцев);
				ОбработаннаяСтрока = МассивСтрок[0];
				ТекстВопроса = СтрШаблон("Введённый срок заканчивается через %1", ОбработаннаяСтрока);
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(1, "Ввести заново");
				СписокКнопок.Добавить(2, "Принять этот срок");
				Если мВопрос(ТекстВопроса, СписокКнопок) = 1 Тогда
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
			
			Форма.НаименованиеСрока = Формат(ДатаСрока,"ДФ=dd.MM.yyyy");
			НовыйСрок = СписокСроков.Найти(Форма.НаименованиеСрока, "Наименование");
			Если НовыйСрок = Неопределено Тогда
				НовыйСрок = СписокСроков.Добавить();
			КонецЕсли;
			НовыйСрок.Наименование = Формат(ДатаСрока,"ДФ=dd.MM.yyyy");
			НовыйСрок.Количество = Форма.КоличествоСрока;
		Иначе
			Если СписокСроков.Количество() = 0 Тогда
				СписокСроков.Добавить();
			КонецЕсли;
			СписокСроков[0].Количество = Форма.КоличествоСрока;
		КонецЕсли;
		
		ФормаВводаКоличестваИСроков_ОбновитьФорму(Форма);
	КонецПроцедуры
	
	Процедура ФормаВводаКоличестваИСроков_ОбновитьФорму(Форма)
		ЭлементыФормы = Форма.ЭлементыФормы;
		СписокСроков = Форма.СписокСроков;
		
		Форма.КоличествоПоступило = СписокСроков.Итог("Количество");
		ЭлементыФормы.ТаблицаПроверки.Значение = СписокСроков;
		ЭлементыФормы.ТаблицаПроверки.СоздатьКолонки();
	КонецПроцедуры
	
	// Выводит на печать этикетки для товара без штрихкода на упаковке, либо с длинным штрихкодом
	// Этикетки печатаюися для каждого места
	Процедура ФормаВводаКоличестваИСроков_ЭтикеткиНажатие(Форма) Экспорт
		Номенклатура = Форма.Номенклатура;
		
		ШтрихКод = ФормаВводаКоличестваИСроков_ПолучитьТекстШКСоСроком(Форма);
		Если ШтрихКод = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Количество = 1;
		Если не ВвестиЧисло(Количество,,10,0) Тогда
			Возврат;
		КонецЕсли;
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(1, "Этаж 3. Приёмка.");
		СписокКнопок.Добавить(2, "Этаж 2");
		Ответ = мВопрос("Выберите принтер", СписокКнопок);
		Если Ответ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Ответ = 1 Тогда
			ВыбранныйПринтер = "Brother QL-810W Priemka";
		Иначе
			ВыбранныйПринтер = "Brother_QL-810W_Level2";
		КонецЕсли;
		
		Если Номенклатура.ВестиУчетПоХарактеристикам Тогда
			КороткийСрок = Прав(ШтрихКод,8);
			НаименованиеСрока = Лев(КороткийСрок, 2)+"."+Сред(КороткийСрок, 3, 2)+"."+Прав(КороткийСрок, 4);
			ХарактеристикаНоменклатуры = ПолучитьСсылкуСпрХарактеристики(Номенклатура, НаименованиеСрока);
		Иначе
			ХарактеристикаНоменклатуры = Неопределено;
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("Номенклатура", ?(ЗначениеЗаполнено(Номенклатура.Артикул), Номенклатура.Артикул+"/", "")+Номенклатура.Наименование);
		МестоХранения = ПолучитьМестоХранения(Номенклатура, ХарактеристикаНоменклатуры, СкладДокумента);
		Если МестоХранения = Неопределено Тогда 
			МестоХранения = ПолучитьМестоХранения(Номенклатура,, СкладДокумента);
		КонецЕсли;
		Если ЗначениеЗаполнено(МестоХранения) Тогда
			МестоХранения = ПолучитьПолныйПутьМестаХранения(МестоХранения); 
		КонецЕсли;
		Параметры.Вставить("Место", МестоХранения);
		
		ВсегоЭтикеток = Количество;
		Для НомерМеста = 1 По ВсегоЭтикеток Цикл
			ТабДок = Новый ТабличныйДокумент;
			Макет = ПолучитьМакет("МакетШтрихКодаСоСроком");
			Область = Макет.ПолучитьОбласть("Этикетка");
			Область.Параметры.Заполнить(Параметры);
			//Область.Рисунки.ШтрихКод.Объект.ТипКода = 4;
			//Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
			//Область.Рисунки.ШтрихКод.Линия = Линия;
			//Область.Рисунки.ШтрихКод.Объект.Сообщение = ШтрихКод;
			//Область.Рисунки.ШтрихКод.Объект.ТекстКода = ШтрихКод;
			
			КартинкаШК = СформироватьШтрихКод(,,ШтрихКод);
			РисунокШК = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			РисунокШК.Расположить(Область.Область("R3C1:R3C2"));
			РисунокШК.Картинка = КартинкаШК;
			РисунокШК.ГраницаСверху = Ложь;
			РисунокШК.ГраницаСнизу = Ложь;
			РисунокШК.ГраницаСправа = Ложь;
			РисунокШК.ГраницаСлева = Ложь;  
			
			ТабДок.Вывести(Область);
			
			ТабДок.ИмяПринтера = ВыбранныйПринтер;
			ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			ТабДок.ЧерноБелаяПечать = Истина;
			ТабДок.ПолеСверху = 3;
			ТабДок.ПолеСлева = 2;
			ТабДок.ПолеСнизу = 3;
			ТабДок.ПолеСправа = 2;
			//ТабДок.РазмерСтраницы = "Custom";//нестандартный размер в мм
			//ТабДок.ВысотаСтраницы = 28.9;
			//ТабДок.ШиринаСтраницы = 62;
			ТабДок.Напечатать(?(ПросмотрПередПечатью, РежимИспользованияДиалогаПечати.Использовать, РежимИспользованияДиалогаПечати.НеИспользовать));
		КонецЦикла;
	КонецПроцедуры
	
	Функция ФормаВводаКоличестваИСроков_ПолучитьТекстШКСоСроком(Форма)
		ШтрихКод = ФормаВводаКоличестваИСроков_ПолучитьШтрихКод(Форма);
		СрокГодности = ФормаВводаКоличестваИСроков_ПолучитьСрокГодности(Форма);
		Если ШтрихКод = Неопределено Или СрокГодности = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ШтрихКод+" "+СрокГодности;
		КонецЕсли;
	КонецФункции
	
	Функция ФормаВводаКоличестваИСроков_ПолучитьШтрихКод(Форма)
		Номенклатура = Форма.Номенклатура;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	МАКСИМУМ(ЕСТЬNULL(ЗапросШК_13символов.Штрихкод, ЗапросШК_не13символов.Штрихкод)) КАК Штрихкод
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Штрихкоды.Штрихкод КАК Штрихкод,
		|			Штрихкоды.Владелец КАК Владелец
		|		ИЗ
		|			РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ГДЕ
		|			Штрихкоды.Штрихкод ПОДОБНО ""[^_][^_][^_][^_][^_][^_][^_][^_][^_][^_][^_][^_][^_]"") КАК ЗапросШК_13символов
		|		ПО Номенклатура.Ссылка = ЗапросШК_13символов.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Штрихкоды.Штрихкод КАК Штрихкод,
		|			Штрихкоды.Владелец КАК Владелец
		|		ИЗ
		|			РегистрСведений.Штрихкоды КАК Штрихкоды
		|		ГДЕ
		|			НЕ Штрихкоды.Штрихкод ПОДОБНО ""[^_][^_][^_][^_][^_][^_][^_][^_][^_][^_][^_][^_][^_]"") КАК ЗапросШК_не13символов
		|		ПО Номенклатура.Ссылка = ЗапросШК_не13символов.Владелец
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура.Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если не ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
			// *** У этой позиции нет штрих-кода
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(0, "Создать новый");
			СписокКнопок.Добавить(1, "Есть штрих-код");
			Текст = "Если у этой номенклатуры есть штрих-код, отсканируйте его, если нет, нажмите кнопку ""Создать новый"".";
			РазбитьСтроку(Текст);
			Если мВопрос(Текст, СписокКнопок) = 0 Тогда
				ШтрихКод = ФормаВводаКоличестваИСроков_ПолучитьНовыйШтрихКод();
			Иначе
				ШтрихКод = "";
				Если ВвестиСтроку(ШтрихКод, "Отсканируйте штрих-код", 20) Тогда
					Если не ФормаВводаКоличестваИСроков_ПроверкаШтрихКода(ШтрихКод) Тогда
						ШтрихКод = ФормаВводаКоличестваИСроков_ПолучитьНовыйШтрихКод();
					КонецЕсли;
				Иначе
					ШтрихКод = ФормаВводаКоличестваИСроков_ПолучитьНовыйШтрихКод();
				КонецЕсли;			
			КонецЕсли;
			
			ФормаВводаКоличестваИСроков_ДобавитьШтрихКодНоменклатуре(Форма, ШтрихКод);
			Возврат ШтрихКод;
		Иначе
			Возврат Выборка.Штрихкод;
		КонецЕсли;
	КонецФункции
	
	Функция ФормаВводаКоличестваИСроков_ПроверкаШтрихКода(ШтрихКод)
		// *** Проверка пройдена, если Штрих-код состоит из чисел длиной 13-14 символов
		Если СтрДлина(ШтрихКод) >= 13 И СтрДлина(ШтрихКод) <= 14 Тогда
			КолСимволов = 0;
			ПроверкаПройдена = Истина;		
			Для Индекс = 1 По СтрДлина(ШтрихКод) Цикл
				ТекСимвол = Сред(ШтрихКод, Индекс, 1);
				Если ТекСимвол >= "0" И ТекСимвол <= "9" Тогда
					Продолжить;
				Иначе
					ПроверкаПройдена = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Возврат ПроверкаПройдена;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецФункции
	
	Функция ФормаВводаКоличестваИСроков_ПолучитьНовыйШтрихКод()
		Штрихкод = "2000001000011";
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Штрихкод
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
		
		ШтрихКодНайден = Истина;
		Пока ШтрихКодНайден Цикл
			Штрихкод = СтрЗаменить(Строка(Число(Штрихкод) + 1), Символы.НПП, "");
			Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
			Выборка = Запрос.Выполнить().Выбрать();
			ШтрихКодНайден = Выборка.Следующий();
		КонецЦикла;
		
		Возврат Штрихкод;
	КонецФункции
	
	Функция ФормаВводаКоличестваИСроков_ПолучитьСрокГодности(Форма)
		Номенклатура = Форма.Номенклатура;
		ЭлементыФормы = Форма.ЭлементыФормы;
		
		Если Не Номенклатура.ВестиУчетПоХарактеристикам Тогда
			Возврат "";
		КонецЕсли;
		
		ТекСтрока = ЭлементыФормы.ТаблицаПроверки.ТекущаяСтрока;
		Если ТекСтрока = Неопределено Тогда
			Текст = "Введите данные по срокам или выделите строку в таблице";
			РазбитьСтроку(Текст);
			мПредупреждение(Текст);
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Лев(ТекСтрока.Наименование,2)+Сред(ТекСтрока.Наименование,4,2)+Прав(ТекСтрока.Наименование,4);	
	КонецФункции
	
	Процедура ФормаВводаКоличестваИСроков_ДобавитьШтрихКодНоменклатуре(Форма, ШтрихКод)
		Номенклатура = Форма.Номенклатура;
		
		ИзменитьШтрихКодНоменклатуры(ШтрихКод, Номенклатура, Номенклатура.ЕдиницаХраненияОстатков);
	КонецПроцедуры
	
	Функция ФормаВводаКоличестваИСроков_ПолучитьНаименованиеПоследнегоСрока(Номенклатура)
		ЗапросПоследнейХарактеристики = Новый Запрос;
		ЗапросПоследнейХарактеристики.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗначенияСвойствОбъектов.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Объект В
		|			(ВЫБРАТЬ
		|				Характеристики.Ссылка
		|			ИЗ
		|				Справочник.ХарактеристикиНоменклатуры КАК Характеристики
		|			ГДЕ
		|				Характеристики.Владелец = &Владелец)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Значение УБЫВ";
		ЗапросПоследнейХарактеристики.УстановитьПараметр("Владелец", Номенклатура);
		Выборка = ЗапросПоследнейХарактеристики.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Формат(Выборка.Значение, "ДФ=dd.MM.yyyy");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецФункции
	
	Процедура ФормаВводаКоличестваИСроков_ПолеВводаДняПриИзменении(Форма) Экспорт
		///*** Проверка на максимальное число дней в месяце
		ПоследнийДеньМесяца = День(КонецМесяца(Дата(Форма.ПолеВводаГода,Форма.ПолеВводаМесяца,1)));
		Если Форма.ПолеВводаДня > ПоследнийДеньМесяца Тогда
			Форма.ПолеВводаДня = ПоследнийДеньМесяца;
		КонецЕсли;
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_соответствия_мест_хранения
	Процедура ФормаСоответствияМестХранения_ПриОткрытии(Форма) Экспорт
		Форма.Склад = ПолучитьСкладПользователя();
		Если не ЗначениеЗаполнено(Форма.Склад) Тогда
			Форма.Склад = ВыборСкладаПользователем();
			Если Форма.Склад = Неопределено Тогда
				Форма.Склад = СкладГурьянова;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьТаблицуМестХранения(Форма);
	КонецПроцедуры
	
	Процедура ОбновитьТаблицуМестХранения(Форма)
		
		ТабличноеПолеСоответствия = Форма.ТабличноеПолеСоответствия;
		ТабличноеПолеСоответствия.Очистить();
		Если ТабличноеПолеСоответствия.Колонки.Количество() = 0 Тогда
			ТабличноеПолеСоответствия.Колонки.Добавить("МестоХранения");
			ТабличноеПолеСоответствия.Колонки.Добавить("ПолныйПутьМестаХранения");
			ТабличноеПолеСоответствия.Колонки.Добавить("Сортировка",Новый ОписаниеТипов("Число")); 
		КонецЕсли;
		
		ЗапросМестХранения = Новый Запрос;
		ЗапросМестХранения.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МестаХранения.Ссылка КАК МестоХранения
		|ИЗ
		|	Справочник.МестаХранения КАК МестаХранения
		|ГДЕ
		|	МестаХранения.ЭтоГруппа = ЛОЖЬ
		|	И МестаХранения.Владелец = &Владелец";
		ЗапросМестХранения.УстановитьПараметр("Владелец", Форма.Склад);
		ВыборкаМестХранения = ЗапросМестХранения.Выполнить().Выбрать();
		
		Пока ВыборкаМестХранения.Следующий() Цикл
			СтрокаПоляСоответствия = ТабличноеПолеСоответствия.Добавить();
			СтрокаПоляСоответствия.МестоХранения = ВыборкаМестХранения.МестоХранения;
			СтрокаПоляСоответствия.ПолныйПутьМестаХранения = ПолучитьПолныйПутьМестаХранения(ВыборкаМестХранения.МестоХранения); 
			Отбор = Новый Структура;
			Отбор.Вставить("МестоХранения", ВыборкаМестХранения.МестоХранения);
			НайденныеСтроки = ТаблицаСоответствияМестХранения.НайтиСтроки(Отбор);
			СтрокаПоляСоответствия.Сортировка = 999;
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если Строка.Склад = Форма.Склад Тогда
					СтрокаПоляСоответствия.Сортировка = Строка.Сортировка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		//Индекс = ТаблицаСоответствияМестХранения.Количество()-1;
		//Пока Индекс >= 0 Цикл
		//	СтрокаПоляСоответствия = ТабличноеПолеСоответствия.Найти(ТаблицаСоответствияМестХранения[Индекс].МестоХранения, "МестоХранения");
		//	Если СтрокаПоляСоответствия = Неопределено Тогда
		//		ТаблицаСоответствияМестХранения.Удалить(Индекс);
		//	Иначе
		//		СтрокаПоляСоответствия.Сортировка = ТаблицаСоответствияМестХранения[Индекс].Сортировка;
		//	КонецЕсли;
		//	
		//	Индекс = Индекс - 1;
		//КонецЦикла;
		//
		
		ТабличноеПолеСоответствия.Сортировать("Сортировка, ПолныйПутьМестаХранения");
		
		Форма.ЭлементыФормы.ТабличноеПолеСоответствия.Значение = ТабличноеПолеСоответствия;
		Форма.ЭлементыФормы.ТабличноеПолеСоответствия.СоздатьКолонки();
		Форма.ЭлементыФормы.ТабличноеПолеСоответствия.Колонки.МестоХранения.Видимость = Ложь;
		Форма.ЭлементыФормы.ТабличноеПолеСоответствия.Колонки.ПолныйПутьМестаХранения.Доступность = Ложь;
		Форма.ЭлементыФормы.ТабличноеПолеСоответствия.Колонки.Сортировка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
		Форма.ЭлементыФормы.ТабличноеПолеСоответствия.Колонки.Сортировка.Ширина = 10;
	КонецПроцедуры
	
	Функция ПолучитьПолныйПутьМестаХранения(МестоХранения)
		Если Не ЗначениеЗаполнено(МестоХранения) или ТипЗнч(МестоХранения) <> Тип("СправочникСсылка.МестаХранения") Тогда
			Возврат "не заполнено";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МестоХранения.Родитель) Тогда
			Возврат ПолучитьПолныйПутьМестаХранения(МестоХранения.Родитель)+"/"+МестоХранения.Наименование;
		Иначе
			Возврат МестоХранения.Наименование;
		КонецЕсли;
	КонецФункции
	
	Процедура ФормаСоответствияМестХранения_ПриОкончанииРедактирования(Форма) Экспорт
		ТабличноеПолеСоответствия = Форма.ТабличноеПолеСоответствия;
		ТабличноеПолеСоответствия.Сортировать("Сортировка, ПолныйПутьМестаХранения");
		
		Если Форма.ЭлементыФормы.ТабличноеПолеСоответствия.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("МестоХранения", Форма.ЭлементыФормы.ТабличноеПолеСоответствия.ТекущаяСтрока.МестоХранения);
		СтрокиТаблицыСоответствия = ТаблицаСоответствияМестХранения.НайтиСтроки(Отбор);
		Для Каждого Строка Из СтрокиТаблицыСоответствия Цикл
			Если Строка.Склад = Форма.Склад Тогда
				Строка.Сортировка = Форма.ЭлементыФормы.ТабличноеПолеСоответствия.ТекущаяСтрока.Сортировка;
				СохранениеТаблицыСоответствияМестХранения();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока = ТаблицаСоответствияМестХранения.Добавить();
		НоваяСтрока.Склад = Форма.Склад;
		НоваяСтрока.МестоХранения = Форма.ЭлементыФормы.ТабличноеПолеСоответствия.ТекущаяСтрока.МестоХранения;
		НоваяСтрока.Сортировка = Форма.ЭлементыФормы.ТабличноеПолеСоответствия.ТекущаяСтрока.Сортировка;
		СохранениеТаблицыСоответствияМестХранения();
	КонецПроцедуры
	
	Процедура ФормаСоответствияМестХранения_ПриЗакрытии(Форма) Экспорт
		//Для Каждого СтрокаТабличногоПоля Из Форма.ТабличноеПолеСоответствия Цикл           
		//	Отбор = Новый Структура;
		//	Отбор.Вставить("МестоХранения", СтрокаТабличногоПоля.МестоХранения);
		//	ПрошлыеСтрокиСоответствия = ТаблицаСоответствияМестХранения.НайтиСтроки(Отбор);
		//	МестоНайдено = Ложь;
		//	Для Каждого НайденнаяСтрока Из ПрошлыеСтрокиСоответствия Цикл
		//		Если НайденнаяСтрока.Склад = Форма.Склад Тогда
		//			МестоНайдено = Истина;
		//			Прервать;
		//		КонецЕсли;
		//	КонецЦикла;
		//	Если МестоНайдено Тогда
		//		НайденнаяСтрока.Сортировка = СтрокаТабличногоПоля.Сортировка;
		//	Иначе
		//		НайденнаяСтрока = ТаблицаСоответствияМестХранения.Добавить();
		//		НайденнаяСтрока.Склад = Форма.Склад;
		//		НайденнаяСтрока.МестоХранения = СтрокаТабличногоПоля.МестоХранения;
		//		НайденнаяСтрока.Сортировка = СтрокаТабличногоПоля.Сортировка;
		//	КонецЕсли;
		//КонецЦикла;
		//
		//СохранениеТаблицыСоответствияМестХранения();
	КонецПроцедуры
	
	Процедура ФормаСоответствияМестХранения_ПечатьШК(Форма) Экспорт
		МестоХранения = Форма.ЭлементыФормы.ТабличноеПолеСоответствия.ТекущиеДанные.МестоХранения;
		ЗапросШКМеста = Новый Запрос;
		ЗапросШКМеста.Текст =
		"ВЫБРАТЬ
		|	Штрихкоды.Штрихкод КАК Штрихкод
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Владелец = &Владелец";
		ЗапросШКМеста.УстановитьПараметр("Владелец", МестоХранения);
		Выборка = ЗапросШКМеста.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ШтрихКод = Выборка.Штрихкод;
		Иначе
			///*** Если штрихкода нет, сгенерировать новый
			ТипEAN13 = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
			ПрефиксШтучногоТовара = СокрЛП(Константы.ПрефиксШтучногоТовара.Получить());
			ПрефиксВнутреннегоШтрихкода = Константы.ПрефиксВнутреннегоШтрихкода.Получить();
			ШтрихКод = РаботаСТорговымОборудованием.СформироватьШтрихКод(ПрефиксШтучногоТовара, ПрефиксВнутреннегоШтрихкода);
			
			МЗ = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			МЗ.Владелец = МестоХранения;
			МЗ.ТипШтрихкода = ТипEAN13;
			МЗ.Штрихкод = ШтрихКод;
			МЗ.Записать(ИСТИНА);		
		КонецЕсли;
		
		ТабДок = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("МакетШтрихКодаМестаХранения");
		Область = Макет.ПолучитьОбласть("Этикетка");
		Область.Параметры.МестоХранения = ПолучитьПолныйПутьМестаХранения(МестоХранения);
		//Область.Рисунки.ШтрихКод.Объект.ТипКода = 1;
		//Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
		//Область.Рисунки.ШтрихКод.Линия = Линия;
		//Область.Рисунки.ШтрихКод.Объект.Сообщение = ШтрихКод;
		//Область.Рисунки.ШтрихКод.Объект.ТекстКода = ШтрихКод;
		
		КартинкаШК = СформироватьШтрихКод(,,ШтрихКод);
		РисунокШК = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		РисунокШК.Расположить(Область.Область("R2C1:R3C2"));
		РисунокШК.Картинка = КартинкаШК;
		РисунокШК.ГраницаСверху = Ложь;
		РисунокШК.ГраницаСнизу = Ложь;
		РисунокШК.ГраницаСправа = Ложь;
		РисунокШК.ГраницаСлева = Ложь;
		
		ТабДок.Вывести(Область);
		
		ТабДок.ИмяПринтера = "Brother QL-720NW A-1";
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.ЧерноБелаяПечать = Истина;
		ТабДок.ПолеСверху = 1;
		ТабДок.ПолеСлева = 3;
		ТабДок.ПолеСнизу = 1;
		ТабДок.ПолеСправа = 1;
		ТабДок.Напечатать();		
	КонецПроцедуры
	
	Процедура ФормаСоответствияМестХранения_КнопкаСкладНажатие(Форма) Экспорт
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(1, "Москва (Гурьянова)");
		СписокКнопок.Добавить(2, "Москва (Новорязанка)");
		СписокКнопок.Добавить(3, "Москва (Чертаново)");
		СписокКнопок.Добавить(4, "Калининград"); 
		
		Ответ = мВопрос("Выберите склад", СписокКнопок);
		Если Ответ = Неопределено Тогда
			Форма.Склад = СкладГурьянова;
		Иначе 
			Если Ответ = 1 Тогда
				Форма.Склад = СкладГурьянова;
			ИначеЕсли Ответ = 2 Тогда
				Форма.Склад = СкладНоворязанка;
			ИначеЕсли Ответ = 3 Тогда
				Форма.Склад = СкладЧертаново;
			Иначе
				Форма.Склад = Справочники.Склады.НайтиПоКоду("000000028");
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьТаблицуМестХранения(Форма);
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_Привязки_мест_хранения
	Процедура ФормаПривязкиМестХраненияПриОткрытии(Форма) Экспорт
		СкладПользователя = ПолучитьСкладПользователя();
		Если СкладПользователя = Неопределено Тогда
			СкладПользователя = ВыборСкладаПользователем();
			Если СкладПользователя = Неопределено Тогда
				СкладПользователя = СкладГурьянова;
			КонецЕсли;
		КонецЕсли;
		
		Панель = Форма.Панель;
		ЭлементыФормы = Форма.ЭлементыФормы;
		
		Панель.ТекущаяСтраница = Панель.Страницы.СтраницаНоменклатуры;
		ЭлементыФормы.ПолеВводаНовогоМестаХранения.Доступность = Ложь;
	КонецПроцедуры
	
	Процедура ФормаПривязкиМестХраненияПриИзменении(Форма) Экспорт
		Панель = Форма.Панель;
		ЭлементыФормы = Форма.ЭлементыФормы;
		ШтрихКод = Форма.ШК;
		Если не ЗначениеЗаполнено(ШтрихКод) Тогда Возврат КонецЕсли;
		
		///*** Определение типа штрихкода - Принадлежит номенклатуре или месту хранения
		ЗапросВладельцаШК = Новый Запрос;
		ЗапросВладельцаШК.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
		ЗапросВладельцаШК.УстановитьПараметр("Штрихкод", ШтрихКод);
		Выборка = ЗапросВладельцаШК.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Владелец = Выборка.Владелец;
		Иначе
			Владелец = Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			Панель.ТекущаяСтраница = Панель.Страницы.СтраницаНоменклатуры;
			ЭлементыФормы.ПолеВводаНовогоМестаХранения.Доступность = Истина;
			ЭлементыФормы.НадписьНоменклатура.Заголовок = ?(ЗначениеЗаполнено(Владелец.Артикул), Владелец.Артикул + "/", "")+Владелец.Наименование;
			ЗапросМестаХранения = Новый Запрос;
			ЗапросМестаХранения.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
			|ИЗ
			|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
			|ГДЕ
			|	МестаХраненияНоменклатуры.Номенклатура = &Номенклатура
			|	И МестаХраненияНоменклатуры.Склад = &Склад";
			ЗапросМестаХранения.УстановитьПараметр("Номенклатура", Владелец);
			ЗапросМестаХранения.УстановитьПараметр("Склад", Форма.СкладПользователя);
			Выборка = ЗапросМестаХранения.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				МестоХранения = ПолучитьПолныйПутьМестаХранения(Выборка.МестоХранения);
			Иначе
				МестоХранения = "";
			КонецЕсли;
			ЭлементыФормы.НадписьМестоХранения.Заголовок = МестоХранения;
			Форма.Номенклатура = Владелец;
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.МестаХранения") Тогда
			Панель.ТекущаяСтраница = Панель.Страницы.СтраницаМестаХранения;
			ФормаПривязкиОбновитьСписокПривязаннойНоменклатуры(Форма, Владелец);
		КонецЕсли;
	КонецПроцедуры
	
	Процедура ФормаПривязкиОбновитьСписокПривязаннойНоменклатуры(Форма, МестоХранения)
		ЭлементыФормы = Форма.ЭлементыФормы;
		
		ЗапросНоменклатурыПоМесту = Новый Запрос;
		ЗапросНоменклатурыПоМесту.Текст =
		"ВЫБРАТЬ
		|	МестаХраненияНоменклатуры.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА МестаХраненияНоменклатуры.Номенклатура.Артикул = """"
		|			ТОГДА МестаХраненияНоменклатуры.Номенклатура.Наименование
		|		ИНАЧЕ МестаХраненияНоменклатуры.Номенклатура.Артикул + ""/"" + МестаХраненияНоменклатуры.Номенклатура.Наименование
		|	КОНЕЦ КАК Наименование
		|ИЗ
		|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
		|ГДЕ
		|	МестаХраненияНоменклатуры.МестоХранения = &МестоХранения
		|	И МестаХраненияНоменклатуры.Склад = &Склад
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|АВТОУПОРЯДОЧИВАНИЕ";
		ЗапросНоменклатурыПоМесту.УстановитьПараметр("МестоХранения", МестоХранения);
		ЗапросНоменклатурыПоМесту.УстановитьПараметр("Склад", Форма.СкладПользователя);
		Форма.НоменклатураМестаХранения = ЗапросНоменклатурыПоМесту.Выполнить().Выгрузить();
		ЭлементыФормы.ПолеНоменклатурыМестаХранения.СоздатьКолонки();
		ЭлементыФормы.ПолеНоменклатурыМестаХранения.Колонки.Номенклатура.Видимость = Ложь;
		ЭлементыФормы.ПолеНоменклатурыМестаХранения.ТолькоПросмотр = Истина;
	КонецПроцедуры
	
	Процедура ФормаПривязкиМестХраненияВводНовогоМеста(Форма) Экспорт
		ШтрихКод = Форма.ПолеВводаНовогоМестаХранения;
		
		ЗапросВладельцаШК = Новый Запрос;
		ЗапросВладельцаШК.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
		ЗапросВладельцаШК.УстановитьПараметр("Штрихкод", ШтрихКод);
		Выборка = ЗапросВладельцаШК.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МестоХранения = Выборка.Владелец;
		Иначе
			МестоХранения = Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(МестоХранения) = Тип("СправочникСсылка.МестаХранения") Тогда
			ИзменитьМестоХраненияНоменклатуры(Форма.Номенклатура, МестоХранения,, Форма.СкладПользователя);
		КонецЕсли;
		Форма.ПолеВводаНовогоМестаХранения = "";
		ФормаПривязкиМестХраненияПриИзменении(Форма);
		//НажатьТаб(1);
	КонецПроцедуры
	
	Процедура ФормаПривязкиМестХраненияКнопкаВыборСкладаНажатие(Форма) Экспорт
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(1, "Москва (Гурьянова)");
		СписокКнопок.Добавить(2, "Москва (Новорязанка)");
		СписокКнопок.Добавить(3, "Москва (Чертаново)");
		СписокКнопок.Добавить(4, "Калининград"); 
		
		Ответ = мВопрос("Выберите склад", СписокКнопок);
		Если Ответ = Неопределено Тогда
			Форма.СкладПользователя = СкладГурьянова;
		Иначе 
			Если Ответ = 1 Тогда
				Форма.Склад = СкладГурьянова;
			ИначеЕсли Ответ = 2 Тогда
				Форма.Склад = СкладНоворязанка;
			ИначеЕсли Ответ = 3 Тогда
				Форма.Склад = СкладЧертаново;
			Иначе
				Форма.СкладПользователя = Справочники.Склады.НайтиПоКоду("000000028");
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_привязки_номенклатуры_к_месту_хранения
	Процедура ФормаПривязкиНоменклатурыКМестуХраненияПриОткрытии(Форма) Экспорт
		ПолеВводаШКНоменклатуры = Форма.ЭлементыФормы.ПолеВводаШКНоменклатуры;
		МестоХранения = Форма.МестоХранения;
		
		ПолеВводаШКНоменклатуры.Доступность = ЗначениеЗаполнено(МестоХранения);
	КонецПроцедуры
	
	Процедура ФормаПривязкиНоменклатурыКМестуХраненияПриИзмененииШКМестаХранения(Форма) Экспорт
		ШКМестаХранения = Форма.ШКМестаХранения;
		ПолеВводаШКНоменклатуры = Форма.ЭлементыФормы.ПолеВводаШКНоменклатуры;
		ПолеВводаШКМестаХранения = Форма.ЭлементыФормы.ПолеВводаШКМестаХранения;
		
		ЗапросМестаХранения = Новый Запрос;
		ЗапросМестаХранения.Текст =
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
		ЗапросМестаХранения.УстановитьПараметр("Штрихкод", ШКМестаХранения);
		Выборка = ЗапросМестаХранения.Выполнить().Выбрать();
		МестоВыбрано = Ложь;
		Если Выборка.Следующий() Тогда
			Если ТипЗнч(Выборка.Владелец) = Тип("СправочникСсылка.МестаХранения") Тогда
				Форма.МестоХранения = Выборка.Владелец;
				Форма.НадписьМестоХранения = ПолучитьПолныйПутьМестаХранения(Выборка.Владелец);
				МестоВыбрано = Истина;
			КонецЕсли;
		Иначе
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(1, "Да");
			СписокКнопок.Добавить(2, "Нет");
			Если мВопрос("Штрих-код не зарегестрирован"+Символы.ПС+"Это место хранения?", СписокКнопок) = 1 Тогда
				СписокМестХранения = Новый СписокЗначений;
				ЗапросМестХранения = Новый Запрос;
				ЗапросМестХранения.Текст =
				"ВЫБРАТЬ
				|	МестаХранения.Родитель,
				|	МестаХранения.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.МестаХранения КАК МестаХранения
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			Штрихкоды.Владелец КАК Владелец
				|		ИЗ
				|			РегистрСведений.Штрихкоды КАК Штрихкоды) КАК ЗапросШтрихКода
				|		ПО МестаХранения.Ссылка = ЗапросШтрихКода.Владелец
				|ГДЕ
				|	МестаХранения.ЭтоГруппа = ЛОЖЬ
				|	И МестаХранения.ПометкаУдаления = ЛОЖЬ
				|	И ЗапросШтрихКода.Владелец ЕСТЬ NULL
				|
				|СГРУППИРОВАТЬ ПО
				|	МестаХранения.Ссылка,
				|	МестаХранения.Родитель
				|
				|УПОРЯДОЧИТЬ ПО
				|	Ссылка ИЕРАРХИЯ
				|АВТОУПОРЯДОЧИВАНИЕ";
				ВыборкаМест = ЗапросМестХранения.Выполнить().Выбрать();
				Пока ВыборкаМест.Следующий() Цикл
					НаименованиеМеста = Строка(ВыборкаМест.Родитель)+"/"+ВыборкаМест.Ссылка;
					СписокМестХранения.Добавить(ВыборкаМест.Ссылка, НаименованиеМеста);
				КонецЦикла;
				ВыбраннйЭлемент = СписокМестХранения.ВыбратьЭлемент();
				Если ВыбраннйЭлемент <> Неопределено Тогда
					МестоВыбрано = Истина;
					МЗ = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
					МЗ.Владелец = ВыбраннйЭлемент.Значение;
					МЗ.ТипШтрихкода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;;
					МЗ.Штрихкод = ШКМестаХранения;
					МЗ.Записать(ИСТИНА);		
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Если МестоВыбрано Тогда
			ПолеВводаШКНоменклатуры.Доступность = Истина;
			Форма.ТекущийЭлемент = ПолеВводаШКНоменклатуры;
		Иначе
			ПолеВводаШКНоменклатуры.Доступность = Ложь;
			Форма.ТекущийЭлемент = ПолеВводаШКМестаХранения;
		КонецЕсли;
	КонецПроцедуры
	
	Процедура ФормаПривязкиНоменклатурыКМестуХраненияПриИзмененииШКНоменклатуры(Форма) Экспорт
		ПолеВводаШКНоменклатуры = Форма.ЭлементыФормы.ПолеВводаШКНоменклатуры;
		ШКНоменклатуры = Форма.ШКНоменклатуры;
		МестоХранения = Форма.МестоХранения;
		
		СкладПользователя = ПолучитьСкладПользователя();
		Если СкладПользователя = Неопределено Тогда
			СкладПользователя = ВыборСкладаПользователем();
			Если СкладПользователя = Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ЗапросНоменклатуры = Новый Запрос;
		ЗапросНоменклатуры.Текст =
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
		ЗапросНоменклатуры.УстановитьПараметр("Штрихкод", ШКНоменклатуры);
		Выборка = ЗапросНоменклатуры.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ТипЗнч(Выборка.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				спрНоменклатураСсылка = Выборка.Владелец;
				Форма.НадписьНоменклатура = ?(ЗначениеЗаполнено(спрНоменклатураСсылка.Артикул), спрНоменклатураСсылка.Артикул+"/", "")+спрНоменклатураСсылка.Наименование;
				
				ЗапросМестХранения = Новый Запрос;
				ЗапросМестХранения.Текст =
				"ВЫБРАТЬ
				|	МестаХраненияНоменклатуры.Номенклатура КАК Номенклатура,
				|	МестаХраненияНоменклатуры.Склад КАК Склад,
				|	МестаХраненияНоменклатуры.Приоритет КАК Приоритет,
				|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения
				|ИЗ
				|	РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
				|ГДЕ
				|	МестаХраненияНоменклатуры.Номенклатура = &Номенклатура
				|	И МестаХраненияНоменклатуры.Склад = &Склад";
				ЗапросМестХранения.УстановитьПараметр("Номенклатура", Выборка.Владелец);
				ЗапросМестХранения.УстановитьПараметр("Склад", СкладПользователя);
				Выборка = ЗапросМестХранения.Выполнить().Выбрать();
				Если Выборка.Количество() > 0 Тогда
					Пока Выборка.Следующий() Цикл
						МЗ = РегистрыСведений.МестаХраненияНоменклатуры.СоздатьМенеджерЗаписи();
						МЗ.Номенклатура = Выборка.Номенклатура;
						МЗ.Склад = Выборка.Склад;
						МЗ.Приоритет = Выборка.Приоритет;
						МЗ.Прочитать();
						Если МЗ.Выбран() Тогда
							МЗ.Удалить();
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				МЗ = РегистрыСведений.МестаХраненияНоменклатуры.СоздатьМенеджерЗаписи();
				МЗ.Номенклатура = спрНоменклатураСсылка;
				МЗ.Склад = СкладПользователя;
				МЗ.Приоритет = 0;
				МЗ.МестоХранения = МестоХранения;
				МЗ.Записать();
				
				Форма.ШКНоменклатуры = "";
				Форма.ТекущийЭлемент = ПолеВводаШКНоменклатуры;
				//НажатьТаб(2);
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_сканирования_стола
	Процедура ФормаСканированияСтола_КнопкаОтменаНажатие(Форма) Экспорт
		Форма.Закрыть(Неопределено);
	КонецПроцедуры
	
	Процедура ФормаСканированияСтола_ПолеВводаШКСтолаПриИзменении(Форма) Экспорт
		ШтрихКод = СокрЛП(Форма.ШтрихКод);
		Если не ЗначениеЗаполнено(ШтрихКод) Тогда Возврат КонецЕсли;
		Стол = Неопределено;
		Пока Стол = Неопределено Цикл
			ЗапросВладельцаШК = Новый Запрос;
			ЗапросВладельцаШК.Текст =
			"ВЫБРАТЬ
			|	Штрихкоды.Владелец КАК Владелец
			|ИЗ
			|	РегистрСведений.Штрихкоды КАК Штрихкоды
			|ГДЕ
			|	Штрихкоды.Штрихкод = &Штрихкод";
			ЗапросВладельцаШК.УстановитьПараметр("Штрихкод", ШтрихКод);
			Выборка = ЗапросВладельцаШК.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если ТипЗнч(Выборка.Владелец) = Тип("СправочникСсылка.МестаХранения") Тогда
					Стол = Выборка.Владелец;
				КонецЕсли;
			КонецЕсли;
			
			Если Стол = Неопределено Тогда   
				ТекстВопроса = "Отказаться от выбора стола?";
				СписокКнопок = Новый СписокЗначений;
				СписокКнопок.Добавить(1, "Да");
				СписокКнопок.Добавить(2, "Нет");
				Форма.ШтрихКод = "";
				Если мВопрос(ТекстВопроса, СписокКнопок) = 1 Тогда
					Стол = "Отказ от выбора";
				Иначе   
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Форма.Закрыть(?(Стол = "Отказ от выбора", Неопределено, Стол));
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_выбора_путевого_листа
	Процедура ФормаВыбораПутевогоЛистаПриОткрытии(Форма) Экспорт
		СписокПутевыхЛистов = ПолучитьСписокПутевыхЛистов();
		Форма.ПолеСпискаПутевыхЛистов = СписокПутевыхЛистов;
	КонецПроцедуры
	
	Функция ПолучитьСписокПутевыхЛистов()
		ЗапросПутевыхЛистов = Новый Запрос;
		ЗапросПутевыхЛистов.Текст =
		"ВЫБРАТЬ
		|	ПутевыеЛисты.Ссылка КАК Ссылка,
		|	ПутевыеЛисты.Код КАК Код,
		|	ПутевыеЛисты.Дата КАК Дата,
		|	ПутевыеЛисты.Водитель КАК Водитель,
		|	ПутевыеЛисты.РегионДоставки КАК РегионДоставки
		|ИЗ
		|	Справочник.ПутевыеЛисты КАК ПутевыеЛисты
		|ГДЕ
		|	ПутевыеЛисты.Дата >= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПутевыеЛисты.Дата УБЫВ";
		ЗапросПутевыхЛистов.УстановитьПараметр("Дата", ДобавитьМесяц(ТекущаяДата(),-1));
		СписокПутевыхЛистов = Новый СписокЗначений;
		ВыборкаПутевыхЛистов = ЗапросПутевыхЛистов.Выполнить().Выбрать();
		Пока ВыборкаПутевыхЛистов.Следующий() Цикл
			СписокПутевыхЛистов.Добавить(ВыборкаПутевыхЛистов.Ссылка, 
			ПолучитьНомерДляПечати(ВыборкаПутевыхЛистов.Код)+" от "+Формат(ВыборкаПутевыхЛистов.Дата,"ДФ=dd.MM.yyyy")+" в "+?(ЗначениеЗаполнено(ВыборкаПутевыхЛистов.РегионДоставки),ВыборкаПутевыхЛистов.РегионДоставки,"не заполнено"));
		КонецЦикла;
		Возврат СписокПутевыхЛистов;
	КонецФункции
	
	Функция ПолучитьНомерДляПечати(НомерИзБазы)
		ЭтоПревью = Истина;
		НомерДляПечати = "";
		Для НомСим = 1 По СтрДлина(НомерИзБазы) Цикл
			Если Сред(НомерИзБазы, НомСим, 1) <> "0" Тогда
				ЭтоПревью = Ложь;
			КонецЕсли;
			Если не ЭтоПревью Тогда
				НомерДляПечати = НомерДляПечати + Сред(НомерИзБазы, НомСим);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат НомерДляПечати;
	КонецФункции
	
	Процедура ФормаВыбораПутевогоЛистаКнопкаОтменаНажатие(Форма) Экспорт
		Форма.Закрыть(1);
	КонецПроцедуры
	
	Процедура ФормаВыбораПутевогоЛистаКнопкаВыбратьНажатие(Форма) Экспорт
		Форма.Закрыть(Форма.ЭлементыФормы.ПолеСпискаПутевыхЛистов.ТекущаяСтрока.Значение);
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_упаковки_товара
	Процедура ФормаУпаковкиТовара_КнопкаЭтикеткиНажатие(Форма) Экспорт
		ФормаПечатиЭтикеток_Наименование = ?(ТипЭкрана = 2, "ФормаПечатиЭтикеток_480х800", ?(ТипЭкрана = 3, "ФормаПечатиЭтикеток_1280х768", "ФормаПечатиЭтикеток"));
		ФормаПечатиЭтикеток = ПолучитьФорму(ФормаПечатиЭтикеток_Наименование);
		ФормаПечатиЭтикеток.ДокументЗаказ = Документ;
		СоставУпаковок = ФормаПечатиЭтикеток.ОткрытьМодально();
		Если ТипЗнч(СоставУпаковок) = Тип("Структура") Тогда
			Форма.ВсегоУпаковок = СоставУпаковок["ВсегоУпаковок"];
			Форма.ЕстьХолод = СоставУпаковок["ЕстьХолод"];
			Форма.Закрыть(СоставУпаковок);
		КонецЕсли;
	КонецПроцедуры
	
	Процедура ФормаУпаковкиТовара_КнопкаОтменаНажатие(Форма) Экспорт
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Да");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Нет");
		Если мВопрос("Отменить упаковку?", СписокКнопок) = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть(1);
		КонецЕсли;
	КонецПроцедуры
	#КонецОбласти
	
	#Область Проверки_паллета
	Процедура ФормаПроверкиПаллета_КнопкаПроверенНажатие(Форма) Экспорт
		Форма.Закрыть(0);
	КонецПроцедуры
	
	Процедура ФормаПроверкиПаллета_КнопкаОтменаНажатие(Форма) Экспорт
		Форма.Закрыть(1);
	КонецПроцедуры
	
	Процедура ФормаПроверкиПаллета_ПолеВводаШКЗаказаПриИзменении(Форма) Экспорт
		Если не ЗначениеЗаполнено(Форма.ПолеВводаШКЗаказа) Тогда Возврат КонецЕсли;
		ЧастьШК = Лев(Форма.ПолеВводаШКЗаказа, 12);                        	
		СтрокаЗаказа = Форма.ЗаказыПутевогоЛиста.Найти(ЧастьШК, "ЧастьШК");
		Если СтрокаЗаказа = Неопределено Тогда
			мПредупреждение("Этот заказ не из этого паллета");
		Иначе
			ФормаПроверкиКоличестваУпаковок_Название = ?(ТипЭкрана = 3, "ФормаПроверкиКоличестваУпаковок_1280х768", "ФормаПроверкиКоличестваУпаковок");
			ФормаПроверкиКоличестваУпаковок = ПолучитьФорму(ФормаПроверкиКоличестваУпаковок_Название);
			ФормаПроверкиКоличестваУпаковок.НадписьНаименованиеЗаказа = СтрокаЗаказа.Заказ;
			ФормаПроверкиКоличестваУпаковок.НадписьКоличестваУпаковок = "Этот заказ состоит из "+СтрокаСЧислом(";%1 упаковки;%1 упаковок;%1 упаковок;%1 упаковок;",СтрокаЗаказа.Упаковок,ВидЧисловогоЗначения.Количественное,"ЧН=");
			ФормаПроверкиКоличестваУпаковок.НадписьХолод = ?(СтрокаЗаказа.Холод, "В том числе холод", "Без холода");
			Результат = ФормаПроверкиКоличестваУпаковок.ОткрытьМодально();
			Если Результат = 0 Тогда
				СтрокаЗаказа.Проверен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры
	
	Процедура ФормаПроверкиПаллета_ПриОткрытии(Форма) Экспорт
		Форма.НадписьДокумент = "Паллет №"+ПолучитьКороткийНомерЗаказа(Документ.Код)+" от "+Формат(Документ.Дата,"ДФ=dd.MM.yyyy");
		ОбновитьИнформационнуюНадпись(Форма);
	КонецПроцедуры
	
	Процедура ОбновитьИнформационнуюНадпись(Форма)
		ВсегоЗаказов = Форма.ЗаказыПутевогоЛиста.Количество();
		ВсегоПроверено = 0;
		Для Каждого СтрокаЗаказа Из Форма.ЗаказыПутевогоЛиста Цикл
			Если СтрокаЗаказа.Проверен Тогда
				ВсегоПроверено = ВсегоПроверено + 1;
			КонецЕсли;
		КонецЦикла;
		Форма.ИнформационнаяНадпись = "Заказов - "+ВсегоЗаказов+" / Проверено - "+ВсегоПроверено;
	КонецПроцедуры
	
	Процедура ФормаПроверкиПаллета_ПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки) Экспорт
		ОформлениеСтроки.Ячейки.Холод.ОтображатьФлажок = Истина;
		ОформлениеСтроки.ЦветТекста = ?(ДанныеСтроки.Проверен, WebЦвета.Зеленый, WebЦвета.Черный);
	КонецПроцедуры
	
	Процедура ФормаПроверкиПаллета_ПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
		Если ОтменаРедактирования или НоваяСтрока Тогда
			Возврат;
		КонецЕсли;
		Заказ = Элемент.ТекущаяСтрока.Ссылка;
		ВсегоУпаковок = Элемент.ТекущаяСтрока.Упаковок;
		ЕстьХолод = Элемент.ТекущаяСтрока.Холод;
		
		НовыеЗначения = Новый Структура;
		НовыеЗначения.Вставить("ВсегоУпаковок", ВсегоУпаковок);
		НовыеЗначения.Вставить("ЕстьХолод", ЕстьХолод);
		ИзменитьЗаписьСтатусаДокумента(Заказ, Перечисления.БС_СтатусыДокументов.Упакован, НовыеЗначения);
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_проверки_количества_упаковок
	Процедура ФормаПроверкиКоличестваУпаковок_КнопкаВерноНажатие(Форма) Экспорт
		Форма.Закрыть(0);
	КонецПроцедуры
	
	Процедура ФормаПроверкиКоличестваУпаковок_КнопкаНеВерноНажатие(Форма) Экспорт
		Форма.Закрыть(1);
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_назначения_мест
	Процедура ФормаНазначенияМест_ПолеВводаШКПриИзменении(Форма) Экспорт
		Если не ЗначениеЗаполнено(Форма.ШтрихКод) Тогда Возврат КонецЕсли;
		ШтрихКод = Форма.ШтрихКод;
		ЗапросВладельца = Новый Запрос;
		ЗапросВладельца.Текст =
		"ВЫБРАТЬ
		|	Штрихкоды.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод = &Штрихкод";
		ЗапросВладельца.УстановитьПараметр("Штрихкод", ШтрихКод);
		ВыборкаВладельца = ЗапросВладельца.Выполнить().Выбрать();
		Если ВыборкаВладельца.Следующий() Тогда
			Владелец = ВыборкаВладельца.Владелец;
			Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
				Для Каждого СтрокаМеста Из Форма.ЭлементыФормы.ТабличноеПолеМест.Значение Цикл
					Если СтрокаМеста.Номенклатура = Владелец Тогда
						Форма.ЭлементыФормы.ТабличноеПолеМест.ТекущаяСтрока = СтрокаМеста;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.МестаХранения") Тогда
				ТекущаяСтрока = Форма.ЭлементыФормы.ТабличноеПолеМест.ТекущаяСтрока;
				ТекущаяНоменклатура = ТекущаяСтрока.Номенклатура;
				ИзменитьМестоХраненияНоменклатуры(ТекущаяНоменклатура, Владелец);
				ТекущаяСтрока.Место = Владелец;
				ТекущаяСтрока.ПредставлениеМеста = ПолучитьПолныйПутьМестаХранения(Владелец);
			КонецЕсли;
		КонецЕсли;
		
		Форма.ШтрихКод = "";
	КонецПроцедуры
	
	Процедура ФормаНазначенияМест_КнопкаЗавершитьНажатие(Форма) Экспорт
		Форма.Закрыть(0);
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_установки_разрешений_на_проверку
	Процедура ФормаУстановкиРазрешенийНаПроверку_ПриОткрытии(Форма) Экспорт
		Если Форма.ОткрыватьКакРазрешениеНаПроверку Тогда
			ЧтениеТаблицыРазрешенийНаПроверку(); 
		Иначе 
			Форма.ЭлементыФормы.ТаблицаРазрешенийНаПроверку.Данные = "ТаблицаРазрешенийСборкиДТ"; 
			Форма.ЭлементыФормы.ТаблицаРазрешенийНаПроверку.СоздатьКолонки();
			ЧтениеТаблицыРазрешенийНаСборкуДТ();
		КонецЕсли;
		
		ЭлементФормыТаблица = Форма.ЭлементыФормы.ТаблицаРазрешенийНаПроверку;
		
		///*** Получить список текущих сборщиков
		
		ЗапросСборщиков = Новый Запрос;
		ЗапросСборщиков.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка,
		|	Пользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Родитель = &Родитель";
		ЗапросСборщиков.УстановитьПараметр("Родитель", Справочники.Пользователи.НайтиПоКоду("Склад"));
		СписокТекущикСборщиков = Новый СписокЗначений;
		Выборка = ЗапросСборщиков.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Строка(Выборка.ИдентификаторПользователяИБ) = "00000000-0000-0000-0000-000000000000" Тогда
				СписокТекущикСборщиков.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		///*** Проверить, что все текущие пользователи из склада есть в таблице и Отобрать только по тем, кто есть в группе склад
		
		ЭлементФормыТаблица.ОтборСтрок.Сборщик.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементФормыТаблица.ОтборСтрок.Сборщик.Использование = ИСТИНА;
		Для Каждого ЭлементСписка Из СписокТекущикСборщиков Цикл
			Если Форма.ОткрыватьКакРазрешениеНаПроверку Тогда
				СтрокаТаблицы = ТаблицаРазрешенийНаПроверку.Найти(ЭлементСписка.Значение, "Сборщик");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ТаблицаРазрешенийНаПроверку.Добавить();
					СтрокаТаблицы.Сборщик = ЭлементСписка.Значение;
					СтрокаТаблицы.ЗапретНаПроверку = ЛОЖЬ;
				КонецЕсли;                                                                       
			Иначе
				СтрокаТаблицы = ТаблицаРазрешенийСборкиДТ.Найти(ЭлементСписка.Значение, "Сборщик");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ТаблицаРазрешенийСборкиДТ.Добавить();
					СтрокаТаблицы.Сборщик = ЭлементСписка.Значение;
					СтрокаТаблицы.Разрешено = ЛОЖЬ;
				КонецЕсли;                                                                       
			КонецЕсли;
			ЭлементФормыТаблица.ОтборСтрок.Сборщик.Значение.Добавить(ЭлементСписка.Значение);
		КонецЦикла;
		
	КонецПроцедуры 
	
	Процедура ФормаУстановкиРазрешенийНаПроверку_ПриЗакрытии(Форма) Экспорт 
		Если Форма.ОткрыватьКакРазрешениеНаПроверку Тогда
			СохранениеТаблицыРазрешенийНаПроверку();
		Иначе
			СохранениеТаблицыРазрешенийНаСборкуДТ();
		КонецЕсли;
		Форма.Закрыть();
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_упаковки_паллетов_маркета
	Процедура ФормаУпаковкиПаллетовМаркета_ПриОткрытии(Форма) Экспорт
		Форма.ЭлементыФормы.КнопкаДатаОтгрузки.Заголовок = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
		ПриИзмененииДатыОтгрузки(Форма);
		Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШК;
	КонецПроцедуры 
	
	Процедура ФормаУпаковкиПаллетовМаркета_КнопкаЗавершитьНажатие(Форма) Экспорт
		Форма.ЭлементыФормы.КнопкаНомерРяда.Заголовок = Число(Форма.ЭлементыФормы.КнопкаНомерРяда.Заголовок)+1;
		ПриИзмененииНомераРяда(Форма);
	КонецПроцедуры
	
	Процедура ФормаУпаковкиПаллетовМаркета_КнопкаОчиститьРядНажатие(Форма) Экспорт 
		ДатаОтгрузки = Форма.ЭлементыФормы.КнопкаДатаОтгрузки.Заголовок;
		НомерПаллета = Число(Форма.ЭлементыФормы.КнопкаНомерПаллета.Заголовок);
		НомерРяда = Число(Форма.ЭлементыФормы.КнопкаНомерРяда.Заголовок = "1");
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДатаОтгрузки", ДатаОтгрузки);
		ПараметрыОтбора.Вставить("НомерПаллета", НомерПаллета);
		ПараметрыОтбора.Вставить("НомерРяда", НомерРяда);
		СтрокиДляУдаления = Форма.ПараметрыПаллетов.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ТекСтрока Из СтрокиДляУдаления Цикл
			Форма.ПараметрыПаллетов.Удалить(ТекСтрока);
		КонецЦикла;
		СохранитьПараметрыПаллетовМаркета(Форма);
		ПриИзмененииНомераРяда(Форма);
	КонецПроцедуры
	
	Процедура ФормаУпаковкиПаллетовМаркета_ПолеВводаШКПриИзменении(Форма) Экспорт 
		Если Форма.ПолеВводаШК = "" Тогда Возврат КонецЕсли;
		//Если СтрДлина(Форма.ПолеВводаШК) <> 9 Тогда Возврат КонецЕсли;
		
		ПрочитатьПараметрыПаллетовМаркета(Форма); 
		ДатаОтгрузки = Форма.ЭлементыФормы.КнопкаДатаОтгрузки.Заголовок;
		НомерПаллета = Число(Форма.ЭлементыФормы.КнопкаНомерПаллета.Заголовок);
		НомерРяда = Число(Форма.ЭлементыФормы.КнопкаНомерРяда.Заголовок);
		ДобавитьШКзаказаВРяд(Форма, ДатаОтгрузки, НомерПаллета, НомерРяда);
		СохранитьПараметрыПаллетовМаркета(Форма);
		ДанныеАнализа = АнализПараметровПаллетовМаркета(Форма, ДатаОтгрузки, НомерПаллета, НомерРяда);
		Форма.ЭлементыФормы.НадписьПоследнийСканированныйЗаказ.Заголовок = "Последний сканированный заказ: " + Форма.ПолеВводаШК;
		Форма.ЭлементыФормы.НадписьВсегоЗаказовВРяду.Заголовок = "Всего заказов в ряду: " + ДанныеАнализа["КоличествоЗаказовВРяду"];
		
		Форма.ЭлементыФормы.ПолеВводаШК.Значение = "";
		Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаШК;
		НажатьТаб(6);
		
	КонецПроцедуры  
	
	Процедура ФормаУпаковкиПаллетовМаркета_КнопкаНажатие(Форма, ЭлементКнопка) Экспорт
		ФормаВводаЧисла_Название = ?(ТипЭкрана = 3, "ФормаВводаЧисла_1280х768", "ФормаВводаЧисла");
		ФормаВводаЧисла = ПолучитьФорму(ФормаВводаЧисла_Название);
		Если ЭлементКнопка.Имя = "КнопкаДатаОтгрузки" Тогда
			ФормаВводаЧисла.ПолеВводаЧисла = Дата(ЭлементКнопка.Заголовок+" 0:00:00");
		Иначе
			ФормаВводаЧисла.ПолеВводаЧисла = Число(ЭлементКнопка.Заголовок);
		КонецЕсли;
		Результат = ФормаВводаЧисла.ОткрытьМодально();
		Если Результат <> 0 Тогда
			ЭлементКнопка.Заголовок = Результат;
			Если ЭлементКнопка.Имя = "КнопкаДатаОтгрузки" Тогда
				ПриИзмененииДатыОтгрузки(Форма);
			ИначеЕсли ЭлементКнопка.Имя = "КнопкаНомерПаллета" Тогда
				ПриИзмененииНомераПаллета(Форма);
			Иначе 
				ПриИзмененииНомераРяда(Форма);
			КонецЕсли;
		КонецЕсли;    
	КонецПроцедуры
	
	Процедура ФормаУпаковкиПаллетовМаркета_КнопкаЗакрытьФормуНажатие(Форма) Экспорт
		Форма.Закрыть(0);
	КонецПроцедуры  
	
	Процедура ПрочитатьПараметрыПаллетовМаркета(Форма)
		ВремТаб = ЧтениеОбъектаИзСохраненныхНастроек("ТСД", "ПараметрыПаллетовМаркета");
		Если ТипЗнч(ВремТаб) = Тип("ТаблицаЗначений") Тогда
			Форма.ПараметрыПаллетов = ЧтениеОбъектаИзСохраненныхНастроек("ТСД", "ПараметрыПаллетовМаркета");
		Иначе 
			
			КЧ2 = Новый КвалификаторыЧисла(2,0);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Число"));
			Число2 = Новый ОписаниеТипов(Массив, , ,КЧ2);
			
			КС11 = Новый КвалификаторыСтроки(11);
			Массив.Очистить();;
			Массив.Добавить(Тип("Строка"));
			Строка11 = Новый ОписаниеТипов(Массив, , ,КС11);
			
			КС10 = Новый КвалификаторыСтроки(10);
			Массив.Очистить();;
			Массив.Добавить(Тип("Строка"));
			Строка10 = Новый ОписаниеТипов(Массив, , ,КС10);
			
			Форма.ПараметрыПаллетов = Новый ТаблицаЗначений;
			Форма.ПараметрыПаллетов.Колонки.Добавить("НомерЗаказаМаркета",Строка11);
			Форма.ПараметрыПаллетов.Колонки.Добавить("ДатаОтгрузки",Строка10);
			Форма.ПараметрыПаллетов.Колонки.Добавить("НомерПаллета",Число2);
			Форма.ПараметрыПаллетов.Колонки.Добавить("НомерРяда",Число2);
			
		КонецЕсли;	
	КонецПроцедуры
	
	Процедура СохранитьПараметрыПаллетовМаркета(Форма)
		СохраненнаяНастройка = Новый ХранилищеЗначения(Форма.ПараметрыПаллетов);
		ЗаписьОбъектаВСохраненныеНастройки("ТСД", "ПараметрыПаллетовМаркета", СохраненнаяНастройка); 
	КонецПроцедуры
	
	Функция АнализПараметровПаллетовМаркета(Форма, ДатаОтгрузки, НомерПаллета = Неопределено, НомерРяда = Неопределено)
		ДанныеАнализа = Новый Структура;
		ДанныеАнализа.Вставить("ДатаОтгрузки", ДатаОтгрузки);
		
		Если НомерПаллета = Неопределено и НомерРяда = Неопределено Тогда
			ЗапросПоследнегоРяда = Новый Запрос;
			ЗапросПоследнегоРяда.Текст =
			"ВЫБРАТЬ
			|	ПараметрыПаллетов.НомерЗаказаМаркета КАК НомерЗаказаМаркета,
			|	ПараметрыПаллетов.ДатаОтгрузки КАК ДатаОтгрузки,
			|	ПараметрыПаллетов.НомерПаллета КАК НомерПаллета,
			|	ПараметрыПаллетов.НомерРяда КАК НомерРяда
			|ПОМЕСТИТЬ ПараметрыПаллетов
			|ИЗ
			|	&ПараметрыПаллетов КАК ПараметрыПаллетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПараметрыПаллетов.НомерЗаказаМаркета КАК НомерЗаказаМаркета,
			|	ПараметрыПаллетов.ДатаОтгрузки КАК ДатаОтгрузки,
			|	ПараметрыПаллетов.НомерПаллета КАК НомерПаллета,
			|	ПараметрыПаллетов.НомерРяда КАК НомерРяда
			|ИЗ
			|	ПараметрыПаллетов КАК ПараметрыПаллетов
			|ГДЕ
			|	ПараметрыПаллетов.ДатаОтгрузки = &ДатаОтгрузки
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПараметрыПаллетов.НомерПаллета УБЫВ,
			|	ПараметрыПаллетов.НомерРяда УБЫВ";
			ЗапросПоследнегоРяда.УстановитьПараметр("ПараметрыПаллетов", Форма.ПараметрыПаллетов);
			ЗапросПоследнегоРяда.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
			Выборка = ЗапросПоследнегоРяда.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НомерПаллета = Выборка.НомерПаллета;
				НомерРяда = Выборка.НомерРяда;
			Иначе
				НомерПаллета = 1;
				НомерРяда = 1;
			КонецЕсли;
		ИначеЕсли НомерРяда = Неопределено Тогда
			ЗапросПоследнегоРяда = Новый Запрос;
			ЗапросПоследнегоРяда.Текст =
			"ВЫБРАТЬ
			|	ПараметрыПаллетов.НомерЗаказаМаркета КАК НомерЗаказаМаркета,
			|	ПараметрыПаллетов.ДатаОтгрузки КАК ДатаОтгрузки,
			|	ПараметрыПаллетов.НомерПаллета КАК НомерПаллета,
			|	ПараметрыПаллетов.НомерРяда КАК НомерРяда
			|ПОМЕСТИТЬ ПараметрыПаллетов
			|ИЗ
			|	&ПараметрыПаллетов КАК ПараметрыПаллетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПараметрыПаллетов.НомерЗаказаМаркета КАК НомерЗаказаМаркета,
			|	ПараметрыПаллетов.ДатаОтгрузки КАК ДатаОтгрузки,
			|	ПараметрыПаллетов.НомерПаллета КАК НомерПаллета,
			|	ПараметрыПаллетов.НомерРяда КАК НомерРяда
			|ИЗ
			|	ПараметрыПаллетов КАК ПараметрыПаллетов
			|ГДЕ
			|	ПараметрыПаллетов.ДатаОтгрузки = &ДатаОтгрузки
			|	И ПараметрыПаллетов.НомерПаллета = &НомерПаллета
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПараметрыПаллетов.НомерПаллета УБЫВ,
			|	ПараметрыПаллетов.НомерРяда УБЫВ";
			ЗапросПоследнегоРяда.УстановитьПараметр("ПараметрыПаллетов", Форма.ПараметрыПаллетов);
			ЗапросПоследнегоРяда.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
			ЗапросПоследнегоРяда.УстановитьПараметр("НомерПаллета", НомерПаллета);
			Выборка = ЗапросПоследнегоРяда.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НомерРяда = Выборка.НомерРяда;
			Иначе
				НомерРяда = 1;
			КонецЕсли;
		КонецЕсли;	
		
		ЗапросКоличестваЗаказовВРяду = Новый Запрос;
		ЗапросКоличестваЗаказовВРяду.Текст =
		"ВЫБРАТЬ
		|	ПараметрыПаллетов.НомерЗаказаМаркета КАК НомерЗаказаМаркета,
		|	ПараметрыПаллетов.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ПараметрыПаллетов.НомерПаллета КАК НомерПаллета,
		|	ПараметрыПаллетов.НомерРяда КАК НомерРяда
		|ПОМЕСТИТЬ ПараметрыПаллетов
		|ИЗ
		|	&ПараметрыПаллетов КАК ПараметрыПаллетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(1) КАК КоличествоЗаказовВРяду
		|ИЗ
		|	ПараметрыПаллетов КАК ПараметрыПаллетов
		|ГДЕ
		|	ПараметрыПаллетов.ДатаОтгрузки = &ДатаОтгрузки
		|	И ПараметрыПаллетов.НомерПаллета = &НомерПаллета
		|	И ПараметрыПаллетов.НомерРяда = &НомерРяда";
		ЗапросКоличестваЗаказовВРяду.УстановитьПараметр("ПараметрыПаллетов", Форма.ПараметрыПаллетов);
		ЗапросКоличестваЗаказовВРяду.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
		ЗапросКоличестваЗаказовВРяду.УстановитьПараметр("НомерПаллета", НомерПаллета);
		ЗапросКоличестваЗаказовВРяду.УстановитьПараметр("НомерРяда", НомерРяда);
		Выборка = ЗапросКоличестваЗаказовВРяду.Выполнить().Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.КоличествоЗаказовВРяду) Тогда
			КоличествоЗаказовВРяду = Выборка.КоличествоЗаказовВРяду;
		Иначе
			КоличествоЗаказовВРяду = 0;
		КонецЕсли;
		
		ДанныеАнализа.Вставить("ПоследнийНомерПаллета", НомерПаллета);   
		ДанныеАнализа.Вставить("ПоследнийНомерРяда", НомерРяда);
		ДанныеАнализа.Вставить("КоличествоЗаказовВРяду", КоличествоЗаказовВРяду);
		
		Возврат ДанныеАнализа;
	КонецФункции
	
	Процедура ДобавитьШКзаказаВРяд(Форма, ДатаОтгрузки, НомерПаллета, НомерРяда)
		НомерЗаказаМаркета = Форма.ПолеВводаШК;
		СтрокаТаблицы = Форма.ПараметрыПаллетов.Найти(НомерЗаказаМаркета, "НомерЗаказаМаркета");
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = Форма.ПараметрыПаллетов.Добавить();
			СтрокаТаблицы.НомерЗаказаМаркета = НомерЗаказаМаркета;
		КонецЕсли;
		СтрокаТаблицы.ДатаОтгрузки = ДатаОтгрузки;
		СтрокаТаблицы.НомерПаллета = НомерПаллета;
		СтрокаТаблицы.НомерРяда = НомерРяда;	
	КонецПроцедуры
	
	Процедура ПриИзмененииДатыОтгрузки(Форма)
		ПрочитатьПараметрыПаллетовМаркета(Форма);
		ДанныеАнализа = АнализПараметровПаллетовМаркета(Форма, Форма.ЭлементыФормы.КнопкаДатаОтгрузки.Заголовок);
		Форма.ЭлементыФормы.КнопкаНомерПаллета.Заголовок = ДанныеАнализа["ПоследнийНомерПаллета"];
		Форма.ЭлементыФормы.КнопкаНомерРяда.Заголовок = ДанныеАнализа["ПоследнийНомерРяда"];
		Форма.ЭлементыФормы.НадписьПоследнийСканированныйЗаказ.Заголовок = "Последний сканированный заказ: нет";
		Форма.ЭлементыФормы.НадписьВсегоЗаказовВРяду.Заголовок = "Всего заказов в ряду: " + ДанныеАнализа["КоличествоЗаказовВРяду"];
	КонецПроцедуры
	
	Процедура ПриИзмененииНомераПаллета(Форма)	
		ПрочитатьПараметрыПаллетовМаркета(Форма);
		ДанныеАнализа = АнализПараметровПаллетовМаркета(Форма, Форма.ЭлементыФормы.КнопкаДатаОтгрузки.Заголовок, Число(Форма.ЭлементыФормы.КнопкаНомерПаллета.Заголовок));
		Форма.ЭлементыФормы.КнопкаНомерПаллета.Заголовок = ДанныеАнализа["ПоследнийНомерПаллета"];
		Форма.ЭлементыФормы.КнопкаНомерРяда.Заголовок = ДанныеАнализа["ПоследнийНомерРяда"];
		Форма.ЭлементыФормы.НадписьПоследнийСканированныйЗаказ.Заголовок = "Последний сканированный заказ: нет";
		Форма.ЭлементыФормы.НадписьВсегоЗаказовВРяду.Заголовок = "Всего заказов в ряду: " + ДанныеАнализа["КоличествоЗаказовВРяду"];
	КонецПроцедуры
	
	Процедура ПриИзмененииНомераРяда(Форма)	
		ПрочитатьПараметрыПаллетовМаркета(Форма);
		ДанныеАнализа = АнализПараметровПаллетовМаркета(Форма, Форма.ЭлементыФормы.КнопкаДатаОтгрузки.Заголовок, Число(Форма.ЭлементыФормы.КнопкаНомерПаллета.Заголовок), Число(Форма.ЭлементыФормы.КнопкаНомерРяда.Заголовок));
		Форма.ЭлементыФормы.КнопкаНомерПаллета.Заголовок = ДанныеАнализа["ПоследнийНомерПаллета"];
		Форма.ЭлементыФормы.КнопкаНомерРяда.Заголовок = ДанныеАнализа["ПоследнийНомерРяда"];
		Форма.ЭлементыФормы.НадписьПоследнийСканированныйЗаказ.Заголовок = "Последний сканированный заказ: нет";
		Форма.ЭлементыФормы.НадписьВсегоЗаказовВРяду.Заголовок = "Всего заказов в ряду: " + ДанныеАнализа["КоличествоЗаказовВРяду"];
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_ввода_числа
	Процедура ФормаВводаЧисла_КнопкаOKНажатие(Форма) Экспорт
		Форма.Закрыть(?(ТипЗнч(Форма.ПолеВводаЧисла) = Тип("Дата"), Формат(Форма.ПолеВводаЧисла,"ДФ=dd.MM.yyyy"), Форма.ПолеВводаЧисла));
	КонецПроцедуры 
	
	Процедура ФормаВводаЧисла_КнопкаОтменаНажатие(Форма) Экспорт
		Форма.Закрыть(0);
	КонецПроцедуры 
	
	Процедура ФормаВводаЧисла_КнопкаУвеличитьНажатие(Форма) Экспорт
		Если ТипЗнч(Форма.ПолеВводаЧисла) = Тип("Дата") Тогда
			Форма.ПолеВводаЧисла = Форма.ПолеВводаЧисла + 86400;
		Иначе
			Форма.ПолеВводаЧисла = Форма.ПолеВводаЧисла + 1;
		КонецЕсли;
	КонецПроцедуры 
	
	Процедура ФормаВводаЧисла_КнопкаУменьшитьНажатие(Форма) Экспорт
		Если ТипЗнч(Форма.ПолеВводаЧисла) = Тип("Дата") Тогда
			Форма.ПолеВводаЧисла = Форма.ПолеВводаЧисла - 86400;
		Иначе
			Форма.ПолеВводаЧисла = Форма.ПолеВводаЧисла - 1;
			Если Форма.ПолеВводаЧисла = 0 Тогда
				Форма.ПолеВводаЧисла = 1;
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры 
	#КонецОбласти 
	
	#Область Форма_поиска_заказа_маркета
	Процедура ФормаПоискаЗаказаМаркета_ПриОткрытии(Форма) Экспорт
		Если ТипЭкрана = 3 Тогда ЗаполнитьТаблицуОтсутствующихЗаказов(Форма) КонецЕсли;
		ФормаПоискаЗаказаМаркета_ВидимостьЭлеменитовФормы(Форма, Ложь, Ложь);
		Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаНомераЗаказаМаркета;
	КонецПроцедуры                             
	
	Процедура ЗаполнитьТаблицуОтсутствующихЗаказов(Форма, ДатаОтгрузки = Неопределено)
		Если ДатаОтгрузки = Неопределено Тогда
			ДатаОтгрузки = ТекущаяДата();
		КонецЕсли;
		
		ТаблицаОтсутствующихЗаказов = Форма.ТаблицаОтсутствующихЗаказов;
		ТаблицаОтсутствующихЗаказов.Очистить();
		ТаблицаДанных = ЧтениеОбъектаИзСохраненныхНастроек("ТСД", "ПараметрыПаллетовМаркета");
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПараметрыПаллетов.НомерЗаказаМаркета КАК НомерЗаказаМаркета,
		|	ПараметрыПаллетов.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ПараметрыПаллетов.НомерПаллета КАК НомерПаллета,
		|	ПараметрыПаллетов.НомерРяда КАК НомерРяда
		|ПОМЕСТИТЬ ПараметрыПаллетов
		|ИЗ
		|	&ПараметрыПаллетов КАК ПараметрыПаллетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БС_ОбменЗаказамиССайтом.Ссылка.Номер КАК НомерВБазе,
		|	БС_ОбменЗаказамиССайтом.НомерЗаказаМаркет КАК НомерЗаказаМаркет,
		|	БС_ОбменЗаказамиССайтом.Ref_Key КАК НомерНаСайте
		|ИЗ
		|	РегистрСведений.БС_ОбменЗаказамиССайтом КАК БС_ОбменЗаказамиССайтом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыПаллетов КАК ПараметрыПаллетов
		|		ПО БС_ОбменЗаказамиССайтом.НомерЗаказаМаркет = ПараметрыПаллетов.НомерЗаказаМаркета
		|ГДЕ
		|	БС_ОбменЗаказамиССайтом.ДатаОтгрузкиМаркет ПОДОБНО &ДатаОтгрузкиМаркет + ""%""
		|	И ПараметрыПаллетов.НомерЗаказаМаркета ЕСТЬ NULL
		|	И БС_ОбменЗаказамиССайтом.СтатусНаСайте <> ""Отмена заказа""
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерНаСайте";
		Запрос.УстановитьПараметр("ПараметрыПаллетов", ТаблицаДанных);
		Если Форма.ИндексМаркета = 1 Тогда
			Запрос.УстановитьПараметр("ДатаОтгрузкиМаркет", Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy")); 
		Иначе
			Запрос.УстановитьПараметр("ДатаОтгрузкиМаркет", Формат(ДатаОтгрузки, "ДФ=yyyy-MM-dd"));
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = ТаблицаОтсутствующихЗаказов.Добавить();
			СтрокаТаблицы.НомерЗаказаВБазе = Выборка.НомерВБазе;
			СтрокаТаблицы.НомерЗаказаМаркета = Выборка.НомерЗаказаМаркет;
			СтрокаТаблицы.НомерЗаказаСайта = Выборка.НомерНаСайте;
		КонецЦикла;
	КонецПроцедуры
	
	Процедура ФормаПоискаЗаказаМаркета_Переключатель1ПриИзменении(Форма) Экспорт
		ЗаполнитьТаблицуОтсутствующихЗаказов(Форма);
	КонецПроцедуры
	
	Процедура ФормаПоискаЗаказаМаркета_КнопкаСегодняНажатие(Форма) Экспорт
		ЗаполнитьТаблицуОтсутствующихЗаказов(Форма);
	КонецПроцедуры
	
	Процедура ФормаПоискаЗаказаМаркета_КнопкаЗавтраНажатие(Форма) Экспорт
		ЗаполнитьТаблицуОтсутствующихЗаказов(Форма, ТекущаяДата()+86400);
	КонецПроцедуры
	
	Процедура ФормаПоискаЗаказаМаркета_КнопкаЗакрытьНажатие(Форма) Экспорт
		Форма.Закрыть(0);
	КонецПроцедуры
	
	Процедура ФормаПоискаЗаказаМаркета_ПолеВводаНомераЗаказаМаркетаПриИзменении(Форма) Экспорт
		
		ТаблицаДанных = ЧтениеОбъектаИзСохраненныхНастроек("ТСД", "ПараметрыПаллетовМаркета");
		ЗапросПоискаЗаказа = Новый Запрос;
		ЗапросПоискаЗаказа.Текст =
		"ВЫБРАТЬ
		|	ПараметрыПаллетов.НомерЗаказаМаркета КАК НомерЗаказаМаркета,
		|	ПараметрыПаллетов.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ПараметрыПаллетов.НомерПаллета КАК НомерПаллета,
		|	ПараметрыПаллетов.НомерРяда КАК НомерРяда
		|ПОМЕСТИТЬ ПараметрыПаллетов
		|ИЗ
		|	&ПараметрыПаллетов КАК ПараметрыПаллетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПараметрыПаллетов.НомерЗаказаМаркета КАК НомерЗаказаМаркета,
		|	ПараметрыПаллетов.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ПараметрыПаллетов.НомерПаллета КАК НомерПаллета,
		|	ПараметрыПаллетов.НомерРяда КАК НомерРяда
		|ИЗ
		|	ПараметрыПаллетов КАК ПараметрыПаллетов
		|ГДЕ
		|	ПараметрыПаллетов.НомерЗаказаМаркета = &НомерЗаказаМаркета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПараметрыПаллетов.НомерПаллета УБЫВ,
		|	ПараметрыПаллетов.НомерРяда УБЫВ";
		ЗапросПоискаЗаказа.УстановитьПараметр("ПараметрыПаллетов", ТаблицаДанных);
		ЗапросПоискаЗаказа.УстановитьПараметр("НомерЗаказаМаркета", Форма.ПолеВводаНомераЗаказаМаркета);
		Выборка = ЗапросПоискаЗаказа.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Форма.ЭлементыФормы.НадписьПоискаЗаказа.Заголовок = "Найден";
			Форма.ЭлементыФормы.НадписьПоискаЗаказа.ЦветТекста = WebЦвета.Зеленый;
			Форма.ЭлементыФормы.НадписьДатаОтгрузки.Заголовок = Выборка.ДатаОтгрузки;
			Форма.ЭлементыФормы.НадписьНомерПаллета.Заголовок = Выборка.НомерПаллета;
			Форма.ЭлементыФормы.НадписьНомерРяда.Заголовок = Выборка.НомерРяда;
			ФормаПоискаЗаказаМаркета_ВидимостьЭлеменитовФормы(Форма, Истина, Истина);
		Иначе
			Форма.ЭлементыФормы.НадписьПоискаЗаказа.Заголовок = "Не найден";
			Форма.ЭлементыФормы.НадписьПоискаЗаказа.ЦветТекста = WebЦвета.Красный;
			ФормаПоискаЗаказаМаркета_ВидимостьЭлеменитовФормы(Форма, Истина, Ложь);
		КонецЕсли;
		Форма.ПолеВводаНомераЗаказаМаркета = "";
		Форма.ТекущийЭлемент = Форма.ЭлементыФормы.ПолеВводаНомераЗаказаМаркета;
	КонецПроцедуры
	
	Процедура ФормаПоискаЗаказаМаркета_ВидимостьЭлеменитовФормы(Форма, ВидимостьПоиска, ВидимостьОстальных)
		Форма.ЭлементыФормы.НадписьПоискаЗаказа.Видимость = ВидимостьПоиска;
		Форма.ЭлементыФормы.Надпись2.Видимость = ВидимостьОстальных;
		Форма.ЭлементыФормы.Надпись3.Видимость = ВидимостьОстальных;
		Форма.ЭлементыФормы.Надпись4.Видимость = ВидимостьОстальных;
		Форма.ЭлементыФормы.НадписьДатаОтгрузки.Видимость = ВидимостьОстальных;
		Форма.ЭлементыФормы.НадписьНомерПаллета.Видимость = ВидимостьОстальных;
		Форма.ЭлементыФормы.НадписьНомерРяда.Видимость = ВидимостьОстальных;
	КонецПроцедуры
	
	#КонецОбласти
	
	#Область Форма_проверки_заказов_площадки
	Процедура ФормаПроверкиЗаказовПлощадки_ПриОткрытии(Форма) Экспорт
		Форма.ПереключательПлощадки = 1;
		Форма.ДатаОтгрузки = ТекущаяДата();
		ОбновитьИнфоНадпись(Форма);
	КонецПроцедуры
	
	Процедура ОбновитьИнфоНадпись(Форма)
		Если Форма.ПереключательПлощадки = 1 Тогда
			Контрагент = КонтрагентЯндекс;
		ИначеЕсли Форма.ПереключательПлощадки = 2 Тогда
			Контрагент = КонтрагентОЗОН;
		Иначе
			Контрагент = КонтрагентWB;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	БС_СтатусыДокументовСрезПоследних.Статус КАК Статус
		|ПОМЕСТИТЬ ЗаказыНаДату
		|ИЗ
		|	РегистрСведений.БС_СтатусыДокументов.СрезПоследних КАК БС_СтатусыДокументовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО БС_СтатусыДокументовСрезПоследних.Документ = ЗаказПокупателя.Ссылка
		|ГДЕ
		|	ЗаказПокупателя.Контрагент = &Контрагент
		|	И ЗаказПокупателя.ДатаОтгрузки = &ДатаОтгрузки
		|	И ЗаказПокупателя.Проведен = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыНаДату.Ссылка КАК Ссылка
		|ИЗ
		|	ЗаказыНаДату КАК ЗаказыНаДату
		|ГДЕ
		|	ЗаказыНаДату.Статус <> ЗНАЧЕНИЕ(Перечисление.БС_СтатусыДокументов.Отменен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыНаДату.Ссылка";
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ДатаОтгрузки", Форма.ДатаОтгрузки);
		СписокЗаказов = Новый СписокЗначений;
		СписокЗаказов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		Форма.СписокЗаказов = СписокЗаказов;
		
		Форма.НадписьИнфо = "Всего документов: " + СписокЗаказов.Количество();
	КонецПроцедуры
	
	Процедура ФормаПроверкиЗаказовПлощадки_ОбновитьИнфоНадпись(Форма) Экспорт
		ОбновитьИнфоНадпись(Форма);
	КонецПроцедуры
	
	Процедура ФормаПроверкиЗаказовПлощадки_КнопкаНачатьНажатие(Форма) Экспорт 
		ФормаСканированияЗаказовПлощадки_Название = ?(ТипЭкрана = 3, "ФормаСканированияЗаказовПлощадки_1280х768", Неопределено);
		ФормаСканированияЗаказовПлощадки = ПолучитьФорму(ФормаСканированияЗаказовПлощадки_Название);
		ФормаСканированияЗаказовПлощадки.СписокЗаказов = Форма.СписокЗаказов;
		ФормаСканированияЗаказовПлощадки.Контрагент = ?(Форма.ПереключательПлощадки = 1, КонтрагентЯндекс, ?(Форма.ПереключательПлощадки = 2, КонтрагентОЗОН, КонтрагентWB));	
		ФормаСканированияЗаказовПлощадки.ОткрытьМодально();
	КонецПроцедуры 
	#КонецОбласти
	
	#Область Форма_сканирования_заказов_площадки
	Процедура ФормаСканированияЗаказовПлощадки_ПриОткрытии(Форма) Экспорт
		Форма.НадписьДокумент = ""; 
		Для Каждого Элемент Из Форма.СписокЗаказов Цикл
			Элемент.Пометка = Ложь;
		КонецЦикла;
		ИзменитьСписокЗаказов(Форма);
	КонецПроцедуры
	
	Процедура ФормаСканированияЗаказовПлощадки_ПолеВводаШКПриИзменении(Форма) Экспорт
		ИнфоТекст = "";
		Если Форма.Контрагент = КонтрагентЯндекс Тогда
			ЗапросЗаказМаркета = Новый Запрос;
			ЗапросЗаказМаркета.Текст = 
			"ВЫБРАТЬ
			|	БС_ОбменЗаказамиССайтом.Ссылка КАК ЗаказСсылка
			|ИЗ
			|	РегистрСведений.БС_ОбменЗаказамиССайтом КАК БС_ОбменЗаказамиССайтом
			|ГДЕ
			|	БС_ОбменЗаказамиССайтом.НомерЗаказаМаркет = &Штрихкод";
			ЗапросЗаказМаркета.УстановитьПараметр("Штрихкод", Форма.ШК);
			Результат = ЗапросЗаказМаркета.Выполнить();
			Если Результат.Пустой() Тогда 
				ИнфоТекст = "Штрих код """+Форма.ШК+""" не найден";
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ЗаказПлощадки = Выборка.ЗаказСсылка;
				ЭлементСписка = Форма.СписокЗаказов.НайтиПоЗначению(ЗаказПлощадки);
				Если ЭлементСписка = Неопределено Тогда
					ИнфоТекст = СтрШаблон("Заказ №%1 не этого дня", ЗаказПлощадки.Номер);
				Иначе
					ЭлементСписка.Пометка = Истина;
					ИнфоТекст = СтрШаблон("Заказ №%1 отмечен", ЗаказПлощадки.Номер);
					ИзменитьСписокЗаказов(Форма);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Форма.Контрагент = КонтрагентОЗОН Тогда
			ЗаказПлощадки = ЗапроситьЗаказОзонПоШтрихкоду(Форма.ШК);
			
			Если ЗаказПлощадки = Неопределено Тогда 
				ВозможныйНомерОтправления = Прав(Форма.ШК, СтрДлина(Форма.ШК)-2);
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	БС_ОбменЗаказамиССайтом.Ссылка
				|ИЗ
				|	РегистрСведений.БС_ОбменЗаказамиССайтом КАК БС_ОбменЗаказамиССайтом
				|ГДЕ
				|	БС_ОбменЗаказамиССайтом.НомерОтправленияОзон = &НомерОтправленияОзон";
				Запрос.УстановитьПараметр("НомерОтправленияОзон", ВозможныйНомерОтправления);
				Результат = Запрос.Выполнить();
				Если Результат.Пустой() Тогда 
					ВозможныйШтрихКодСДЭК = Прав(Форма.ШК, СтрДлина(Форма.ШК)-5);					
					ЗаказПлощадки = ПолучитьЗаказВБазеПоНомеруСДЭК(ВозможныйШтрихКодСДЭК);
				Иначе
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					ЗаказПлощадки = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если ЗаказПлощадки = Неопределено Тогда
				ИнфоТекст = "Штрих код """+Форма.ШК+""" не найден";
			Иначе 
				ЭлементСписка = Форма.СписокЗаказов.НайтиПоЗначению(ЗаказПлощадки);
				ЭлементСписка.Пометка = Истина;
				ИнфоТекст = СтрШаблон("Заказ №%1 отмечен", ЗаказПлощадки.Номер);
				ИзменитьСписокЗаказов(Форма);
			КонецЕсли;
		ИначеЕсли Форма.Контрагент = КонтрагентWB Тогда
			ЗаказПлощадки = Неопределено;
			
			Если ЗаказПлощадки = Неопределено Тогда
				ИнфоТекст = "Штрих код """+Форма.ШК+""" не найден";
			Иначе 
				ЭлементСписка = Форма.СписокЗаказов.НайтиПоЗначению(ЗаказПлощадки);
				ЭлементСписка.Пометка = Истина;
				ИнфоТекст = СтрШаблон("Заказ №%1 отмечен", ЗаказПлощадки.Номер);
				ИзменитьСписокЗаказов(Форма);
			КонецЕсли;
		КонецЕсли;
		Форма.НадписьДокумент = ИнфоТекст;
		Форма.ШК = "";
		НажатьТаб(1);
	КонецПроцедуры 
	
	Процедура ИзменитьСписокЗаказов(Форма)
		Форма.СписокОтображения.Очистить();
		Для Каждого Элемент Из Форма.СписокЗаказов Цикл
			Если Элемент.Пометка Тогда Продолжить КонецЕсли;
			
			Форма.СписокОтображения.Добавить(Элемент.Значение);
		КонецЦикла;                                      
		Всего = Форма.СписокЗаказов.Количество();
		Собрано = Всего - Форма.СписокОтображения.Количество();
		Форма.НадписьИтоги = СтрШаблон("Собрано %1. Всего %2.", Собрано, Всего);
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_привязки_мест_хранения_Новая
	Процедура ФормаПривязкиМестХранения_ПриОткрытии(Форма) Экспорт
		ТекстДействия = "Ожидание ввода ШК места или номенклатуры";
		ИзменитьНадписьДействия(Форма, ТекстДействия, "Ожидание"); 
		
		Форма.СкладПользователя = ПолучитьСкладПользователя();
		Если Форма.СкладПользователя = Неопределено Тогда
			Форма.СкладПользователя = ВыборСкладаПользователем();
			Если Форма.СкладПользователя = Неопределено Тогда
				Форма.СкладПользователя = СкладГурьянова;
			КонецЕсли;
		КонецЕсли; 
	КонецПроцедуры
	
	Процедура ФормаПривязкиМестХранения_ВводШК(Форма) Экспорт 
		ШтрихКод = Форма.ШтрихКод;
		Форма.ШтрихКод = "";
		
		Владелец = ПолучитьВладельцаШтрихкода(ШтрихКод);
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.МестаХранения") Тогда 
			Если ЗначениеЗаполнено(Форма.Номенклатура) Тогда
				ТекстДействия = "Нажмите ""Привязать"", измените Номенклатуру или выберите другое Место";
			Иначе
				ТекстДействия = "Отсканируйте Номенклатуру или измените место";
			КонецЕсли;
			ИзменитьНадписьДействия(Форма, ТекстДействия, "Ожидание");
			
			Форма.Место = Владелец;
			Форма.НадписьМесто = ПолучитьПолныйПутьМестаХранения(Владелец);
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			Форма.Номенклатура = Владелец;
			Форма.НадписьАртикул = Владелец.Артикул;
			Форма.НадписьНоменклатура = Владелец;
			
			ЗаполнитьСписокСроков(Форма);
			
			Если ЗначениеЗаполнено(Форма.Место) Тогда
				ТекстДействия = "Нажмите ""Привязать"", измените Место или выберите другую Номенклатуру";
			Иначе
				ТекстДействия = "Отсканируйте Место или измените Номенклатуру";
			КонецЕсли;
			ИзменитьНадписьДействия(Форма, ТекстДействия, "Ожидание");		
		КонецЕсли;
		
		НажатьТаб(4);
	КонецПроцедуры
	
	Процедура ФормаПривязкиМестХранения_КнопкаПривязатьНажатие(Форма) Экспорт
		// 1. Привяжем выбранные сроки к текущему месту
		// 2. Проверить, что по текущей позиции есть место по умолчанию, без срока 
		
		Если не ЗначениеЗаполнено(Форма.Номенклатура) Тогда
			ТекстДействия = "Номенклатура не выбрана";
			Действие = "Ожидание";
		ИначеЕсли не ЗначениеЗаполнено(Форма.Место) Тогда
			ТекстДействия = "Место не выбрано";
			Действие = "Ожидание";
		Иначе
			ТекстДействия = "Номенклатура успешно привязана";
			Действие = "Завершение";
			
			Место = ПолучитьМестоХранения(Форма.Номенклатура);
			Если Место = Неопределено Тогда
				ИзменитьМестоХраненияНоменклатуры(Форма.Номенклатура, Форма.Место);
			КонецЕсли;
			
			Для Каждого СтрокаСписка Из Форма.ПолеВводаСроков Цикл
				Если СтрокаСписка.Пометка Тогда
					ИзменитьМестоХраненияНоменклатуры(Форма.Номенклатура, Форма.Место, СтрокаСписка.ХарактеристикаНоменклатуры);
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьСписокСроков(Форма);
		КонецЕсли;
		
		ИзменитьНадписьДействия(Форма, ТекстДействия, Действие); 
	КонецПроцедуры
	
	Процедура ФормаПривязкиМестХранения_ПолеСпискаСроковВыбор(Форма) Экспорт
		Значние = Форма.ЭлементыФормы.ПолеСпискаСроков.ТекущаяСтрока.Значение;
	КонецПроцедуры
	
	Процедура ФормаПривязкиМестХранения_ПриВыводеСтроки(Форма, ОформлениеСтроки, ДанныеСтроки) Экспорт
		Если ДанныеСтроки.Пометка Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			ОформлениеСтроки.Ячейки.Пометка.Текст = "√";
		Иначе
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
			ОформлениеСтроки.Ячейки.Пометка.Текст = "";
		КонецЕсли;
	КонецПроцедуры
	
	Процедура ФормаПривязкиМестХранения_Выбор(Форма, ВыбраннаяСтрока) Экспорт
		ВыбраннаяСтрока.Пометка = не ВыбраннаяСтрока.Пометка;
	КонецПроцедуры
	
	Процедура ИзменитьНадписьДействия(Форма, ТекстДействия, Действие = "Завершение")
		Форма.НадписьДействие = ТекстДействия;
		Если Действие = "Ожидание" Тогда
			Форма.ЭлементыФормы.НадписьДействие.ЦветТекста = ЦветаСтиля.ВысокийПриоритетДокумента;
		ИначеЕсли Действие = "Завершение" Тогда
			Форма.ЭлементыФормы.НадписьДействие.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
		КонецЕсли;
	КонецПроцедуры
	
	Процедура ЗаполнитьСписокСроков(Форма)
		Форма.ПолеВводаСроков.Очистить();
		СтрокаСрока = Форма.ПолеВводаСроков.Добавить();
		СтрокаСрока.Срок = "Без срока";
		СтрокаСрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		МестоХранения = ПолучитьМестоХранения(Форма.Номенклатура);
		СтрокаСрока.Место = ПолучитьПолныйПутьМестаХранения(МестоХранения);
		СтрокаСрока.МестоХранения = МестоХранения;
		СтрокаСрока.Пометка = Истина;
		
		Если Форма.Номенклатура.ВестиУчетПоХарактеристикам Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			|ИЗ
			|	РегистрНакопления.ТоварыНаСкладах.Остатки(
			|			,
			|			Склад = &Склад
			|				И Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|		ПО ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры = ЗначенияСвойствОбъектов.Объект
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &СвойствоСрокГодности
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗначенияСвойствОбъектов.Значение";
			Запрос.УстановитьПараметр("Склад", Форма.СкладПользователя);
			Запрос.УстановитьПараметр("Номенклатура", Форма.Номенклатура);
			Запрос.УстановитьПараметр("СвойствоСрокГодности", СвойствоСрокГодности);
			Выборка = Запрос.Выполнить().Выбрать(); 
			Пока Выборка.Следующий() Цикл
				СтрокаСрока = Форма.ПолеВводаСроков.Добавить();
				СтрокаСрока.Срок = Строка(Выборка.ХарактеристикаНоменклатуры);
				СтрокаСрока.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				МестоХранения = ПолучитьМестоХранения(Форма.Номенклатура, Выборка.ХарактеристикаНоменклатуры);
				СтрокаСрока.Место = ПолучитьПолныйПутьМестаХранения(МестоХранения);
				СтрокаСрока.МестоХранения = МестоХранения;
				СтрокаСрока.Пометка = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецПроцедуры
	#КонецОбласти
	
	#Область Форма_печати_длинного_штрихкода
	Процедура ФормаПечатиДлинногоШтрихкода_ПриОткрытии(Форма) Экспорт
		ФПДШ_УстановитьДоступностьЭлементов(Форма, Ложь);
	КонецПроцедуры
	
	Процедура ФПДШ_УстановитьДоступностьЭлементов(Форма, Доступность)
		Форма.ЭлементыФормы.ПереключательТолькоСОстатком.Доступность = Доступность;
		Форма.ЭлементыФормы.ПереключательТолькоСОстатком1.Доступность = Доступность;
		Форма.ЭлементыФормы.ПереключательАктуальные.Доступность = Доступность;
		Форма.ЭлементыФормы.ПереключательАктуальные1.Доступность = Доступность;
		Форма.ЭлементыФормы.ТаблицаСроков.Доступность = Доступность;
		//Форма.ЭлементыФормы.КнопкаЭтикетки.Доступность = Доступность;
	КонецПроцедуры  
	
	Процедура ФормаПечатиДлинногоШтрихкода_ПолеВводаШтрихкодаПриИзменении(Форма) Экспорт
		Форма.мШтрихкод = Форма.ШтрихкодНоменклатуры;
		Форма.ШтрихкодНоменклатуры = "";
		Если не ЗначениеЗаполнено(Форма.мШтрихкод) Тогда Возврат КонецЕсли;
		Владелец = ПолучитьВладельцаШтрихкода(Форма.мШтрихкод);
		Если ТипЗнч(Владелец) <> Тип("СправочникСсылка.Номенклатура") Тогда Возврат КонецЕсли;
		Форма.Номенклатура = Владелец;
		Доступность = Владелец.ВестиУчетПоХарактеристикам;	
		ФПДШ_УстановитьДоступностьЭлементов(Форма, Доступность);
		ФПДШ_ЗаполнитьСроки(Форма);
	КонецПроцедуры  
	
	Процедура ФормаПечатиДлинногоШтрихкода_ПереключательПриИзменении(Форма) Экспорт
		ФПДШ_ЗаполнитьСроки(Форма);
	КонецПроцедуры
	
	Процедура ФПДШ_ЗаполнитьСроки(Форма)
		Форма.Сроки.Очистить();
		
		Если Форма.Номенклатура.ВестиУчетПоХарактеристикам Тогда
			ТолькоСОстатком = Форма.ПереключательТолькоСОстатком = 0;
			ТолькоАктуальные = Форма.ПереключательАктуальные = 0;
			Запрос = Новый Запрос; 
			Склад = ПолучитьСкладПользователя();
			Запрос.УстановитьПараметр("Склад", Склад);
			Запрос.УстановитьПараметр("Номенклатура", Форма.Номенклатура);
			Запрос.УстановитьПараметр("СвойствоСрокГодности", СвойствоСрокГодности); 
			#Область Запросы
			Если ТолькоСОстатком Тогда
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
				|ПОМЕСТИТЬ Сроки
				|ИЗ
				|	РегистрНакопления.ТоварыНаСкладах.Остатки(
				|			,
				|			Склад = &Склад
				|				И Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Значение КАК Значение
				|ИЗ
				|	Сроки КАК Сроки
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|		ПО Сроки.ХарактеристикаНоменклатуры = ЗначенияСвойствОбъектов.Объект
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Свойство = &СвойствоСрокГодности
				|	И &Значение
				|
				|УПОРЯДОЧИТЬ ПО
				|	Значение УБЫВ";
			Иначе
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаНоменклатуры
				|ПОМЕСТИТЬ Сроки
				|ИЗ
				|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				|ГДЕ
				|	ХарактеристикиНоменклатуры.Владелец = &Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Значение КАК Значение
				|ИЗ
				|	Сроки КАК Сроки
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|		ПО Сроки.ХарактеристикаНоменклатуры = ЗначенияСвойствОбъектов.Объект
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Свойство = &СвойствоСрокГодности
				|	И &Значение
				|
				|УПОРЯДОЧИТЬ ПО
				|	Значение УБЫВ";
			КонецЕсли; 
			#КонецОбласти
			Если ТолькоАктуальные Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Значение", "ЗначенияСвойствОбъектов.Значение > &ТекДата");
				Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Значение", "ИСТИНА");
			КонецЕсли;
			Форма.Сроки.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение"));
			Форма.Сроки.Вставить(0, Неопределено, "Не выводить срок");
		Иначе
			Форма.Сроки.Добавить("Учёт по срокам не ведётся");
		КонецЕсли;
	КонецПроцедуры
	
	Процедура ФормаПечатиДлинногоШтрихкода_ЭтикеткиНажатие(Форма) Экспорт
		СкладПользователя = ПолучитьСкладПользователя();
		Если СкладПользователя = Неопределено Тогда
			СкладПользователя = ВыборСкладаПользователем();
			Если СкладПользователя = Неопределено Тогда
				СкладПользователя = СкладГурьянова;
			КонецЕсли;
		КонецЕсли; 
		
		ВыбранныйСрок = Форма.ЭлементыФормы.ТаблицаСроков.ТекущаяСтрока;
		Параметры = Новый Структура;
		Параметры.Вставить("Номенклатура", ?(ЗначениеЗаполнено(Форма.Номенклатура.Артикул), Форма.Номенклатура.Артикул+"/", "")+Форма.Номенклатура.Наименование); 
		Если ВыбранныйСрок = Неопределено Тогда
			МестоХранения = ПолучитьМестоХранения(Номенклатура,,СкладПользователя);
		Иначе
			Характеристика = ПолучитьХарактеристикуНоменклатурыПоДате(Форма.Номенклатура, ВыбранныйСрок.Значение);
			МестоХранения = ПолучитьМестоХранения(Форма.Номенклатура, Характеристика, СкладПользователя);
		КонецЕсли;
		Если МестоХранения = Неопределено Тогда 
			МестоХранения = ПолучитьМестоХранения(Номенклатура,,СкладПользователя);
		КонецЕсли;
		Если ЗначениеЗаполнено(МестоХранения) Тогда
			МестоХранения = ПолучитьПолныйПутьМестаХранения(МестоХранения); 
		КонецЕсли;
		Параметры.Вставить("Место", МестоХранения);
		
		Если ВыбранныйСрок = Неопределено или ВыбранныйСрок.Значение = Неопределено Тогда
			// Нужна этикетка с коротким ШК
			ШК = Форма.мШтрихкод;
		Иначе
			// Нужна этикетка с длинным ШК
			ШК = Форма.мШтрихкод + " " + Формат(ВыбранныйСрок.Значение, "ДФ=ddMMyyyy");
		КонецЕсли;
		
		ТабДок = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("МакетШтрихКодаСоСроком");
		Область = Макет.ПолучитьОбласть("Этикетка");
		Область.Параметры.Заполнить(Параметры);
		
		КартинкаШК = СформироватьШтрихКод(,,ШК);
		РисунокШК = Область.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		РисунокШК.Расположить(Область.Область("R3C1:R3C2"));
		РисунокШК.Картинка = КартинкаШК;
		РисунокШК.ГраницаСверху = Ложь;
		РисунокШК.ГраницаСнизу = Ложь;
		РисунокШК.ГраницаСправа = Ложь;
		РисунокШК.ГраницаСлева = Ложь;  
		
		ТабДок.Вывести(Область);
		
		ТабДок.ИмяПринтера = "Brother QL-810W Priemka";
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.ЧерноБелаяПечать = Истина;
		ТабДок.ПолеСверху = 3;
		ТабДок.ПолеСлева = 2;
		ТабДок.ПолеСнизу = 3;
		ТабДок.ПолеСправа = 2;
		//ТабДок.РазмерСтраницы = "Custom";//нестандартный размер в мм
		//ТабДок.ВысотаСтраницы = 28.9;
		//ТабДок.ШиринаСтраницы = 62;
		
		КоличествоЭкземпляров = 1;
		Если не ПросмотрПередПечатью Тогда
			ВвестиЧисло(КоличествоЭкземпляров, "Количество этикеток");
		КонецЕсли;
		ТабДок.КоличествоЭкземпляров = КоличествоЭкземпляров;
		ТабДок.Напечатать(?(ПросмотрПередПечатью, РежимИспользованияДиалогаПечати.Использовать, РежимИспользованияДиалогаПечати.НеИспользовать));
	КонецПроцедуры
	#КонецОбласти
	
	СвойствоСрокГодности = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000000001");
	СвойствоПредупреждатьСрок = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоКоду("000000013");
	КонтрагентОЗОН = Справочники.Контрагенты.НайтиПоКоду("000002900");
	КонтрагентЯндекс = Справочники.Контрагенты.НайтиПоКоду("000002097");
	КонтрагентWB = Справочники.Контрагенты.НайтиПоКоду("000003522");
	ПользовательБазулин = Справочники.Пользователи.НайтиПоКоду("Базулин Дмитрий");
	КаталогМестЗоныВторогоЭтажа = Справочники.МестаХранения.НайтиПоКоду("000000119");
	КаталогМестЗоныДорогогоТовара = Справочники.МестаХранения.НайтиПоКоду("000000144");
	СкладГурьянова = Справочники.Склады.НайтиПоКоду("000000001");
	СкладНоворязанка = Справочники.Склады.НайтиПоКоду("000000029");
	СкладЧертаново = Справочники.Склады.НайтиПоКоду("000000030");
	ГруппаСкладовМосква = Справочники.ГруппыДоступностиСкладов.НайтиПоКоду("000000002");
	СкладВозврата = Справочники.Склады.НайтиПоКоду("000000030");
	
	ПроверкаВерсии();
	///*** ЭТО КОНЕЦ! ***\\\